<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>简易计算器</title>
    <url>/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<h1 id="简易计算器制作-优化过程"><a href="#简易计算器制作-优化过程" class="headerlink" title="简易计算器制作+优化过程"></a>简易计算器制作+优化过程</h1><h3 id="🤪碎碎念"><a href="#🤪碎碎念" class="headerlink" title="🤪碎碎念"></a>🤪碎碎念</h3><blockquote>
<p>其实学了蛮久 <code>js</code> 的，但是一直没有尝试过用 <code>js</code> 去动手写一些小东西。<br>碰巧在某个学习平台看到了计算器的制作，顺手记录一下。</p>
</blockquote>
<h3 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h3><p>简单到令人发指的初始简陋版本👇</p>
<blockquote>
<p>忘记粘源码了，第一部分全是图片真的很搞笑。</p>
</blockquote>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A81.png" srcset="/img/loading.gif" alt></p>
<p><code>js</code> 代码也是一样的粗糙随意。</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A82.png" srcset="/img/loading.gif" alt><br><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A83.png" srcset="/img/loading.gif" alt></p>
<p>效果演示：</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A84.png" srcset="/img/loading.gif" alt><br><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A85.png" srcset="/img/loading.gif" alt><br><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A86.png" srcset="/img/loading.gif" alt><br><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A87.png" srcset="/img/loading.gif" alt></p>
<p>然后就是对 <code>js</code> 代码的优化。</p>
<ol>
<li><p>将重复代码抽出来包装成为独立的函数。</p>
<p> <img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A88.png" srcset="/img/loading.gif" alt></p>
</li>
<li><p>将四个事件绑定集合到一个循环内完成。</p>
<p> <img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A810.png" srcset="/img/loading.gif" alt></p>
<blockquote>
<p>顺便，我可真是个手误小能手。</p>
</blockquote>
<p> <img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A89.png" srcset="/img/loading.gif" alt></p>
</li>
</ol>
<h3 id="💻美化版计算器-以下才是正文系列"><a href="#💻美化版计算器-以下才是正文系列" class="headerlink" title="💻美化版计算器(以下才是正文系列)"></a>💻美化版计算器<del>(以下才是正文系列)</del></h3><p>首先是 <code>html</code> 和 <code>css</code> 部分，差不多是照搬。</p>
<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;title&gt;./简易计算器&lt;/title&gt;
        &lt;style&gt;
            *{
                border: none;
                font-family: &#39;Open Sans&#39;, sans-serif;
                margin: 0;
                padding: 0;
            }
            h1{
                color: #495678;
                font-size: 30px;
                margin-top: 20px;
                padding-top: 50px;
                display: block;
                text-align: center;
                text-decoration: none;
            }
            form{
                background-color: #495678;
                box-shadow: 4px 4px #3d4a65;
                margin: 40px auto;
                padding: 40px 0 30px 40px;
                width: 280px;
            }
            .btn {
                outline: none;
                cursor: pointer;
                font-size: 20px;
                height: 45px;
                margin: 5px 0 5px 10px;
                width: 45px;
            }
            .btn:first-child {
                margin: 5px 0 5px 10px;
            }
            .btn, #display, form {
                border-radius: 25px;
            }
            #display {
                outline: none;
                background-color: #98d1dc;
                box-shadow: inset 6px 6px 0px #3facc0;
                color: #dededc;
                font-size: 20px;
                height: 47px;
                text-align: right;
                width: 115px;
                padding-right: 10px;
                margin-left: 5px;
            }
            .number {
                background-color: #72778b;
                box-shadow: 0 5px #5f6680;
                color: #dededc;
            }
            .number:active {
                box-shadow: 0 2px #5f6680;
            }
            .operator {
                background: #dededc;
                box-shadow: 0 5px #bebebe;
                color: #72778b;
            }
            .operator:active {
                box-shadow: 0 2px #bebebe;
            }
            .other {
                background-color: #e3844c;
                box-shadow: 0 5px #e76a3d;
                color: #dededc;
            }
            .other:active {
                box-shadow: 0 2px #e76a3d;
            }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;HTML, CSS, JavaScript 计算器&lt;/h1&gt;
        &lt;form&gt;
            &lt;input type=&quot;button&quot; id=&quot;clear&quot; class=&quot;btn other&quot; value=&quot;C&quot;&gt;
            &lt;input type=&quot;button&quot; id=&quot;delete&quot; class=&quot;btn other&quot; value=&quot;D&quot;&gt;
            &lt;input type=&quot;text&quot; id=&quot;display&quot;&gt;
            &lt;br&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;7&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;8&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;9&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn operator toget&quot; value=&quot;+&quot;&gt;
            &lt;br&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;4&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;5&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;6&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn operator toget&quot; value=&quot;*&quot;&gt;
            &lt;br&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;1&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;2&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;3&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn operator toget&quot; value=&quot;-&quot;&gt;
            &lt;br&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn number toget&quot; value=&quot;0&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn operator toget&quot; value=&quot;.&quot;&gt;
            &lt;input type=&quot;button&quot; class=&quot;btn operator toget&quot; value=&quot;/&quot;&gt;
            &lt;input type=&quot;button&quot; id=&quot;cal&quot; class=&quot;btn other&quot; value=&quot;=&quot;&gt;
        &lt;/form&gt;
        &lt;p id=&quot;time&quot; style=&quot;text-align:center&quot;&gt;&lt;/p&gt;
        &lt;script src=&quot;./js/./简易计算器.js&quot;&gt;&lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>样式图：</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A811.png" srcset="/img/loading.gif" alt></p>
<p>然后先是简单粗暴的 <code>js</code> 代码：</p>
<pre><code class="javascript">//display框显示更改。
function get(num){
    var shownums = document.getElementById(&quot;display&quot;);
    shownums.value+=num;
}
//清空显示函数
function clear(){
    var shownums = document.getElementById(&quot;display&quot;);
    shownums.value=&quot;&quot;;
}
//删除一个输入函数
function backspace(){
    var shownums = document.getElementById(&quot;display&quot;);
    shownums.value=shownums.value.substring(0,shownums.value.length-1);
}
//为所有 num 和 operator 的 button 添加点击监听事件
var Btns = document.getElementsByClassName(&quot;toget&quot;)
for(var i=0;i&lt;Btns.length;i++){
    Btns[i].onclick=function(){
        get(this.value);
    }
}</code></pre>
<p>首先是前面几个显示部分的函数，都很简单。不过我发现我老是忘记字符串是无法更改的，而且记不清数组和字符串各自的方法。</p>
<pre><code class="javascript">//找到清除按钮绑定点击监听事件
var clearBtn = document.getElementById(&quot;clear&quot;);
clearBtn.onclick=clear;
//删除一个输入的绑定监听
var deleteBtn = document.getElementById(&quot;delete&quot;);
deleteBtn.onclick=backspace;
//计算结果的点击绑定监听
var re = document.getElementById(&quot;cal&quot;);
function calculates(){
    var result=0;
    result = document.getElementById(&quot;display&quot;).value;
    document.getElementById(&quot;display&quot;).value=eval(result);
}
re.onclick=calculates;</code></pre>
<p>然后到了这里，写着写着懵了一下。本来以为要摩拳擦掌自己写计算的函数，怎么怎么取符号，结果直接一个 <code>eval</code> 函数砸了上来。 emmmmm， 我一定是沉浸在写 <code>C</code> 的时候，很多东西都是自己动手去写。现在写别的语言，有了很多内置的函数很方便，但是我总不记得。</p>
<pre><code class="javascript">//时间展示
function showTime(){
    var today = new Date();
    var y = today.getFullYear();
    var M = today.getMonth()+1;
    var d = today.getDate();
    var h = today.getHours();
    var m = today.getMinutes();
    var s = today.getSeconds();
    m=checkTime(m);
    s=checkTime(s);
    var week=today.getDay();
    var w = new Array(&quot;星期天&quot;,&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;);
    document.getElementById(&quot;time&quot;).innerHTML=y+&quot;年&quot;+M+&quot;月&quot;+d+&quot;日&quot;+&quot;&lt;/br&gt;&quot;+h+&quot;:&quot;+m+&quot;:&quot;+s+&quot; &quot;+w[week];
    setTimeout(&quot;showTime()&quot;,1000);
}
function checkTime(i){
    if(i&lt;10){
        i=&quot;0&quot;+i;
    }
    return i;
}
window.onload = function(){
    showTime();
}</code></pre>
<p>然后是一个时间展示，这不禁让我想起了上周遇到的坑。<br><code>input</code> 中 <code>type</code> 为 <code>date</code> 的那个元素 <code>value</code> 值的接收是有格式要求的，比如日的数字就要求是两位数。</p>
<p>我写了一个自动获取当天日期的函数，在我自己测试的时候，是在二十几号，都没有出现过问题。别人在四五号的时候一测，就遇到 <code>bug</code> 了。😂</p>
<h3 id="💡总结"><a href="#💡总结" class="headerlink" title="💡总结"></a>💡总结</h3><p>一个简单的计算器就差不多是这样了。写完一看好像也没有什么特别的东西……唯一记得的大概是这个计算器的样式很好看， <code>eval</code> 让我眼前一亮(?)</p>
<blockquote>
<p>顺便记一下，要去了解一下 <code>setTimeout</code> 和 <code>setInterval</code> 的异同。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
        <tag>js</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>CSStip</title>
    <url>/2019/10/27/css%E5%B0%8Ftip/</url>
    <content><![CDATA[<h1 id="一些关于CSS的tip"><a href="#一些关于CSS的tip" class="headerlink" title="一些关于CSS的tip"></a>一些关于CSS的tip</h1><ul>
<li><code>margin</code> 值的百分比是相对于父元素的 <code>width</code></li>
<li>三角形的制作利用 <code>width</code> <code>height</code> 为0 然后设置 <code>border</code></li>
<li>气泡的制作<br><img src="/2019/10/27/css%E5%B0%8Ftip/bubble.png" srcset="/img/loading.gif" alt="bubble"></li>
</ul>
<a id="more"></a>
<pre><code class="html">&lt;div class=&quot;bubble&quot;&gt;
    &lt;div class=&quot;triangle common&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;cover common&quot;&gt;&lt;/div&gt;     &lt;!-- 用来覆盖的倒三角 --&gt;
&lt;/div&gt;</code></pre>
<pre><code class="css">.bubble {
    width: 200px; 
    height: 50px; 
    border: 5px solid #FFB5BF; 
    position: relative;
}
.common {
    width: 0; 
    height: 0; 
    position: absolute;        /* 使用绝对定位 */
    left: 50%;
    transform: translate(-50%, 0);    /* 水平居中 */
}
.triangle {
    bottom: -20px;
    border-top: 20px solid #FFB5BF;
    border-right: 20px solid transparent;
    border-left: 20px solid transparent;
}
.cover {
    bottom: -13px;
    border-top: 20px solid #94E8FF;
    border-right: 20px solid transparent;
    border-left: 20px solid transparent;
}</code></pre>
<ul>
<li><code>loading</code> 效果制作利用 <code>CSS3</code> 的动画<pre><code class="html">&lt;div class=&quot;loading&quot;&gt;&lt;/div&gt;</code></pre>
<pre><code class="css">.loading {
  width: 50px;
  height: 50px;
  display: inline-block;
  border: 5px solid #ddd;
  border-left-color: #FFB5BF;
  border-radius: 50%; 
}</code></pre>
<pre><code class="css">.loading {
  animation: loading-animation 1.2s linear infinite;
}
@keyframes loading-animation {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}</code></pre>
</li>
<li>行级元素的高度取决于文体字体大小。</li>
<li>文字隐藏的方法:<ul>
<li><code>height: 0</code>+<code>pading</code>撑出背景图片，然后设置<code>overflow: hidden</code></li>
<li><code>text-indent: -10000</code></li>
<li>将文字包入<code>span</code>元素中，然后<code>display: none</code></li>
</ul>
</li>
<li><code>a</code> 标签的样式需要遵守 <code>link</code> <code>visited</code> <code>hover</code> <code>active</code> 顺序，并且在 <code>href</code> 不填入值的时候， <code>a:link</code> 不起作用。</li>
<li>浏览器将标签间的换行空白渲染为一个空格导致部分元素间出现间隙解决方法：<ul>
<li>编写页面时不换行。</li>
<li>容器的 <code>font-size</code> 设置为 <code>0</code>.</li>
<li>我们需要将li内的字符间隔设为默认。<pre><code class="css">.wrap ul{letter-spacing: -4px;}</code></pre>
之后记得设置li内字符间隔<pre><code class="css">.wrap ul li{letter-spacing: normal;}</code></pre>
</li>
</ul>
</li>
<li>div里嵌套了 <code>img</code> 底部会出现白边<ul>
<li>因为 <code>img</code> 默认是按基线 <code>(baseline)</code> 对齐的。</li>
<li>要去掉空格可以使用 <code>vertical-align: bottom</code> 或将 <code>img</code> 标签变为块级元素。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>字体颜色闪现问题</title>
    <url>/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="transition属性页面加载a元素字体颜色闪现问题"><a href="#transition属性页面加载a元素字体颜色闪现问题" class="headerlink" title="transition属性页面加载a元素字体颜色闪现问题"></a>transition属性页面加载a元素字体颜色闪现问题</h3><blockquote>
<p>在写需求的时候，对 <code>index.html</code> 页面的按钮做了 <code>transition</code> 效果来使样式展示更平滑。</p>
</blockquote>
<p>代码如下：</p>
<pre><code class="css">.main-area li a {
    display: block;
    width: 100%;
    line-height: 54px;
    transition: background-color .5s ease,
    color .5s ease;
}
.main-area li a:hover {
    background: #3399FF;
    color: #fff;
}</code></pre>
<p>然后发现想要的效果确实可以做到，<strong>但是</strong>每次打开页面的时候都可以看到a元素的字体颜色从 <em>各种奇怪的颜色</em> 闪现为设定的颜色。</p>
<p>研究了一会儿，看到 <code>transition</code> 的一个属性：</p>
<pre><code class="css">transition-property : none | all | [&lt;IDENT&gt;][&#39;,&#39;&lt;IDENT&gt;]* ;</code></pre>
<p><code>transition-property</code> 是用来指定当元素其中一个属性改变时执行 <code>transition</code> 效果，其中 <code>none</code> 没有属性改变；<code>all</code> 所有属性都改变，它也是默认值；<code>indent</code> 可以填写元素属性名。</p>
<blockquote>
<p>👆以上来自某教程网站</p>
</blockquote>
<p>然后打开 F12 看了一下 对应位置的 <code>a</code> 元素的所有 <code>color</code> 属性。</p>
<p><img src="/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/transition.png" srcset="/img/loading.gif" alt="transition"><br>就可以看到在重置样式表 <code>reset.css</code> 中的 <code>color</code> 设置为继承值。<br>取消这个样式，就可以看到 <code>a</code> 的 <code>color</code> 变为我们看到的闪现前的颜色。<br><img src="/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/transition1.png" srcset="/img/loading.gif" alt="transition1"><br><img src="/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/transition2.png" srcset="/img/loading.gif" alt="transition2"></p>
<p>按我的理解也就是，浏览器记住了这个覆盖过程，然后把它展示为动画效果，那我们应该要想办法把这个覆盖 <code>a</code> 默认颜色的过程提前到 <code>transition</code> 没有记住的时候。</p>
<p>我的做法是在 <code>head</code> 标签中写入 <code>style</code> 直接覆盖 <code>a</code> 的 <code>color</code> 属性。</p>
<p>其余解决方法待后续研究。<del>大概不会有后续</del></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS继承</title>
    <url>/2019/10/22/CSS%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h2 id="🤪碎碎念"><a href="#🤪碎碎念" class="headerlink" title="🤪碎碎念"></a>🤪碎碎念</h2><blockquote>
<p>一开始记录在 <code>Onenote</code> 中的笔记复制都是直接图片形式。所以我先复制到记事本再转到 <code>markdown</code>。🙃</p>
</blockquote>
<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><p>在阅读《CSS权威指南》过程中，在继承这一模块发现了选择器权重的一些内容。</p>
<p><strong>继承得到的值没有特殊性，权重弱于0特殊性(通配符)</strong></p>
<pre><code class="html">&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;test&lt;/title&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;style&gt;
            * {color:gray;}
            h1#page-title {color:black;}
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
            &lt;h1 id=&quot;page-title&quot;&gt;Meerkat &lt;em&gt;Central&lt;/em&gt;&lt;/h1&gt;
        &lt;p&gt;
            Welcome to the best place on the web for meerkat information!
        &lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/pic.png" srcset="/img/loading.gif" alt="演示"></p>
<h2 id="👇图片形式"><a href="#👇图片形式" class="headerlink" title="👇图片形式"></a>👇图片形式</h2><p><del>糊的妈都不认识</del></p>
<p><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/1.jpg" srcset="/img/loading.gif" alt><br><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/2.jpg" srcset="/img/loading.gif" alt><br><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/3.jpg" srcset="/img/loading.gif" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>for循环添加事件监听</title>
    <url>/2019/10/19/for%E5%BE%AA%E7%8E%AF%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<h1 id="for循环添加事件监听"><a href="#for循环添加事件监听" class="headerlink" title="for循环添加事件监听"></a>for循环添加事件监听</h1><blockquote>
<p>在写某个需求时，想要做点击按钮动态添加样式表示选中的效果，在写js代码的时候遇到了疑问点。</p>
</blockquote>
<p><img src="/2019/10/19/for%E5%BE%AA%E7%8E%AF%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/for%E5%BE%AA%E7%8E%AF.png" srcset="/img/loading.gif" alt="页面"></p>
<p>页面如上所示，头部的三个按钮在点击后永远只会对最后一个按钮进行样式添加或移除。</p>
<pre><code class="javascript">var chooseArea = document.getElementsByClassName(&quot;choose-area&quot;)[0];
for(var i=0;i&lt;chooseArea.children.length;i++){
    console.log(chooseArea.children);
    var child = chooseArea.children[i];
    child.onclick=(function(){
        console.log(child);
        if(child.className==&quot;&quot;)
            child.className=&quot;active&quot;;
    })
}</code></pre>
<p>此处先拿出主要的代码(此时的已经是不完整+乱改版本)，部分打印代码为调试时编写。<br>查了一下百度，大概了解到是 <code>onclick</code> 或是添加事件监听一类都不是即时运行。而内部会调用外部的变量，在 <code>click</code> 事件的函数运行时，i早已自增至最大值，所以永远指向最后一个元素。此处的解决方法是闭包。(我终于知道闭包的作用了…)</p>
<p>修改后的代码(依然有待改进，时间未定)：</p>
<pre><code class="javascript">var chooseArea = document.getElementsByClassName(&quot;choose-area&quot;)[0];
for(var i=0;i&lt;chooseArea.children.length;i++){
    console.log(chooseArea.children);
    var child = chooseArea.children[i];
    (function run(child,i){
            child.onclick = function () {
                if (child.className == &quot;&quot;)
                    child.className = &quot;active&quot;;
                else {
                    child.className=&quot;&quot;;
                }
                for(var j=0;j&lt;chooseArea.children.length;j++){
                    if(i==j){
                        continue;
                    }
                    else{
                        chooseArea.children[j].className=&quot;&quot;;
                    }
                }
            };
        })(child,i);
</code></pre>
<p>闭包都解决不了的我可真是个菜鸡…(lll￢ω￢)</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise中的setTimeOut参数问题</title>
    <url>/2019/10/18/Promise%E4%B8%AD%E7%9A%84setTimeOut%E5%8F%82%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="Promise中的setTimeOut参数问题"><a href="#Promise中的setTimeOut参数问题" class="headerlink" title="Promise中的setTimeOut参数问题"></a>Promise中的setTimeOut参数问题</h3><blockquote>
<p>在看 <a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544" target="_blank" rel="noopener">廖雪峰的 <code>javascript</code> 教程的 Promise </a> 一节看到一个疑问点。</p>
</blockquote>
<p>关于Promise的异步执行，其中一个示例代码中看到了setTimeOut的第三个参数。</p>
<p>代码如下:</p>
<pre><code class="javascript">&#39;use strict&#39;;

var logging = document.getElementById(&#39;test-promise2-log&#39;);
while (logging.children.length &gt; 1) {
    logging.removeChild(logging.children[logging.children.length - 1]);
}

function log(s) {
    var p = document.createElement(&#39;p&#39;);
    p.innerHTML = s;
    logging.appendChild(p);
}
// 0.5秒后返回input*input的计算结果:
function multiply(input) {
    return new Promise(function (resolve, reject) {
        log(&#39;calculating &#39; + input + &#39; x &#39; + input + &#39;...&#39;);
        setTimeout(resolve, 500, input * input);
    });
}

// 0.5秒后返回input+input的计算结果:
function add(input) {
    return new Promise(function (resolve, reject) {
        log(&#39;calculating &#39; + input + &#39; + &#39; + input + &#39;...&#39;);
        setTimeout(resolve, 500, input + input);
    });
}

var p = new Promise(function (resolve, reject) {
    log(&#39;start new Promise...&#39;);
    resolve(123);
});

p.then(multiply)
 .then(add)
 .then(multiply)
 .then(add)
 .then(function (result) {
    log(&#39;Got value: &#39; + result);
});</code></pre>
<p>在讲 <code>input*input</code> 和 <code>input+input</code> 作为第三个参数传入为第一个参数函数的参数时，输出结果可以做到延时。</p>
<p>但如果我将代码修改为直接作为第一个 <code>resove</code> 的参数传入，就无法做到延时的效果。</p>
<p>代码如下：</p>
<pre><code class="javascript">&#39;use strict&#39;;

var logging = document.getElementById(&#39;test-promise2-log&#39;);
while (logging.children.length &gt; 1) {
    logging.removeChild(logging.children[logging.children.length - 1]);
}

function log(s) {
    var p = document.createElement(&#39;p&#39;);
    p.innerHTML = s;
    logging.appendChild(p);
}
// 0.5秒后返回input*input的计算结果:
function multiply(input) {
    return new Promise(function (resolve, reject) {
        log(&#39;calculating &#39; + input + &#39; x &#39; + input + &#39;...&#39;);
        setTimeout(resolve(input*input), 500);
    });
}

// 0.5秒后返回input+input的计算结果:
function add(input) {
    return new Promise(function (resolve, reject) {
        log(&#39;calculating &#39; + input + &#39; + &#39; + input + &#39;...&#39;);
        setTimeout(resolve(input+input), 500);
    });
}

var p = new Promise(function (resolve, reject) {
    log(&#39;start new Promise...&#39;);
    resolve(123);
});

p.then(multiply)
 .then(add)
 .then(multiply)
 .then(add)
 .then(function (result) {
    log(&#39;Got value: &#39; + result);
});</code></pre>
<p>应该是因为异步一类的原因，待整理。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS伪类选择器</title>
    <url>/2019/06/05/CSS%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="选择第一个子元素"><a href="#选择第一个子元素" class="headerlink" title="选择第一个子元素"></a>选择第一个子元素</h3><p>在阅读《CSS权威指南》的过程中，读到关于伪类选择器时的“选择第一个子元素”部分，发现对于伪类 :first-child 存在误解。</p>
<pre><code class="html">&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;test&lt;/title&gt;
        &lt;meta charset=&quot;utf-8&quot;&gt;
        &lt;style&gt;
            p:first-child { font-weight: bold; }
            li:first-child { text-transform: uppercase; }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
            &lt;div&gt;
            &lt;p&gt;These are the necessary step:&lt;/p&gt;
            &lt;ul&gt;
                &lt;li&gt;Insert key&lt;/li&gt;
                &lt;li&gt;Turn key &lt;strong&gt;clockwise&lt;/strong&gt;&lt;/li&gt;
                &lt;li&gt;Push accelerator&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt; Do &lt;em&gt;not&lt;/em&gt; push the brake at the same time as the accelerator.
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>之前是将 p:first-child 理解为第一个p元素，阅读后发现其真实含义为某元素第一个子元素的所有p元素。</p>
<p><img src="/2019/06/05/CSS%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/pic1.png" srcset="/img/loading.gif" alt="演示"></p>
<p><strong>伪类的实质为符合:后的要求的元素。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>font-face远程问题</title>
    <url>/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><p>在阅读 <code>Head First HTML与CSS</code> 第2版过程中，在增加字体和颜色样式部分学习到为页面增加Web字体。<br>其中运用了 <code>@font-face</code> 功能，照示例所写是失败的。</p>
<pre><code class="css">@font-face {
        font-family: &quot;Emblema One&quot;;
        src: url(&quot;https://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woff&quot;) format(&#39;woff&#39;), 
             url(&quot;https://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf&quot;) format(&#39;truetype&#39;);
}
//url后的format是后来加的，测试后并无效果。
h1 {
  font-family:     &quot;Emblema One&quot;, sans-serif;
  font-size:       220%;
}</code></pre>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic1.png" srcset="/img/loading.gif" alt="演示"></p>
<p>如图所示，会显示请求字体失败。<br>但是如果字体是存储在本地的，则成功。</p>
<pre><code class="css">@font-face {
        font-family: &quot;Emblema One&quot;;
        src: url(&quot;EmblemaOne-Regular.woff&quot;), 
             url(&quot;EmblemaOne-Regular.ttf&quot;);
}
h1 {
  font-family:     &quot;Emblema One&quot;, sans-serif;
  font-size:       220%;
}</code></pre>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic2.png" srcset="/img/loading.gif" alt="演示"></p>
<p>除此之外，有实验利用在线字体库“有字库”也可以成功</p>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic3.png" srcset="/img/loading.gif" alt="演示"></p>
<p>照它的要求进行设置可以成功</p>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic4.png" srcset="/img/loading.gif" alt="演示"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>邱奇编码的javascript实现</title>
    <url>/2019/05/29/%E9%82%B1%E5%A5%87%E7%BC%96%E7%A0%81%E7%9A%84javascript%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="加减乘"><a href="#加减乘" class="headerlink" title="加减乘"></a>加减乘</h3><p>在<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023021250770016" target="_blank" rel="noopener">廖雪峰老师的网站</a>看到了闭包内容，其中的脑洞大开部分就是关于邱奇编码的加法。</p>
<h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><pre><code class="javascript">&#39;use strict&#39;;

// 定义数字0:
var zero = function (f) {
    return function (x) {
        return x;
    }
};

// 定义数字1:
var one = function (f) {
    return function (x) {
        return f(x);
    }
};

// 定义加法:
function add(n, m) {
    return function (f) {
        return function (x) {
            return m(f)(n(f)(x));
        }
    }
}
// 计算数字2 = 1 + 1:
var two = add(one, one);

// 计算数字3 = 1 + 2:
var three = add(one, two);

// 计算数字5 = 2 + 3:
var five = add(two, three);

// 你说它是3就是3，你说它是5就是5，你怎么证明？

// 呵呵，看这里:

// 给3传一个函数,会打印3次:
(three(function () {
    console.log(&#39;print 3 times&#39;);
}))();

// 给5传一个函数,会打印5次:
(five(function () {
    console.log(&#39;print 5 times&#39;);
}))();

// 继续接着玩一会...</code></pre>
<p>加法其实比较好理解，关于减法部分在网上搜索了很久。找到的代码比较难理解。</p>
<h4 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h4><pre><code class="javascript">var ZERO = function (f){
    return function (z){
        return z;
    }
};

var ADD1 = function (n){
    return function (f){
        return function (z){
            return f(n(f)(z));
        }
    }
};

var pred = function(n){
    return function(action){
        return function(x){
            var fx = function(g){
                return function(h){
                    return h(g(action));
                };
            };
            return n(fx)(function(u){
                return x;
            })(function(u){
                return u;
            });
        };
    };
};
var TWO = pred(THREE)=function(action){
    return function(x){
        return THREE(function(g){
            return function(h){
                return h(g(action));
            };
        };)(function(u){
            return x;
        })(function(u){
            return u;
        });
    };
};
TWO(action)(x)=function(x){
    return THREE(function(g){
        return function(h){
            return h(g(action));
        };
    };)(function(u){
        return x;
    })(function(u){
        return u;
    });
}(x)=THREE(function(g){
    return function(h){
        return h(g(action));
    };
})(function(u){
    return x;
})(function(u){
    return u;
})
var SUB1 = function (n){
    return function (f){
        return function(z){
            return ((n (function(g){
                return (function(h){
                    return h(g(f));
                })
            })){
                return (function(u){
                    return z;
                }))(function (u){
                    return u;
                })
            }
        }
    }
};
var ONE = ADD1(ZERO);
var TWO = ADD1(ONE);
var THREE = ADD1(TWO);
(TWO(function(){
    console.log(&#39;1&#39;);
}))();
(THREE(function(){
    alert(&#39;2&#39;);
}))();
THREE = function(f){
    return function(x){
        return f(f(ONE(f)(x)));
    };
};
THREE(f) = function(x){
    return f(f(ONE(f)(x)));
};
TWO = pred(THREE) = function(action){
    return function(x){
        return THREE(function(g){
            return function(h){
                return h(g(action));
            };
        })(function(u){
            return x;
        })(function(u){
            return u;
        });
    };
}
TWO(action) = function(x){
    return THREE(function(g){
        return function(h){
            return h(g(action));
        };
    })(function(u){
        return x;
    })(function(u){
        return u;
    });
}
TWO(action)(x) = THREE(function(g){
    return function(h){
        return h(g(action));
    };
})(function(u){
    return x;
})(function(u){
    return u;
})
/*function(g){
    return function(h){
        return h(g(action));
    };
}=f
f(x)=function(g){
    return function(h){
        return h(g(action));
    };
}(x)=function(h){
    return h(x(action));
}
function(h){
    return h(x(action));
}(x)=x(x(action))
f(f(ONE(f)(x)))(g)
f(f(f(x)))(g)
f(f(x))(g)
*/
TWO(action)(x) = function(x){
    return f(f(ONE(f)(x)));
}(function(u){
    return x;
})(function(u){
    return u;
})
= f(f(ONE(f)(function(u){
    return x;
})))(function(u){
    return u;
})
= f(f(f(function(u){
    return x;
})))(function (u){
    return u;
})
=f(f(function(h){
    return h(function(u){
        return x;
    }(action));
}))(function (u){
    return u;
})
=f(function(h){
    return h(function(h){
        return h(function(u){
            return x;
        }(action));
    }(action));
})(function (u){
    return u;
})
= function(h){
    return h(function(h){
        return h(function(h){
            return h(function(u){
                return x;
            }(action));
        }(action));
    }(action));
}(function (u){
    return u;
})
= function(u){
    return u;
}(function(h){
        return h(function(h){
            return h(function(u){
                return x;
            }(action));
        }(action));
    }(action))
= function(h){
        return h(function(h){
            return h(function(u){
                return x;
            }(action));
        }(action));
    }(action)
= action(function(h){
            return h(function(u){
                return x;
            }(action));
        }(action))
= action(action(function(u){
                return x;
            }(action)))
= action(action(x));
TWO = function(f){
    return function(x){
        return f(ONE(f)(x));
    }
}
ONE(f)(x)=f(ZERO(f)(x))=f(x);
ONE = function(f){
    return function(x){
        return f(ZERO(f)(x));
    }
}</code></pre>
<p>其实到最后算出结果我也没绕出弯来🙃</p>
<h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><pre><code class="javascript">function multi(n, m) {    
    return function (f) {
        return function (x) {
            return m(n(f))(x);
        }
    }
}
//test six
var  six = multi(three,two);
(multi(function () {
    console.log(&#39;print 6 times&#39;);
}))();
</code></pre>
<p>大佬们果然都很喜欢挑战自己(lll￢ω￢)</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
