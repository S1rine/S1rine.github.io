<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>学习笔记 2020 10 13</title>
    <url>/2020/10/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2020-10-13/</url>
    <content><![CDATA[<h1 id="学习笔记-2020-10-13"><a href="#学习笔记-2020-10-13" class="headerlink" title="学习笔记 2020-10-13"></a>学习笔记 2020-10-13</h1><a id="more"></a>

<h2 id="JavaScript-高级程序设计-第4版-阅读记录"><a href="#JavaScript-高级程序设计-第4版-阅读记录" class="headerlink" title="JavaScript 高级程序设计(第4版) 阅读记录"></a>JavaScript 高级程序设计(第4版) 阅读记录</h2><h3 id="集合引用类型"><a href="#集合引用类型" class="headerlink" title="集合引用类型"></a>集合引用类型</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>set</code> 方法返回映射实例，因此可以链式调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>().set(<span class="string">"key1"</span>, <span class="string">"val1"</span>);</span><br><span class="line">m.set(<span class="string">"key2"</span>, <span class="string">"val2"</span>)</span><br><span class="line"> .set(<span class="string">"key3"</span>, <span class="string">"val3"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p><code>Map</code> 可以使用任何数据类型作为键，使用严格相等来匹配。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> functionKey = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> symbolKey = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> objectKey = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">m.set(functionKey, <span class="string">"functionValue"</span>);</span><br><span class="line">m.set(symbolKey, <span class="string">"symbolValue"</span>);</span><br><span class="line">m.set(objectKey, <span class="string">"objectValue"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(m.get(functionKey)); <span class="comment">// functionValue</span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(symbolKey)); <span class="comment">// symbolValue </span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(objectKey)); <span class="comment">// objectValue </span></span><br><span class="line"><span class="comment">// SameValueZero 比较意味着独立实例不冲突</span></span><br><span class="line"><span class="built_in">console</span>.log(m.get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p><code>Map</code> 保持插入顺序不变。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(m.entries === m[<span class="built_in">Symbol</span>.iterator]); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> m.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [key1,val1]</span></span><br><span class="line"><span class="comment">// [key2,val2]</span></span><br><span class="line"><span class="comment">// [key3,val3]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> m[<span class="built_in">Symbol</span>.iterator]()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pair);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [key1,val1]</span></span><br><span class="line"><span class="comment">// [key2,val2]</span></span><br><span class="line"><span class="comment">// [key3,val3]</span></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>]</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log([...m]); <span class="comment">// [[key1,val1],[key2,val2],[key3,val3]]</span></span><br></pre></td></tr></table></figure>

<p><code>Map</code> 的 <code>keys()</code> <code>values()</code> 方法分别返回插入顺序生成的键和值的迭代器。</p>
<h4 id="选择-Object-还是-Map"><a href="#选择-Object-还是-Map" class="headerlink" title="选择 Object 还是 Map"></a>选择 Object 还是 Map</h4><p>在内存占用方面，两种类型都会随键的数量线性增加。但给定固定大小的内存， <code>Map</code> 可以多存储 <code>50%</code> 的键值对。</p>
<p>在插入性能方面，消耗相当。但插入 <code>Map</code> 会稍快。</p>
<p>在查找速度方面，性能差异极小，涉及大量查找时，<code>Object</code> 会更好。</p>
<p>在删除性能方面，<code>Map</code> 表现更好。</p>
<h4 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h4><p><code>ES6</code> 新增的集合类型，弱映射。其 <code>Api</code> 是 <code>Map</code> 的子集。</p>
<p>弱映射的键只能是 <code>Object</code> 或是继承自 <code>Object</code> 的类型。值的类型没有限制。</p>
<p>可以将原始值包装成对象用作键。</p>
<p><code>WeakMap</code> 的键不属于正式引用，不会阻止垃圾回收。当键没有其余指向它的引用时，在代码执行完成后，就会被垃圾回收，键值对就会从弱映射中消失。</p>
<p><code>WeakMap</code> 没有迭代方法，没有一次性销毁所有键值的方法。</p>
<p>弱映射的用处：</p>
<ul>
<li><p>私有变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.idProperty = <span class="built_in">Symbol</span>(<span class="string">'id'</span>);</span><br><span class="line">    <span class="keyword">this</span>.setId(id);</span><br><span class="line">  &#125;</span><br><span class="line">  setPrivate(property, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> privateMembers = wm.get(<span class="keyword">this</span>) || &#123;&#125;;</span><br><span class="line">    privateMembers[property] = value;</span><br><span class="line">    wm.set(<span class="keyword">this</span>, privateMembers);</span><br><span class="line">  &#125;</span><br><span class="line">  getPrivate(property) &#123;</span><br><span class="line">    <span class="keyword">return</span> wm.get(<span class="keyword">this</span>)[property];</span><br><span class="line">  &#125;</span><br><span class="line">  setId(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setPrivate(<span class="keyword">this</span>.idProperty, id);</span><br><span class="line">  &#125;</span><br><span class="line">  getId() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getPrivate(<span class="keyword">this</span>.idProperty);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.getId()); <span class="comment">// 123</span></span><br><span class="line">user.setId(<span class="number">456</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.getId()); <span class="comment">// 456</span></span><br><span class="line"><span class="comment">// 并不是真正私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(wm.get(user)[user.idProperty]); <span class="comment">// 456</span></span><br></pre></td></tr></table></figure>

<p>为了防止外部获取到弱映射而破坏了私有性。我们可以使用闭包：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> User = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.idProperty = <span class="built_in">Symbol</span>(<span class="string">'id'</span>);</span><br><span class="line">      <span class="keyword">this</span>.setId(id);</span><br><span class="line">    &#125;</span><br><span class="line">    setPrivate(property, value) &#123;</span><br><span class="line">      <span class="keyword">const</span> privateMembers = wm.get(<span class="keyword">this</span>) || &#123;&#125;;</span><br><span class="line">      privateMembers[property] = value;</span><br><span class="line">      wm.set(<span class="keyword">this</span>, privateMembers);</span><br><span class="line">    &#125;</span><br><span class="line">    getPrivate(property) &#123;</span><br><span class="line">      <span class="keyword">return</span> wm.get(<span class="keyword">this</span>)[property];</span><br><span class="line">    &#125;</span><br><span class="line">    setId(id) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setPrivate(<span class="keyword">this</span>.idProperty, id);</span><br><span class="line">    &#125;</span><br><span class="line">    getId(id) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.getPrivate(<span class="keyword">this</span>.idProperty);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> User;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.getId()); <span class="comment">// 123</span></span><br><span class="line">user.setId(<span class="number">456</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user.getId()); <span class="comment">// 456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DOM</code> 节点元数据</p>
<p>如果使用常规的 <code>Map</code> 来保存 <code>DOM</code> 节点，当 <code>DOM</code> 节点在 <code>DOM</code> 树中被销毁，我们依然保存着它的引用，<code>DOM</code> 节点依然保存在内存中。若是采用弱映射，就不会发生这种状况。</p>
</li>
</ul>
<h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p><code>ES6</code> 新增的集合类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"val1"</span>, <span class="string">"val2"</span>, <span class="string">"val3"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(s1.size); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">"val1"</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">"val2"</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">"val3"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(s2.size); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>基本 <code>API</code> :</p>
<ul>
<li><p><code>add()</code></p>
</li>
<li><p><code>has()</code></p>
</li>
<li><p><code>size</code></p>
</li>
<li><p><code>delete</code></p>
<p>返回集合中是否存在要删除的值。</p>
</li>
<li><p><code>clear()</code></p>
</li>
</ul>
<p><code>add</code> 方法同样返回集合实例，可以链式调用。使用严格相等来进行匹配。</p>
<h2 id="现代-JavaScript-教程"><a href="#现代-JavaScript-教程" class="headerlink" title="现代 JavaScript 教程"></a>现代 JavaScript 教程</h2><h3 id="函数表达式与函数声明的区别"><a href="#函数表达式与函数声明的区别" class="headerlink" title="函数表达式与函数声明的区别"></a>函数表达式与函数声明的区别</h3><ol>
<li>函数声明是一段代码块，函数表达式是一个赋值语句。</li>
<li>函数表达式仅在代码执行到达时才会创建该函数，且从此刻开始可用。函数声明会在脚本开始运行时被创建，在声明语句之前也可以调用该函数。</li>
</ol>
<h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO-LIST"></a>TODO-LIST</h2><ul>
<li><input disabled type="checkbox"> 想尝试一下 <code>hugo</code> 作为博客。</li>
<li><input checked disabled type="checkbox"> 整理 18 年的笔记。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue源码 数据劫持</title>
    <url>/2020/10/12/Vue%E6%BA%90%E7%A0%81-%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<p>双向数据绑定是 <code>Vue</code> 的一大亮点和重点，这里讲解一下原理并且重写一遍。版本为 <code>2.x</code> 。</p>
<a id="more"></a>

<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>Vue 2.x</code> 中的双向数据绑定原理来源于一个对象方法， <code>Object.defineProperty</code> ， 通过这个方法我们可以定义对象属性的 <code>getter</code> 和 <code>setter</code> ，于是我们可以在数据被重新设置(即调用 <code>setter</code> 时)进行视图更新等操作。</p>
<h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>使用 <code>Vue</code> 时我们会引入 <code>vue</code> 的默认导出，这个默认导出是一个构造函数，我们利用这个构造函数创建一个 <code>vue</code> 实例，并传入我们的配置参数，例如管理的 <code>dom</code> 元素以及 <code>data</code> 等参数，虽然在一般开发中我们不会在根实例上挂载数据，但此处仅做一个简单还原。</p>
<p>传入参数后，我们在构造函数内调用初始化函数，初始化操作一般为挂载配置项，初始化各种数据，例如 <code>data</code> , <code>computed</code> <code>props</code> 等。</p>
<p>我们首先需要对<code>data</code> 做一层代理，因为在配置项中传入的 <code>data</code> 一般为函数，以防止组件复用时因为引用相同而数据混乱。并且在 <code>vue</code> 实例中无法直接访问到数据，我们把 <code>data</code> 挂载到实例上，并使用 <code>Object.defineProperty</code> 使得我们可以使用 <code>this</code> 直接访问到各项 <code>data</code> 。</p>
<p>做完代理，我们需要对数据进行响应式处理，即观察数据项的修改。首先是 <code>data</code> 本身，我们抽出一个 <code>observe</code> 函数来进行观察操作，首先判断传入的观察对象的类型，如果不是引用类型其实没有观察的必要，因为普通类型的修改已经在父级做了观察，我们需要深层观察的是子对象、子数组、子对象子数组内部的引用类型等。</p>
<p>如果是引用类型，我们初始化一个观察者来进行观察。在观察者内部，我们迭代传入的引用类型，对每个 <code>key</code> 和 <code>value</code> 做一个响应式处理，当访问当前对象的 <code>key</code> 属性时，我们返回 <code>value</code> 。此处可以做一些操作，例如收集依赖。当设置当前对象的时候，我们去修改 <code>value</code> 的值。需要注意的是，此处不能够直接去获取或者修改 <code>obj[key]</code> ( <code>obj</code> 指代做响应式处理的对象或数组)，因为我们正是对 <code>obj[key]</code> 做了观察，当我们观察到需要获取 <code>key</code> 属性时，<code>getter</code> 内部又是获取 <code>key</code> 属性，会造成死循环。<code>setter</code> 同理。</p>
<p>数组无法直接做响应式处理，我们选择遍历数组，对每个元素单独观察。但此处又有一个问题，因为 <code>Object.defineProperty</code> 无法响应数组的变化，当我们修改了数组，例如增加了新的元素，新增的元素没有被观察，数组的修改也没有被观察到。那么我们就需要重新定义数组的修改方法，就是 <code>push</code> <code>pop</code> <code>sort</code> <code>splice</code> <code>shift</code> <code>unshift</code> <code>reverse</code> ，我们使用数组原型创建一个新的数组对象，重写这个数组对象上的七个方法，在方法内部还是依然执行原本的函数内容，但此处我们就可以增加一些自己的操作，例如视图刷新等。定义完这个数组对象后，我们将它赋值给需要被响应式处理的数组的原型，那么就单独影响了我们响应式的数组，而不对其余的普通数组产生影响。</p>
<p>在这个过程中还有一些小点，就是每次对对象的值或是数组的元素观察时，我们需要注意这个元素是否也是一个引用类型，如果是的话，我们需要再对这个元素进行观察。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>首先配置一个 <code>webpack</code> 环境，下载 <code>webpack</code> <code>webpack-cli</code> <code>webpack-dev-server</code> 以及 <code>html-webpack-plugin</code> 。在项目根目录配置 <code>webpack.config.js</code> 。我们需要配置项目的入口，出口，插件，以及模块引入的规则。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span>, <span class="comment">// 定义入口</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'index.js'</span>, <span class="comment">// 定义出口的文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>) <span class="comment">// 定义出口路径</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: path.resolve(__dirname, <span class="string">'public/index.html'</span>) <span class="comment">// 定义文件模板位置</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 配置模块引入的规则，首先从 src 目录寻找，再去 node_modules 中寻找。</span></span><br><span class="line">    modules: [path.resolve(__dirname, <span class="string">'src'</span>), path.resolve(__dirname, <span class="string">'node_modules'</span>)]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>再来看入口文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="comment">// 实例化 Vue</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">"Sirine' working time"</span>,</span><br><span class="line">      time: <span class="string">'2020-10-11'</span>,</span><br><span class="line">      info: &#123;</span><br><span class="line">        name: <span class="string">'zhao'</span>,</span><br><span class="line">        age: <span class="number">21</span>,</span><br><span class="line">        isGood: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      say: [</span><br><span class="line">        <span class="number">123</span>,</span><br><span class="line">        <span class="string">'456'</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          a: <span class="number">123</span>,</span><br><span class="line">          b: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">          c: &#123;</span><br><span class="line">            today: <span class="string">'is'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>此处只是简单创建了实例。</p>
<p>然后看 <code>vue</code> 文件夹。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/index.js</span></span><br><span class="line"><span class="keyword">import</span> initState <span class="keyword">from</span> <span class="string">'./init'</span>; <span class="comment">// 引入初始化数据的函数。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// vue 的构造函数，初始化实例。</span></span><br><span class="line">  <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 在原型上挂载初始化函数，将传入的参数挂载到实例上。</span></span><br><span class="line">  <span class="keyword">var</span> vm = <span class="keyword">this</span>;</span><br><span class="line">  vm.$options = options;</span><br><span class="line">  initState(vm); <span class="comment">// 调用初始化数据的函数。</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue;</span><br></pre></td></tr></table></figure>

<p>接下来看 <code>initState</code> 这个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/init.js</span></span><br><span class="line"><span class="keyword">import</span> observe <span class="keyword">from</span> <span class="string">'./observe'</span>;</span><br><span class="line"><span class="keyword">import</span> proxyData <span class="keyword">from</span> <span class="string">'./proxy'</span>;</span><br><span class="line"><span class="comment">// 引入观察函数和代理数据函数。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = vm.$options;</span><br><span class="line">  <span class="comment">// 首先取出 options</span></span><br><span class="line">  <span class="keyword">if</span> (options.data) &#123;</span><br><span class="line">    <span class="comment">// 判断参数中是否有 data ，有才执行初始化。</span></span><br><span class="line">    initData(vm);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _data = vm.$options.data; <span class="comment">// 取出数据</span></span><br><span class="line">  _data = vm._data = <span class="keyword">typeof</span> _data === <span class="string">'function'</span> ? _data.call(vm) : _data || &#123;&#125;;</span><br><span class="line">  <span class="comment">// 将数据挂载到实例上，并且判断是否是函数，是的话调用它，否的话保持原样，并确保至少是一个对象。</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> _data) &#123;</span><br><span class="line">    <span class="comment">// 遍历 data 做一层代理。</span></span><br><span class="line">    proxyData(vm, <span class="string">'_data'</span>, key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 观察这个 data</span></span><br><span class="line">  observe(_data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> initState;</span><br></pre></td></tr></table></figure>

<p>首先看 <code>proxyData</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/proxy.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxyData</span>(<span class="params">data, target, key</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 传入的参数分别是做代理的对象，挂载的属性名，和当前的属性名</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="comment">// 当我们获取 data[key] 时，实际上是从 data[target][key] 中获取。</span></span><br><span class="line">      <span class="keyword">return</span> data[target][key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">      <span class="comment">// 当我们设置 data[key] 时，实际上设置在了 data[target][key]。</span></span><br><span class="line">      data[target][key] = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> proxyData;</span><br></pre></td></tr></table></figure>

<p>此处做一个解释，我们在 <code>initData</code> 中将 <code>options</code> 中的 <code>data</code> 挂载到了 <code>vm._data</code> 上，而我们想要直接调用 <code>vm.xxx</code> 来获取，但是 <code>vm</code> 上并没有这个属性，它实际上是在 <code>vm._data.xxx</code> 上，所以我们做一层代理，当访问 <code>vm.xxx</code> 时，我们返回 <code>vm._data.xxx</code> ，当设置 <code>vm.xxx = yyy</code> 时，实际上是执行了 <code>vm._data.xxx = yyy</code> 。</p>
<p>然后再看 <code>observe</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/observe.js</span></span><br><span class="line"><span class="keyword">import</span> Observer <span class="keyword">from</span> <span class="string">'./observer'</span>; <span class="comment">// 引入实际的观察者</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">'object'</span> || data === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 首先判断数据类型，如果不是引用类型，不需要再深入观察了。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Observer(data); <span class="comment">// 否则，返回一个观察者实例。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observe;</span><br></pre></td></tr></table></figure>

<p>当我们想要深入观察时，都会调用 <code>observe</code> 函数，所以我们需要判断类型，原始类型已经在父级中被观察了，不需要继续深入。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/observer.js</span></span><br><span class="line"><span class="keyword">import</span> defineReactiveData <span class="keyword">from</span> <span class="string">'./reactive'</span>;</span><br><span class="line"><span class="keyword">import</span> observeArr <span class="keyword">from</span> <span class="string">'./observeArr'</span>;</span><br><span class="line"><span class="keyword">import</span> arrMethods <span class="keyword">from</span> <span class="string">'./array'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">    <span class="comment">// 判断数据是否为数组，是数组的话，给它赋予变异数组方法，再观察这个数组。</span></span><br><span class="line">    data.__proto__ = arrMethods;</span><br><span class="line">    observeArr(data); <span class="comment">// 观察数组的方法。</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是对象的话。</span></span><br><span class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(data); <span class="comment">// 遍历对象的键值</span></span><br><span class="line">    keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> value = data[key]; <span class="comment">// 获取每个值</span></span><br><span class="line">      defineReactiveData(data, key, value);</span><br><span class="line">      <span class="comment">// 将对象，键名，键值传入响应式函数进行响应式绑定。</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Observer;</span><br></pre></td></tr></table></figure>

<p>此处引入的函数较多，一个个看。</p>
<p>先看对象部分，逻辑已经非常清晰，对这个对象的每个键值进行 <code>getter</code> <code>setter</code> 重写，我们需要先取出每个值形成闭包用来访问，否则会出现死循环问题。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/reactive.js</span></span><br><span class="line"><span class="keyword">import</span> observe <span class="keyword">from</span> <span class="string">'./observe'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactiveData</span>(<span class="params">data, key, value</span>) </span>&#123;</span><br><span class="line">  observe(value); <span class="comment">// 继续观察这个传入的值，可能需要深入观察。</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(data, key, &#123;</span><br><span class="line">    <span class="keyword">get</span>() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'响应式 get'</span>, value);</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>(newVal) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'响应式 set'</span>, value, newVal);</span><br><span class="line">      <span class="keyword">if</span> (value === newVal) <span class="keyword">return</span>;</span><br><span class="line">      value = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineReactiveData;</span><br></pre></td></tr></table></figure>

<p>依然是熟悉的自定义 <code>setter</code> 和 <code>getter</code> ，函数内部可以写入许多其余逻辑来进行其他操作。</p>
<p>此处调用 <code>observe(value)</code> 是因为，<code>data[key]</code> 的值可能是数组和对象，它们的值是一个引用地址，不是覆盖的情况下无法监听到变化， 我们需要再次观察它，使用 <code>observe</code> 来判断，如果是引用类型会深入观察，不是的话就直接返回。</p>
<p>谈完了对象，再来看数组。</p>
<p><code>Object.defineProperty</code> 无法监听到数组的变化，所以我们需要遍历数组，进行单独的监听。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/observeArr.js</span></span><br><span class="line"><span class="keyword">import</span> observe <span class="keyword">from</span> <span class="string">'./observe'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observeArr</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    observe(item);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> observeArr;</span><br></pre></td></tr></table></figure>

<p>而数组对于自身变化的方法我们需要进行重写，否则数组的修改没有办法监听。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/vue/array.js</span></span><br><span class="line"><span class="keyword">import</span> ARRAY_METHODS <span class="keyword">from</span> <span class="string">'./config'</span>;</span><br><span class="line"><span class="keyword">import</span> observe <span class="keyword">from</span> <span class="string">'./observe'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arrayPrototype = <span class="built_in">Array</span>.prototype; <span class="comment">// 取出数组的原型对象</span></span><br><span class="line"><span class="keyword">var</span> arrMethods = <span class="built_in">Object</span>.create(arrayPrototype); <span class="comment">// 根据这个原型对象创建一个数组</span></span><br><span class="line"></span><br><span class="line">ARRAY_METHODS.forEach(<span class="function"><span class="params">m</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 遍历七个数组方法，对我们创建的这个数组上写入我们自定义的方法。</span></span><br><span class="line">  arrMethods[m] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = arrayPrototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// 转换传入的参数为数组。</span></span><br><span class="line">    <span class="keyword">var</span> result = arrayPrototype[m].apply(<span class="keyword">this</span>, args); <span class="comment">// 调用原本的方法。</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'动态修改数组'</span>, m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newItem; <span class="comment">// 此处用于监听新增的数据。</span></span><br><span class="line">    <span class="keyword">switch</span> (m) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'push'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'unshift'</span>:</span><br><span class="line">        newItem = args;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 如果是 push unshift 方法，只需要监听我们传入的参数即可。</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'splice'</span>:</span><br><span class="line">        newItem = args.slice(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="comment">// 如果是 splice 方法，我们监听可能存在的第三个参数以及更多。</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    newItem &amp;&amp; observe(newItem); <span class="comment">// 如果存在新的数据，我们进行监听。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result; <span class="comment">// 将原本数组的返回指返回。</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> arrMethods;</span><br></pre></td></tr></table></figure>

<p>到此差不多完成了简单的数据劫持，当我们动态修改这些数据的时候，会被监听到并且进行一些需要的操作。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记 2020 10 12</title>
    <url>/2020/10/12/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2020-10-12/</url>
    <content><![CDATA[<h1 id="学习笔记-2020-10-12"><a href="#学习笔记-2020-10-12" class="headerlink" title="学习笔记 2020-10-12"></a>学习笔记 2020-10-12</h1><a id="more"></a>

<h2 id="JavaScript-高级程序设计-第4版-阅读记录"><a href="#JavaScript-高级程序设计-第4版-阅读记录" class="headerlink" title="JavaScript 高级程序设计(第4版) 阅读记录"></a>JavaScript 高级程序设计(第4版) 阅读记录</h2><h3 id="集合引用类型"><a href="#集合引用类型" class="headerlink" title="集合引用类型"></a>集合引用类型</h3><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><ol>
<li><p>归并方法</p>
<ul>
<li><p><code>reduce</code></p>
</li>
<li><p><code>reduceRight</code></p>
<p>两个方法都会迭代数组的所有项，构建一个最终返回值。区别是 <code>reduce</code> 从头遍历到尾， <code>reduceRight</code> 从尾遍历到头。</p>
<p>两个方法都接收两个参数，一个归并函数和归并起点的初始值。归并函数接收四个参数，上一个归并值，当前项，当前项的索引和数组本身。函数的返回值会作为下一次遍历的归并值即第一个参数。如果没有传入第二个参数，那么第一次迭代默认从数组第二项开始。</p>
</li>
</ul>
</li>
</ol>
<h4 id="定型数组"><a href="#定型数组" class="headerlink" title="定型数组"></a>定型数组</h4><p>人们期望开发一套 <code>JavaScript API</code> 来利用 <code>3D</code> 图形 <code>API</code> 和 <code>GPU</code> 加速，以便渲染运行复杂的 <code>3D</code> 应用程序。基于 <code>OpenGL ES 2.0</code> 规范开发了一个 <code>API</code> 名为 <code>WebGL</code> 。早期版本中，它与原生数组之间格式不匹配，出现了性能问题。在此基础上， <code>Mozilla</code> 实现了 <code>CanvasFloatArray</code> ，最终变成 <code>Float32Array</code> 。</p>
<ol>
<li><p><code>ArrayBuffer</code></p>
<p><code>ArrayBuffer</code> 是所有定型数组及视图引用的基本单位，是一个普通的 <code>JavaScript</code> 构造函数，可用于在内存中分配特定数量的字节空间。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="built_in">console</span>.log(buf.byteLength); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure>

<p><code>ArrayBuffeer</code> 创建后无法改变大小，但可以利用 <code>slice</code> 方法复制部分成为一个新的实例。</p>
<p>查看 <code>ArrayBuffer</code> 的原型对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">ArrayBuffer</span>.prototype);</span><br><span class="line">&#123;</span><br><span class="line">  byteLength: (...)</span><br><span class="line">  <span class="keyword">constructor</span>: ƒ ArrayBuffer()</span><br><span class="line">  slice: ƒ slice()</span><br><span class="line">  Symbol(Symbol.toStringTag): "ArrayBuffer"</span><br><span class="line">  <span class="keyword">get</span> byteLength: ƒ byteLength()</span><br><span class="line">  __proto__: Object</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，<code>ArrayBuffer</code> 其实和数组没有特别大的关系，只是原型对象上挂载了 <code>slice</code> 方法以及 <code>byteLength</code> 属性，它的原型指向了 <code>Object.prototype</code> 。</p>
<ul>
<li><code>ArrayBuffer</code> 分配失败时会抛出错误。</li>
<li>分配的内存不能超过 <code>Number.MAX_SAFE_INTEGER</code> 即 (2^53 - 1) 字节。</li>
<li>声明 <code>ArrayBuffer</code> 会将所有二进制位初始化为 <code>0</code> 。</li>
<li>分配的堆内存可以被垃圾回收，不需要手动释放。</li>
</ul>
</li>
<li><p><code>DataView</code></p>
<p>允许读写 <code>ArrayBuffer</code> 的视图。专为文件 <code>I/O</code> 和网络 <code>I/O</code> 设计，支持对缓冲数据的高度控制，但性能较差，对缓冲内容没有任何预设，也不能迭代。</p>
<p>查看 <code>DataView</code> 的构造函数定义：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DataView</span>(buffer: <span class="built_in">ArrayBuffer</span>, byteOffset?: number, byteLength?: number): <span class="built_in">DataView</span></span><br></pre></td></tr></table></figure>

<p>可以看出，第一个参数是必填的 <code>ArrayBuffer</code> ，第二个参数为偏移量，第三个参数为字节长度。若不指定，偏移量默认从 <code>0</code> 开始，字节长度默认为剩余缓冲。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf);</span><br><span class="line"><span class="built_in">console</span>.log(fullDataView.byteOffset); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(fullDataView.byteLength); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(fullDataView.buffer === buf); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(firstHalfDataView.byteOffset); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(firstHalfDataView.byteLength); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(firstHalfDataView.buffer === buf); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secondHalfDataView = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">console</span>.log(secondHalfDataView.byteOffset); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(secondHalfDataView.byteLength); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(secondHalfDataView.buffer === buf); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>ElementType</code></p>
<p>用于实现 <code>JavaScript</code> 中的 <code>Number</code> 类型到缓冲内二进制格式的转换。有以下几种类型：</p>
<ul>
<li><code>Int8</code></li>
<li><code>Uint8</code></li>
<li><code>Int16</code></li>
<li><code>Uint16</code></li>
<li><code>Int32</code></li>
<li><code>Uint32</code></li>
<li><code>Float32</code></li>
<li><code>Float64</code></li>
</ul>
<p>每种类型都有 <code>get</code> 和 <code>set</code> 方法，使用 <code>byteOffset</code> 定位位置进行读写。类型间可以相互转换。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">2</span>); <span class="comment">// 分配了两个字节</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf); <span class="comment">// 定义一个视图</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt16(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="built_in">console</span>.log(view.getInt16(<span class="number">0</span>)); <span class="comment">// -256</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0xff</span>);</span><br><span class="line"><span class="built_in">console</span>.log(view.getInt16(<span class="number">0</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getInt8(<span class="number">1</span>)); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字节序</p>
<p>字节序指计算系统维护的一种字节顺序的约定。</p>
<p><code>DataView</code> 支持两种约定，大端字节序和小端字节序。</p>
<p>大端字节序指最高有效位保存在第一个字节，最低有效位保存在最后一个字节，也称网络字节序。</p>
<p>小端字节序则相反。</p>
<p><code>DataView</code> 不遵守 <code>JavaScript</code> 运行时所在系统的原生字节序。它默认为大端字节序，也可以接收参数修改为小端字节序。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 填充缓冲，让第一位和最后一位都是 1</span></span><br><span class="line">view.setUint8(<span class="number">0</span>, <span class="number">0x80</span>); <span class="comment">// 设置最左边的位等于 1</span></span><br><span class="line">view.setUint8(<span class="number">1</span>, <span class="number">0x01</span>); <span class="comment">// 设置最右边的位等于 1</span></span><br><span class="line"><span class="comment">// 缓冲内容（为方便阅读，人为加了空格）</span></span><br><span class="line"><span class="comment">// 0x8 0x0 0x0 0x1</span></span><br><span class="line"><span class="comment">// 1000 0000 0000 0001</span></span><br><span class="line"><span class="comment">// 按大端字节序读取 Uint16</span></span><br><span class="line"><span class="comment">// 0x80 是高字节，0x01 是低字节</span></span><br><span class="line"><span class="comment">// 0x8001 = 2^15 + 2^0 = 32768 + 1 = 32769</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint16(<span class="number">0</span>)); <span class="comment">// 32769</span></span><br><span class="line"><span class="comment">// 按小端字节序读取 Uint16</span></span><br><span class="line"><span class="comment">// 0x01 是高字节，0x80 是低字节</span></span><br><span class="line"><span class="comment">// 0x0180 = 2^8 + 2^7 = 256 + 128 = 384</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint16(<span class="number">0</span>, <span class="literal">true</span>)); <span class="comment">// 384</span></span><br><span class="line"><span class="comment">// 按大端字节序写入 Uint16</span></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0004</span>);</span><br><span class="line"><span class="comment">// 缓冲内容（为方便阅读，人为加了空格）</span></span><br><span class="line"><span class="comment">// 0x0 0x0 0x0 0x4</span></span><br><span class="line"><span class="comment">// 0000 0000 0000 0100</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">0</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">1</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 按小端字节序写入 Uint16</span></span><br><span class="line">view.setUint16(<span class="number">0</span>, <span class="number">0x0002</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 缓冲内容（为方便阅读，人为加了空格）</span></span><br><span class="line"><span class="comment">// 0x0 0x2 0x0 0x0</span></span><br><span class="line"><span class="comment">// 0000 0010 0000 0000</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">0</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(view.getUint8(<span class="number">1</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>边界情形</p>
<p><code>DataView</code> 的操作需要在缓冲区范围内，否则会抛出 <code>RangeError</code> 。</p>
<p>写缓冲的时候会将写入值转为适当类型，若是无法转换则会抛出错误。</p>
</li>
</ul>
</li>
<li><p>定型数组</p>
<p>定型数组是另一种形式的 <code>ArrayBuffer</code> 视图。它特定于一种 <code>ElementType</code> 且遵循系统原生的字节序。目的在于提高与 <code>WebGL</code> 等原生库交换二进制数据的效率。</p>
<p>创建定型数组的方式包括读取已有的缓冲、使用自有缓冲、填充可迭代结构，以及填充基于任意类型的定型数组。另外，通过 <code>&lt;ElementType&gt;.from()</code> 和 <code>&lt;ElementType&gt;.of()</code> 也可以创建定型数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 12 字节的缓冲</span></span><br><span class="line"><span class="keyword">const</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">12</span>);</span><br><span class="line"><span class="comment">// 创建一个引用该缓冲的 Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(buf);</span><br><span class="line"><span class="comment">// 这个定型数组知道自己的每个元素需要 4 字节</span></span><br><span class="line"><span class="comment">// 因此长度为 3</span></span><br><span class="line"><span class="built_in">console</span>.log(ints.length); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个长度为 6 的 Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints2 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>(<span class="number">6</span>);</span><br><span class="line"><span class="comment">// 每个数值使用 4 字节，因此 ArrayBuffer 是 24 字节</span></span><br><span class="line"><span class="built_in">console</span>.log(ints2.length); <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 类似 DataView，定型数组也有一个指向关联缓冲的引用</span></span><br><span class="line"><span class="built_in">console</span>.log(ints2.buffer.byteLength); <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个包含[2, 4, 6, 8]的 Int32Array</span></span><br><span class="line"><span class="keyword">const</span> ints3 = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ints3.length); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(ints3.buffer.byteLength); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">console</span>.log(ints3[<span class="number">2</span>]); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过复制 ints3 的值创建一个 Int16Array</span></span><br><span class="line"><span class="keyword">const</span> ints4 = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(ints3);</span><br><span class="line"><span class="comment">// 这个新类型数组会分配自己的缓冲</span></span><br><span class="line"><span class="comment">// 对应索引的每个值会相应地转换为新格式</span></span><br><span class="line"><span class="built_in">console</span>.log(ints4.length); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(ints4.buffer.byteLength); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(ints4[<span class="number">2</span>]); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于普通数组来创建一个 Int16Array</span></span><br><span class="line"><span class="keyword">const</span> ints5 = <span class="built_in">Int16Array</span>.from([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ints5.length); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(ints5.buffer.byteLength); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(ints5[<span class="number">2</span>]); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于传入的参数创建一个 Float32Array</span></span><br><span class="line"><span class="keyword">const</span> floats = <span class="built_in">Float32Array</span>.of(<span class="number">3.14</span>, <span class="number">2.718</span>, <span class="number">1.618</span>);</span><br><span class="line"><span class="built_in">console</span>.log(floats.length); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(floats.buffer.byteLength); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(floats[<span class="number">2</span>]); <span class="comment">// 1.6180000305175781</span></span><br></pre></td></tr></table></figure>

<p>查看定型数组的构造函数原型对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Int16Array</span>.prototype);</span><br><span class="line"><span class="comment">// BYTES_PER_ELEMENT: 2 返回该类型数组中每个元素的大小</span></span><br><span class="line"><span class="comment">// buffer: (...)</span></span><br><span class="line"><span class="comment">// byteLength: (...)</span></span><br><span class="line"><span class="comment">// byteOffset: (...)</span></span><br><span class="line"><span class="comment">// constructor: ƒ Int16Array()</span></span><br><span class="line"><span class="comment">// length: (...)</span></span><br><span class="line"><span class="comment">// Symbol(Symbol.toStringTag): (...)</span></span><br><span class="line"><span class="comment">// __proto__: Object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Int32Array</span>.prototype);</span><br><span class="line"><span class="comment">// BYTES_PER_ELEMENT: 4</span></span><br><span class="line"><span class="comment">// buffer: (...)</span></span><br><span class="line"><span class="comment">// byteLength: (...)</span></span><br><span class="line"><span class="comment">// byteOffset: (...)</span></span><br><span class="line"><span class="comment">// constructor: ƒ Int32Array()</span></span><br><span class="line"><span class="comment">// length: (...)</span></span><br><span class="line"><span class="comment">// Symbol(Symbol.toStringTag): (...)</span></span><br><span class="line"><span class="comment">// __proto__: Object</span></span><br></pre></td></tr></table></figure>

<p>如果在初始化时没有提供值，那么关联的缓冲会以 <code>0</code> 填充。</p>
<ul>
<li><p>定型数组行为</p>
<p>定型数组的原型对象上绑定了非常多的数组方法，继承自一个叫 <code>TypedArray</code> 的类型。</p>
<p>定型数组缺少修改大小的几个数组方法：</p>
<ul>
<li><code>concat</code></li>
<li><code>pop</code></li>
<li><code>push</code></li>
<li><code>shift</code></li>
<li><code>splice</code></li>
<li><code>unshift</code></li>
</ul>
<p>但提供了两个新方法，可以用于复制数据：</p>
<ul>
<li><code>set</code></li>
<li><code>subarray</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="keyword">new</span> <span class="built_in">Int16Array</span>(<span class="number">8</span>);</span><br><span class="line">container.set(<span class="built_in">Int8Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(container); <span class="comment">// Int16Array(8) [1, 2, 3, 4, 0, 0, 0, 0]</span></span><br><span class="line">container.set([<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>], <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(container); <span class="comment">// Int16Array(8) [1, 2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure>

<p>看一下 <code>set</code> 的函数定义：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(array: ArrayLike&lt;<span class="built_in">number</span>&gt;, offset?: <span class="built_in">number</span>): <span class="built_in">void</span></span><br></pre></td></tr></table></figure>

<p>偏移量溢出时会抛出错误。</p>
<p><code>subarray</code> 会从原定型数组中复制出一个新定型数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = <span class="built_in">Int16Array</span>.of(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullCopy = source.subarray();</span><br><span class="line"><span class="built_in">console</span>.log(fullCopy); <span class="comment">// Int16Array(4) [2, 4, 6, 7]</span></span><br><span class="line"><span class="keyword">const</span> halfCopy = source.subarray(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(halfCopy); <span class="comment">// Int16Array(2) [6, 7]</span></span><br><span class="line"><span class="keyword">const</span> partialCopy = source.subarray(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(partialCopy); <span class="comment">// Int16Array(2) [4, 6]</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<pre><code>看一下 `subarray` 的函数定义

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">subarray(begin?: <span class="built_in">number</span>, end?: <span class="built_in">number</span>): <span class="built_in">Int16Array</span></span><br></pre></td></tr></table></figure>

手写定型数组拼接函数:

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typedArrayConcat</span>(<span class="params">typedArrayConstructor, ...typedArrays</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numElements = typedArrays.reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> (x.length || x) + y.length);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> resultArray = <span class="keyword">new</span> typedArrayConstructor(numElements);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> currentOffset = <span class="number">0</span>;</span><br><span class="line">  typedArrays.map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    resultArray.set(x, currentOffset);</span><br><span class="line">    currentOffset += x.length;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> resultArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> concatArray = typedArrayConcat(</span><br><span class="line">  <span class="built_in">Int32Array</span>,</span><br><span class="line">  <span class="built_in">Int8Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">  <span class="built_in">Int16Array</span>.of(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">  <span class="built_in">Float32Array</span>.of(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(concatArray); <span class="comment">// Int32Array(9) [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure></code></pre><ul>
<li><p>下溢和上溢</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 长度为 2 的有符号整数数组</span></span><br><span class="line"><span class="comment">// 每个索引保存一个二补数形式的有符号整数</span></span><br><span class="line"><span class="comment">// 范围是-128（-1 * 2^7）~127（2^7 - 1）</span></span><br><span class="line"><span class="keyword">const</span> ints = <span class="keyword">new</span> <span class="built_in">Int8Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 长度为 2 的无符号整数数组</span></span><br><span class="line"><span class="comment">// 每个索引保存一个无符号整数</span></span><br><span class="line"><span class="comment">// 范围是 0~255（2^7 - 1）</span></span><br><span class="line"><span class="keyword">const</span> unsignedInts = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 上溢的位不会影响相邻索引</span></span><br><span class="line"><span class="comment">// 索引只取最低有效位上的 8 位</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">256</span>; <span class="comment">// 0x100</span></span><br><span class="line"><span class="built_in">console</span>.log(unsignedInts); <span class="comment">// [0, 0]</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">511</span>; <span class="comment">// 0x1FF</span></span><br><span class="line"><span class="built_in">console</span>.log(unsignedInts); <span class="comment">// [0, 255]</span></span><br><span class="line"><span class="comment">// 下溢的位会被转换为其无符号的等价值</span></span><br><span class="line"><span class="comment">// 0xFF 是以二补数形式表示的-1（截取到 8 位）,</span></span><br><span class="line"><span class="comment">// 但 255 是一个无符号整数</span></span><br><span class="line">unsignedInts[<span class="number">1</span>] = <span class="number">-1</span>; <span class="comment">// 0xFF (truncated to 8 bits)</span></span><br><span class="line"><span class="built_in">console</span>.log(unsignedInts); <span class="comment">// [0, 255]</span></span><br><span class="line"><span class="comment">// 上溢自动变成二补数形式</span></span><br><span class="line"><span class="comment">// 0x80 是无符号整数的 128，是二补数形式的-128</span></span><br><span class="line">ints[<span class="number">1</span>] = <span class="number">128</span>; <span class="comment">// 0x80</span></span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [0, -128]</span></span><br><span class="line"><span class="comment">// 下溢自动变成二补数形式</span></span><br><span class="line"><span class="comment">// 0xFF 是无符号整数的 255，是二补数形式的-1</span></span><br><span class="line">ints[<span class="number">1</span>] = <span class="number">255</span>; <span class="comment">// 0xFF</span></span><br><span class="line"><span class="built_in">console</span>.log(ints); <span class="comment">// [0, -1]</span></span><br></pre></td></tr></table></figure>

<p>还存在一种数组类型 <code>Unit8ClampedArray</code> ， 不允许任何方向溢出。超出的值会被向下舍入为 <code>255</code> ， 小于的值会被向上舍入为 <code>0</code> 。</p>
</li>
</ul>
<h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p><code>ES6</code> 中新增的集合类型，真正意义上的键值存储机制。</p>
<ol>
<li><p>基本 <code>API</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br></pre></td></tr></table></figure>

<p>初始化时可以传入一个可迭代对象，需要包含键值对数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m1 = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">'key1'</span>, <span class="string">'val1'</span>],</span><br><span class="line">  [<span class="string">'key2'</span>, <span class="string">'val2'</span>],</span><br><span class="line">  [<span class="string">'key3'</span>, <span class="string">'val3'</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(m1.size); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(m1); <span class="comment">// Map(3) &#123;"key1" =&gt; "val1", "key2" =&gt; "val2", "key3" =&gt; "val3"&#125;</span></span><br><span class="line"><span class="comment">// 使用自定义迭代器初始化映射</span></span><br><span class="line"><span class="keyword">const</span> m2 = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">"key1"</span>, <span class="string">"val1"</span>];</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">"key2"</span>, <span class="string">"val2"</span>];</span><br><span class="line">    <span class="keyword">yield</span> [<span class="string">"key3"</span>, <span class="string">"val3"</span>];</span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br><span class="line">alert(m2.size); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 映射期待的键/值对，无论是否提供</span></span><br><span class="line"><span class="keyword">const</span> m3 = <span class="keyword">new</span> <span class="built_in">Map</span>([[]]);</span><br><span class="line">alert(m3.has(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line">alert(m3.get(<span class="literal">undefined</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>set()</code></p>
<p>初始化后添加键值对的方法。</p>
</li>
<li><p><code>get()</code></p>
<p>获取值。</p>
</li>
<li><p><code>has()</code></p>
<p>查询是否存在值。</p>
</li>
<li><p><code>size</code></p>
<p>获取映射中的键值对数量。</p>
</li>
<li><p><code>delete</code></p>
<p>删除某个键值对。</p>
</li>
<li><p><code>clear</code></p>
<p>清空该映射的所有键值对。</p>
</li>
</ul>
</li>
</ol>
<h2 id="现代-JavaScript-教程"><a href="#现代-JavaScript-教程" class="headerlink" title="现代 JavaScript 教程"></a>现代 JavaScript 教程</h2><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ol>
<li><p>是否需要 else ?</p>
<p>如果参数 <code>age</code> 大于 <code>18</code>，那么下面的函数将返回 <code>true</code>。</p>
<p>否则它将会要求进行确认，并返回确认结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> confirm(<span class="string">'Did parents allow you?'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 <code>else</code> 被删除，函数的工作方式会不同吗？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> confirm(<span class="string">'Did parents allow you?'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工作方式相同，因为 <code>return</code> 执行后函数就已经结束。此处的 <code>else</code> 并没有意义。</p>
</li>
<li><p>使用 ? 或 || 重写函数</p>
<p>如果参数 <code>age</code> 大于 <code>18</code>，那么下面的函数返回 <code>true</code>。</p>
<p>否则它将会要求进行确认，并返回确认结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> confirm(<span class="string">'Do you have your parents permission to access this page?'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重写这个函数并保证效果相同，不使用 <code>if</code>，且只需一行代码。</p>
<p>编写 <code>checkAge</code> 的两个变体：</p>
<ol>
<li>使用问号运算符 <code>?</code></li>
<li>使用或运算符 <code>||</code></li>
</ol>
<ul>
<li><pre><code class="js"><span class="function"><span class="keyword">function</span> <span class="title">checkAge</span>(<span class="params">age</span>) </span>{
  <span class="keyword">return</span> age &gt; <span class="number">18</span> ? <span class="literal">true</span> : confirm(<span class="string">'Do you have your parents permission to access this page?'</span>);
}
&lt;!--￼<span class="number">19</span>--&gt;</code></pre>
</li>
</ul>
</li>
<li><p>函数 min(a, b)</p>
<p>写一个返回数字 <code>a</code> 和 <code>b</code> 中较小的那个数字的函数 <code>min(a,b)</code>。</p>
<p>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">min(<span class="number">2</span>, <span class="number">5</span>) == <span class="number">2</span></span><br><span class="line">min(<span class="number">3</span>, <span class="number">-1</span>) == <span class="number">-1</span></span><br><span class="line">min(<span class="number">1</span>, <span class="number">1</span>) == <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a &gt; b ? b : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数 pow(x, n)</p>
<p>写一个函数 <code>pow(x,n)</code>，返回 <code>x</code> 的 <code>n</code> 次方。换句话说，将 <code>x</code> 与自身相乘 <code>n</code> 次，返回最终结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pow(<span class="number">3</span>, <span class="number">2</span>) = <span class="number">3</span> * <span class="number">3</span> = <span class="number">9</span></span><br><span class="line">pow(<span class="number">3</span>, <span class="number">3</span>) = <span class="number">3</span> * <span class="number">3</span> * <span class="number">3</span> = <span class="number">27</span></span><br><span class="line">pow(<span class="number">1</span>, <span class="number">100</span>) = <span class="number">1</span> * <span class="number">1</span> * ...*<span class="number">1</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pow</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x * pow(x, n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO-LIST"></a>TODO-LIST</h2><ul>
<li><input disabled type="checkbox"> 想尝试一下 <code>hugo</code> 作为博客。</li>
<li><input checked disabled type="checkbox"> 整理 18 年的笔记。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记 2020 10 11</title>
    <url>/2020/10/11/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2020-10-11/</url>
    <content><![CDATA[<h1 id="学习笔记-2020-10-11"><a href="#学习笔记-2020-10-11" class="headerlink" title="学习笔记 2020-10-11"></a>学习笔记 2020-10-11</h1><a id="more"></a>

<h2 id="JavaScript-高级程序设计-第4版-阅读记录"><a href="#JavaScript-高级程序设计-第4版-阅读记录" class="headerlink" title="JavaScript 高级程序设计(第4版) 阅读记录"></a>JavaScript 高级程序设计(第4版) 阅读记录</h2><h3 id="集合引用类型"><a href="#集合引用类型" class="headerlink" title="集合引用类型"></a>集合引用类型</h3><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><ol>
<li><h5 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colors.toString()); <span class="comment">// red,blue,green</span></span><br><span class="line"><span class="built_in">console</span>.log(colors.valueOf()); <span class="comment">// ["red", "blue", "green"]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red", "blue", "green"]</span></span><br></pre></td></tr></table></figure>

<p><code>toString</code> 方法本质是返回数组中每个值的等效字符串加逗号分隔拼接成的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = &#123;</span><br><span class="line">  toLocaleString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Sirine'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Sirine'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person2 = &#123;</span><br><span class="line">  toLocaleString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Severus'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'siruis'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> people = [person1, person2];</span><br><span class="line"><span class="built_in">console</span>.log(people); <span class="comment">// [&#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"><span class="built_in">console</span>.log(people.toString()); <span class="comment">// Sirine,siruis</span></span><br><span class="line"><span class="built_in">console</span>.log(people.toLocaleString()); <span class="comment">// Sirine,Severus</span></span><br></pre></td></tr></table></figure>

<p>由上例可以看出，<code>toString</code> 方法调用自身的 <code>toString</code> 来转换，<code>toLocaleString</code> 调用自身的 <code>toLocaleString</code> 。</p>
</li>
<li><h5 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h5><p>后进先出的数据结构，数据的推入和删除只发生在栈顶。</p>
<ul>
<li><p><code>push</code></p>
<p>接收任意数量的参数，将它们添加到数组末尾，返回数组的最新长度。</p>
</li>
<li><p><code>pop</code></p>
<p>用于删除数组的最后一项，减少数组的长度，返回被删除的项。</p>
</li>
</ul>
</li>
<li><h5 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h5><p>先进先出的数据结构，末尾添加数据，开头获取数据。</p>
<ul>
<li><p><code>shift</code></p>
<p>返回被删除的项。</p>
</li>
<li><p><code>push</code></p>
</li>
<li><p><code>unshift</code></p>
<p>与 <code>shift</code> 相反，在数组开头添加任意数量的值，返回新的数组长度。</p>
</li>
</ul>
</li>
<li><h5 id="排序方法"><a href="#排序方法" class="headerlink" title="排序方法"></a>排序方法</h5><p>以下两个方法都返回调用的数组的引用。</p>
<ul>
<li><p><code>reverse</code></p>
<p>反向排列数组。</p>
</li>
<li><p><code>sort</code></p>
<p>排序数组。默认按照升序，每一项调用 <code>String</code> 转换，比较字符串决定顺序。也可以接受一个比较函数，函数的返回值决定每两个数比较的排序情况，返回负值代表第一个数排在第二个前面，返回 <code>0</code> 代表相等，返回正值代表第一个数排在第二个后面。</p>
</li>
</ul>
</li>
<li><h5 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h5><ul>
<li><p><code>concat</code></p>
<p>在原有数组基础上创建一个新数组，将参数添加到数组末尾。不改变原数组。返回新数组。</p>
<p><code>concat</code> 默认会打平数组参数，即传入的数组参数会被展开。设置数组的 <code>Symbol.isConcatSpreadable</code> 可以修改这个行为。如下例所示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">let</span> newColors = [<span class="string">"black"</span>, <span class="string">"brown"</span>];</span><br><span class="line"><span class="keyword">let</span> moreNewColors = &#123;</span><br><span class="line"> [<span class="built_in">Symbol</span>.isConcatSpreadable]: <span class="literal">true</span>,</span><br><span class="line"> length: <span class="number">2</span>,</span><br><span class="line"> <span class="number">0</span>: <span class="string">"pink"</span>,</span><br><span class="line"> <span class="number">1</span>: <span class="string">"cyan"</span></span><br><span class="line">&#125;;</span><br><span class="line">newColors[<span class="built_in">Symbol</span>.isConcatSpreadable] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 强制不打平数组</span></span><br><span class="line"><span class="keyword">let</span> colors2 = colors.concat(<span class="string">"yellow"</span>, newColors);</span><br><span class="line"><span class="comment">// 强制打平类数组对象</span></span><br><span class="line"><span class="keyword">let</span> colors3 = colors.concat(moreNewColors);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["red", "green", "blue"]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors2); <span class="comment">// ["red", "green", "blue", "yellow",["black", "brown"]]</span></span><br><span class="line"><span class="built_in">console</span>.log(colors3); <span class="comment">// ["red", "green", "blue", "pink", "cyan"]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>slice</code></p>
<p>接收一到二个参数，返回元素的开始索引和结束索引，若只提供了开始索引，会默认返回到数组末尾。返回的数组不包括结束索引(若存在)对应的元素。不影响原数组。这个函数的参数接受负值，代表从末尾开始。若结束位置小于开始位置，返回空数组。</p>
</li>
<li><p><code>splice</code></p>
<p>有三种不同的使用方式，返回值为被删除的元素或是空数组。</p>
<ul>
<li><p>删除</p>
<p>传递两个参数，删除的第一个元素位置以及删除的数量。</p>
</li>
<li><p>插入</p>
<p>传递三个参数，开始位置，<code>0</code> 和插入的元素，不仅限于三个参数，多于三个的参数都会被看作用于插入的元素。</p>
</li>
<li><p>替换</p>
<p>在删除的同时插入新元素，即插入的另一种模式，不再是删除 <code>0</code> 个元素。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">let</span> removed = colors.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["green", "blue"]</span></span><br><span class="line"><span class="built_in">console</span>.log(removed); <span class="comment">// ["red"]</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'yellow'</span>, <span class="string">'orange'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["green", "yellow", "orange", "blue"]</span></span><br><span class="line"><span class="built_in">console</span>.log(removed); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line">removed = colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'red'</span>, <span class="string">'purple'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(colors); <span class="comment">// ["green", "red", "purple", "orange", "blue"]</span></span><br><span class="line"><span class="built_in">console</span>.log(removed); <span class="comment">// ["yellow"]</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="搜索和位置方法"><a href="#搜索和位置方法" class="headerlink" title="搜索和位置方法"></a>搜索和位置方法</h5><ul>
<li><code>indexOf</code></li>
<li><code>lastIndexOf</code></li>
<li><code>includes</code></li>
</ul>
<p>上述三个方法都接收两个参数，要查找的元素和一个可选的起始位置。并且三个方法都是严格相等比较。</p>
<p><code>indexOf</code> 和 <code>includes</code> 从数组前头开始搜索， <code>lastIndexOf</code> 从末尾开始搜索。<br><code>indexOf</code> 和 <code>lastIndeOf</code> 返回查找的位置或是 <code>-1</code> ， <code>includes</code> 返回 <code>true</code> 或 <code>false</code> 表示是否找到至少一个匹配的元素。</p>
<ul>
<li><p><code>find</code></p>
</li>
<li><p><code>findIndex</code></p>
<p>上述两个方法接收断言函数和一个可选的断言函数内部 <code>this</code> 的值，断言函数接收三个参数，元素、索引和数组本身。断言函数返回真值，代表是否匹配。</p>
<p><code>find</code> 返回第一个匹配的元素，<code>findIndex</code> 返回第一个匹配元素的索引。找到匹配项后，都不再继续搜索。</p>
</li>
</ul>
</li>
<li><h5 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h5><p>以下方法都对数组每一项运行传入的函数。不改变原数组。</p>
<ul>
<li><p><code>every</code></p>
<p>若每一项使得函数返回值都为 <code>true</code> , 那么这个方法返回 <code>true</code> 。</p>
</li>
<li><p><code>filter</code></p>
<p>函数返回值为 <code>true</code> 的项组成一个数组返回。</p>
</li>
<li><p><code>forEach</code></p>
<p>没有返回值，仅对每一项运行函数。</p>
</li>
<li><p><code>map</code></p>
<p>返回每一项函数调用的结果构成的函数。</p>
</li>
<li><p><code>some</code></p>
<p>有一项使得函数返回值为 <code>true</code> , 方法返回 <code>true</code> 。</p>
</li>
</ul>
</li>
</ol>
<h2 id="现代-JavaScript-教程"><a href="#现代-JavaScript-教程" class="headerlink" title="现代 JavaScript 教程"></a>现代 JavaScript 教程</h2><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><ol>
<li><p><code>switch</code> 语句可以替代 <code>if</code> 判断，执行严格相等比较。</p>
</li>
<li><p><code>switch</code> 和 <code>case</code> 允许任意表达式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (+a) &#123;</span><br><span class="line">  <span class="keyword">case</span> b + <span class="number">1</span>:</span><br><span class="line">    alert(<span class="string">"this runs, because +a is 1, exactly equals b+1"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    alert(<span class="string">"this doesn't run"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>case</code> 分组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    alert(<span class="string">'Right!'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// (*) 下面这两个 case 被分在一组</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    alert(<span class="string">'Wrong!'</span>);</span><br><span class="line">    alert(<span class="string">"Why don't you take a math class?"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    alert(<span class="string">'The result is strange. Really.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="任务："><a href="#任务：" class="headerlink" title="任务："></a>任务：</h3><ol>
<li><p>将 <code>switch</code> 结构重写为 <code>if</code> 结构</p>
<p>将下面 <code>switch</code> 结构的代码写成 <code>if..else</code> 结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (browser) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'Edge'</span>:</span><br><span class="line">    alert( <span class="string">"You've got the Edge!"</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="string">'Chrome'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'Firefox'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'Safari'</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'Opera'</span>:</span><br><span class="line">    alert( <span class="string">'Okay we support these browsers too'</span> );</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    alert( <span class="string">'We hope that this page looks ok!'</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (browser === <span class="string">'Edge'</span>) &#123;</span><br><span class="line">  alert(<span class="string">"You've got the Edge!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (browser === <span class="string">'Chrome'</span></span><br><span class="line">  || browser === <span class="string">'Firefox'</span></span><br><span class="line">  || browser === <span class="string">'Safari'</span></span><br><span class="line">  || browser === <span class="string">'Opera'</span>) &#123;</span><br><span class="line">  alert( <span class="string">'Okay we support these browsers too'</span> );</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  alert( <span class="string">'We hope that this page looks ok!'</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将 <code>if</code> 结构重写为 <code>switch</code> 结构</p>
<p>用 <code>switch</code> 重写以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = +prompt(<span class="string">'a?'</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line">  alert( <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line">  alert( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">2</span> || a == <span class="number">3</span>) &#123;</span><br><span class="line">  alert( <span class="string">'2,3'</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = +prompt(<span class="string">'a?'</span>, <span class="string">''</span>);</span><br><span class="line"><span class="keyword">switch</span>(a) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    alert(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    alert(<span class="string">'2,3'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="JavaScript-深入学习"><a href="#JavaScript-深入学习" class="headerlink" title="JavaScript 深入学习"></a>JavaScript 深入学习</h2><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><ol>
<li><h5 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError"></a>SyntaxError</h5><p>语法错误，例如变量名不规范不合法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="number">1</span> = <span class="number">1</span>; <span class="comment">// Uncaught SyntaxError: Unexpected number</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> = <span class="number">2</span>; <span class="comment">// Uncaught SyntaxError: Invalid left-hand side in assignment</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="ReferenceError"><a href="#ReferenceError" class="headerlink" title="ReferenceError"></a>ReferenceError</h5><p>变量或函数未声明。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a(); <span class="comment">// Uncaught ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="RangeError"><a href="#RangeError" class="headerlink" title="RangeError"></a>RangeError</h5><p>范围出错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.length = <span class="number">-1</span>; <span class="comment">// Uncaught RangeError: Invalid array length</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">66.66</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num.toFixed(<span class="number">-1</span>)); <span class="comment">// Uncaught RangeError: toFixed() digits argument must be between 0 and 100</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h5><p>类型错误。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>(); <span class="comment">// Uncaught TypeError: 123 is not a function</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="URIError"><a href="#URIError" class="headerlink" title="URIError"></a>URIError</h5><p>URI: uniform resource identifier 统一资源标识符</p>
<p>URL: uniform resource locator 统一资源定位符</p>
<p>URN: uniform resource name 统一资源名称</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="built_in">decodeURI</span>(<span class="string">'%abcde'</span>); <span class="comment">// Uncaught URIError: URI malformed at decodeURI (&lt;anonymous&gt;)</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try catch"></a>try catch</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(jsonStr);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 出现错误时捕获错误。</span></span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 无论出错与否都会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>手动抛出错误。</p>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>严格模式下 <code>with</code> <code>callee</code> <code>caller</code> 无法使用。</p>
<p>函数内部的 <code>this</code> 默认值为 <code>undefined</code> 。需要显式指定。</p>
<p>使用 <code>call</code> 这类方法改变 <code>this</code> 指向时，如果传入的是原始值，会被包装为包装类。</p>
<p>函数的参数不允许重复。</p>
<p>对象的键不允许重复，但不报错，只会默认覆盖。</p>
<p><code>eval</code> 内存在一个作用域，外部无法访问内部变量。</p>
<h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO-LIST"></a>TODO-LIST</h2><ul>
<li><input disabled type="checkbox"> 想尝试一下 <code>hugo</code> 作为博客。</li>
<li><input checked disabled type="checkbox"> 整理 18 年的笔记。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>写给两年前的自己</title>
    <url>/2020/10/11/%E5%86%99%E7%BB%99%E4%B8%A4%E5%B9%B4%E5%89%8D%E7%9A%84%E8%87%AA%E5%B7%B1/</url>
    <content><![CDATA[<h1 id="写给两年前的自己"><a href="#写给两年前的自己" class="headerlink" title="写给两年前的自己"></a>写给两年前的自己</h1><p>今天是 2020 年 10 月 11日，一个平平无奇的周日。6点没到就难受地醒了过来，拔洗衣机水管时又记错了方向，喷了自己一身的水。17号就要体测，我还有点小焦虑。</p>
<a id="more"></a>

<p>昨晚随手整理了一下磁盘，发现了18年写下的一些学习笔记。翻了一下，只觉得好笑。</p>
<p>两年前我还不知道怎么记电子笔记，只能笨拙地将代码和思考写进了 <code>word</code> 文档，再试图转成  <code>pdf</code> 。还记得后来发现了 <code>onenote</code> ，也用它记过一小段时间，为了更好地记录代码，下载了 <code>highlight</code> 插件来高亮提示。</p>
<p>记在 <code>onenote</code> 里的笔记我都转成 <code>markdown</code> 了，那些 <code>word</code> 文档里的东西还没整理，抽时间整理一下。(<code>todo</code> <code>get</code> ✔)</p>
<p>仔细看看当时记的笔记，都是些学习时候的困扰。原来 <code>18</code> 年底我就已经在看 <code>ES6</code> 的内容了，而两年后的我依然不敢说学得有多精妙。那时候的我完全捋不清楚 <code>JSON</code> 和 <code>JS</code> 对象的关系，不知道是谁 <code>parse</code> 成了谁，又是谁 <code>stringify</code> 成了谁。也是那个时候看着英文书，误打误撞下载了 <code>Nodejs</code> ，也不会用，只能一字一句看着陌生的单词慢慢琢磨。(<del>两年后英文依然烂的可以</del>) 还记得两年前我完全不懂 <code>github</code> 如何使用，<code>git</code> 操作又是什么，那些 <code>github</code> 的开源项目为什么目录那么复杂，那么多我不认识的文件。前端开发不是只有 <code>html</code> <code>css</code> <code>js</code> 吗？现在想起也只能为那时候的无知掩面。</p>
<p>回首一下两年的经历，很惊讶我居然还在 <code>web</code> 开发这条路上摸爬滚打，很难过我大概没法追得上那些学安全的同学们。在我对开发还一无所知的时候，他们已经拥有了许多的开发经验。在我对安全一知半解的时候，他们已经可以左一个漏洞右一个漏洞的挣钱了。我想我对钱总是更敏感的，所以我总是对被远远甩下的那几年时光耿耿于怀。但又很庆幸我没有太过自暴自弃(或者说没有太长时间的自暴自弃)，我总是在不停地赶，就像800米一样，我追不上别人，我很难过，身体也很累，但我在努力地不停步了。也为此刻的自己没有被滚滚而来的洪流拍开而庆幸，我至少也还是有点长处的吧。</p>
<p>一转眼就8点了，大概写了20分钟。其中无数次停下思考、琢磨，希望写得更好一些。好让将来的我，(也许就是两年后)看得更加舒心。</p>
<p>其实说得是写给两年前的自己，但我更加给两年后的自己。在2022年，不知道我又是哪个模样。</p>
<p>感谢两年前的自己很果断地选择了方向，也没有太过荒废这些时光。让今天的我也有东西可写，摸得出一点优点沾沾自喜。</p>
<p>但愿两年后的自己更加幸运与成功，愿我这段时日的努力都有回报，希望自己未来可以的过得很好。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>学习笔记 2020 10 10</title>
    <url>/2020/10/10/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2020-10-10/</url>
    <content><![CDATA[<h1 id="学习笔记-2020-10-10"><a href="#学习笔记-2020-10-10" class="headerlink" title="学习笔记 2020-10-10"></a>学习笔记 2020-10-10</h1><blockquote>
<p>决定从今天开始每天记录当日学习所得。</p>
<a id="more"></a>
</blockquote>
<h2 id="JavaScript-高级程序设计-第4版-阅读记录"><a href="#JavaScript-高级程序设计-第4版-阅读记录" class="headerlink" title="JavaScript 高级程序设计(第4版) 阅读记录"></a>JavaScript 高级程序设计(第4版) 阅读记录</h2><h3 id="集合引用类型"><a href="#集合引用类型" class="headerlink" title="集合引用类型"></a>集合引用类型</h3><h4 id="1-Object"><a href="#1-Object" class="headerlink" title="1. Object"></a>1. Object</h4><p><code>Object</code> 是 <code>ECMAScript</code> 中最常用的类型之一。</p>
<p>创建 <code>Object</code> 实例的方法：</p>
<ul>
<li><p>使用 <code>new</code> 操作符和 <code>Object</code> 构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">person.name = <span class="string">'Sirine'</span>;</span><br><span class="line">person.age = <span class="number">21</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用对象字面量方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 推荐使用 ✔</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  name: <span class="string">'Sirine'</span>,</span><br><span class="line">  age: <span class="number">21</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>对象中获取属性的方法：</p>
<ul>
<li><p>点语法</p>
</li>
<li><p>中括号语法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(person[<span class="string">"name"</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="comment">// 以上两种语法等价</span></span><br></pre></td></tr></table></figure>

<p>但在使用中括号语法获取属性时可以传入变量或是包含空格等字符的键名。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> propertyName = <span class="string">'name'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person[propertyName]);</span><br><span class="line"><span class="comment">// === console.log(person['name']);</span></span><br><span class="line"><span class="comment">// 键名包含空格时必须使用中括号语法。</span></span><br><span class="line">person[<span class="string">'first name'</span>] = <span class="string">'Zhao'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person[<span class="string">'first name'</span>]);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-Array"><a href="#2-Array" class="headerlink" title="2. Array"></a>2. Array</h4><p><code>ECMAScript</code> 中的数组十分自由，数组内元素的类型不受限制，大小也是动态的。</p>
<p>创建数组的方法也是两种。</p>
<ul>
<li><p><code>Array</code> 构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="comment">// 创建一个长度为 0 的空数组。</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// 创建一个长度为 20 的空数组。</span></span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>);</span><br><span class="line"><span class="comment">// 创建一个长度为 3 ，包含 red blue green 三个字符串的数组。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组字面量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">let</span> colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'yellow'</span>];</span><br><span class="line">  <span class="comment">// 创建一个长度为3，包含 red blue green 三个字符串的数组。</span></span><br><span class="line"><span class="keyword">let</span> names = [];</span><br><span class="line">  <span class="comment">// 创建一个长度为 0 的空数组。</span></span><br><span class="line">  <span class="keyword">let</span> options = [,,,,,];</span><br><span class="line">  <span class="comment">// 创建一个长度为 5 的数组。空位元素为 `undefined`;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> option <span class="keyword">of</span> options) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(option === <span class="literal">undefined</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// true * 5</span></span><br><span class="line">  <span class="comment">// 空位元素在 map join 等方法中会被跳过。</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<p><code>ES6</code> 当中新增了两个创建数组的静态方法。</p>
<ul>
<li><p><code>Array.from</code></p>
<p>这个方法可以将任何可迭代的结构例如类数组，转换为数组。</p>
<p>可迭代结构举例：字符串、<code>Map</code> 实例， <code>Set</code> 实例，拥有 <code>[Symbol.iterator]</code> 方法的对象，函数的 <code>arguments</code> 对象， 携带有索引键值和 <code>length</code> 属性的对象。</p>
<p>该方法的第一个参数为被转换的对象，第二个参数为映射函数，第三个参数为映射函数的 <code>this</code> 指向。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="built_in">Array</span>.from(a1, x =&gt; x**<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> a3 = <span class="built_in">Array</span>.from(a1, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;<span class="keyword">return</span> x**<span class="keyword">this</span>.exponent&#125;, &#123;<span class="attr">exponent</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// [1, 4, 9, 16]</span></span><br><span class="line"><span class="built_in">console</span>.log(a3); <span class="comment">// [1, 4, 9, 16]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Array.of</code></p>
<p>用于替代 <code>Array.prototype.slice.call(arguments)</code> ，将传入的参数转换为数组。</p>
</li>
</ul>
<p>数组的索引值可以动态修改，并且会直接影响到数组的长度。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> options = [<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>];</span><br><span class="line">options.length = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(options);</span><br><span class="line"><span class="comment">// [10, 9, 8, 7, 6, 5, 4, empty × 3]</span></span><br><span class="line">options.length = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(options);</span><br><span class="line"><span class="comment">// [10, 9, 8]</span></span><br><span class="line">options[<span class="number">50</span>] = <span class="number">50</span>;</span><br><span class="line"><span class="built_in">console</span>.log(options);</span><br><span class="line"><span class="comment">// [10, 9, 8, empty × 47, 50]</span></span><br></pre></td></tr></table></figure>

<p>在数组中访问不存在的元素(例如下标越界)的时候会返回 <code>undefined</code> 。前面也提到了被设置为 <code>empty</code> 的数组元素被访问时也是被当作 <code>undefined</code> 。</p>
<p>数组最多可以包含的元素值为 <code>4 294 967 295</code> 。</p>
<p>判断是否为数组的方法有：</p>
<ul>
<li><code>instanceof</code></li>
<li><code>Array.isArray</code> </li>
</ul>
<p>两者的区别是 <code>instanceof</code> 的返回结果取决于 <code>Array</code> 构造函数(即是否为某个构造函数的实例)，而 <code>isArray</code> 只会判断是否为一个数组。</p>
<p><code>Array</code> 新增的三个迭代器方法：</p>
<ul>
<li><p><code>keys()</code></p>
<p>返回数组索引的迭代器。</p>
</li>
<li><p><code>values()</code></p>
<p>返回数组元素的迭代器。</p>
</li>
<li><p><code>entries()</code></p>
<p>返回索引值对的迭代器。</p>
</li>
</ul>
<p>三个迭代器都可以通过 <code>Array.from</code> 转换为数组。也可以用于 <code>for of</code> 循环迭代。</p>
<p><code>Array</code> 新增的复制和填充方法：</p>
<ul>
<li><p><code>copyWithin(insertIndex, copyIndex, lastIndex)</code></p>
</li>
<li><p><code>fill(arg, startIndex, lastIndex)</code></p>
<p>两个方法的索引值都支持负值。</p>
<p><code>copyWithin</code> 从 <code>copyIndex</code> 开始复制到 <code>lastIndex</code> 结束(可忽略)，复制到 <code>insertIndex</code> 位置。若忽略复制索引则全部复制。</p>
<p><code>fill</code> 方法将第一个参数填充到 <code>startIndex</code> 开始到 <code>lastIndex</code> 前一个位置，若忽略索引值则整个数组进行填充。</p>
<p>两个方法的操作都是对原有元素的覆盖。</p>
</li>
</ul>
<h2 id="现代-JavaScript-教程"><a href="#现代-JavaScript-教程" class="headerlink" title="现代 JavaScript 教程"></a>现代 JavaScript 教程</h2><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h3><p>非表达式的语法结构不能与三元运算符一起使用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">  alert(i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有问题</span></span><br><span class="line"></span><br><span class="line">(i &gt; <span class="number">5</span>) ? alert(i) : <span class="keyword">continue</span>; <span class="comment">// 语法错误</span></span><br></pre></td></tr></table></figure>

<h4 id="标签用法："><a href="#标签用法：" class="headerlink" title="标签用法："></a>标签用法：</h4><p>适用于多层循环嵌套跳出的场景。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">outer: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) <span class="keyword">break</span> outer; <span class="comment">// 若满足条件，则跳出至最外层。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">'Done!'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="任务："><a href="#任务：" class="headerlink" title="任务："></a>任务：</h4><h5 id="1-最后一次循环的值"><a href="#1-最后一次循环的值" class="headerlink" title="1. 最后一次循环的值"></a>1. 最后一次循环的值</h5><p>此代码最后一次 <code>alert</code> 值是多少？为什么？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (i) &#123;</span><br><span class="line">  alert( i-- );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>答案为 <code>1</code>  ，循环体内使用了后置自减，那么在弹出后才会对 <code>i</code> 自减，当 <code>i</code> 为 <code>1</code> 时，弹出显示，然后自减为 <code>0</code> , 再次判断循环条件，不符合，不再进入循环。</p>
<h5 id="2-while-循环显示哪些值？"><a href="#2-while-循环显示哪些值？" class="headerlink" title="2. while 循环显示哪些值？"></a>2. while 循环显示哪些值？</h5><p>以下两个循环的 <code>alert</code> 值是否相同？</p>
<ol>
<li><p>前缀形式 <code>++i</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (++i &lt; <span class="number">5</span>) alert( i );</span><br></pre></td></tr></table></figure>
</li>
<li><p>后缀形式 <code>i++</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i++ <span class="xml"><span class="tag">&lt; <span class="attr">5</span>) <span class="attr">alert</span>( <span class="attr">i</span> );</span></span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>两个循环的 <code>alert</code> 值前四次相等，因为不管是前置还是后置，<code>i</code> 的自增都在条件判断处完成，对于 <code>alert</code> 不影响。</p>
<p>但是自增的时间影响了循环执行的次数。</p>
<p>因为第一个循环是自增后再判断，每次循环的 <code>i</code> 为 <code>1, 2, 3, 4, 5</code> , 第五次已经无法满足条件判断，不再进入循环，所以只打印了四次。</p>
<p>第二个循环是自增前判断，判断时的 <code>i</code> 值依次为 <code>0, 1, 2, 3, 4, 5</code> ，因此该循环多了一次进入循环的机会，因为进入循环时 <code>i</code> 已经完成自增，所以打印的值依次为 <code>1, 2, 3, 4, 5</code> 。</p>
<h5 id="3-for-循环显示哪些值？"><a href="#3-for-循环显示哪些值？" class="headerlink" title="3. for 循环显示哪些值？"></a>3. for 循环显示哪些值？</h5><p>两次循环 <code>alert</code> 值是否相同？</p>
<ol>
<li><p>后缀形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) alert( i );</span><br></pre></td></tr></table></figure>
</li>
<li><p>前缀形式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) alert( i );</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>两次循环显示的值完全相同，因为 <code>for</code> 循环的自增条件是单独执行，不与条件判断放置在一起。写成 <code>while</code> 循环就是类似于：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">5</span>)&#123;</span><br><span class="line">  alert(i);</span><br><span class="line">  i++;</span><br><span class="line">  <span class="comment">// or</span></span><br><span class="line">  ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上所示，这样的自增无论是前置还是后置都没有影响。</p>
<h5 id="4-使用-for-循环输出偶数"><a href="#4-使用-for-循环输出偶数" class="headerlink" title="4. 使用 for 循环输出偶数"></a>4. 使用 for 循环输出偶数</h5><p>使用 <code>for</code> 循环输出从 <code>2</code> 到 <code>10</code> 的偶数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 4 6 8 10</span></span><br></pre></td></tr></table></figure>

<h5 id="5-使用-while-替换-for"><a href="#5-使用-while-替换-for" class="headerlink" title="5. 使用 while 替换 for"></a>5. 使用 while 替换 for</h5><p>重写代码，在保证不改变其行为的情况下，将 <code>for</code> 循环更改为 <code>while</code>（输出应保持不变）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  alert( <span class="string">`number <span class="subst">$&#123;i&#125;</span>!`</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  alert( <span class="string">`number <span class="subst">$&#123;i&#125;</span>!`</span> );</span><br><span class="line">  i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6-重复输入，直到正确为止"><a href="#6-重复输入，直到正确为止" class="headerlink" title="6. 重复输入，直到正确为止"></a>6. 重复输入，直到正确为止</h5><p>编写一个提示用户输入大于 <code>100</code> 的数字的循环。如果用户输入其他数值 —— 请他重新输入。</p>
<p>循环一直在请求一个数字，直到用户输入了一个大于 <code>100</code> 的数字、取消输入或输入了一个空行为止。</p>
<p>在这我们假设用户只会输入数字。在本题目中，不需要对非数值输入进行特殊处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> input = prompt(<span class="string">'please input a number greater than 100!'</span>);</span><br><span class="line"><span class="keyword">while</span>(input &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (input === <span class="literal">null</span>) &#123;</span><br><span class="line">    alert(<span class="string">'input canceled.'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (input === <span class="string">''</span>) &#123;</span><br><span class="line">    alert(<span class="string">'you enter a nothing.'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  input = prompt(<span class="string">'please input a number greater than 100!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考解决方案：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  num = prompt(<span class="string">"Enter a number greater than 100?"</span>, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt;= <span class="number">100</span> &amp;&amp; num);</span><br></pre></td></tr></table></figure>

<p>代码简洁，利用了 <code>do while</code> 循环的特性。</p>
<h5 id="7-输出素数"><a href="#7-输出素数" class="headerlink" title="7. 输出素数"></a>7. 输出素数</h5><p>大于 <code>1</code> 且不能被除了 <code>1</code> 和它本身以外的任何数整除的整数叫做<a href="https://en.wikipedia.org/wiki/Prime_number" target="_blank" rel="noopener">素数</a>。</p>
<p>换句话说，<code>n &gt; 1</code> 且不能被 <code>1</code> 和 <code>n</code> 以外的任何数整除的整数，被称为素数。</p>
<p>例如，<code>5</code> 是素数，因为它不能被 <code>2</code>、<code>3</code> 和 <code>4</code> 整除，会产生余数。</p>
<p><strong>写一个可以输出 <code>2</code> 到 <code>n</code> 之间的所有素数的代码。</strong></p>
<p>当 <code>n = 10</code>，结果输出 <code>2、3、5、7</code>。</p>
<p>P.S. 代码应适用于任何 <code>n</code>，而不是对任何固定值进行硬性调整。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> n = prompt(<span class="string">''</span>, <span class="number">2</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'the n invalid'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.sqrt(n));</span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === num) &#123;</span><br><span class="line">      num--;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n % num === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isPrime(i)) arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>



<h2 id="JavaScript-深入学习"><a href="#JavaScript-深入学习" class="headerlink" title="JavaScript 深入学习"></a>JavaScript 深入学习</h2><h3 id="手写数组原型方法"><a href="#手写数组原型方法" class="headerlink" title="手写数组原型方法"></a>手写数组原型方法</h3><h4 id="unshift-方法"><a href="#unshift-方法" class="headerlink" title="unshift 方法"></a>unshift 方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnShift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">arguments</span>.length;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">this</span>.splice(i, <span class="number">0</span>, <span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组元素按照字节长度排序"><a href="#数组元素按照字节长度排序" class="headerlink" title="数组元素按照字节长度排序"></a>数组元素按照字节长度排序</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBytes</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = str.length;</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) len++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'today'</span>, <span class="string">'今天'</span>, <span class="string">'ok'</span>, <span class="string">'haha'</span>, <span class="string">'you say 什么'</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getBytes(a) - getBytes(b);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"><span class="comment">//  ["ok", "今天", "haha", "today", "you say 什么"]</span></span><br></pre></td></tr></table></figure>

<h3 id="手写可以判断所有类型的-typeof-函数"><a href="#手写可以判断所有类型的-typeof-函数" class="headerlink" title="手写可以判断所有类型的 typeof 函数"></a>手写可以判断所有类型的 typeof 函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myTypeof</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> arg;</span><br><span class="line">  <span class="keyword">var</span> toStr = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line">  <span class="keyword">if</span> (arg === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'null'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> toStr.call(arg).slice(<span class="number">8</span>, <span class="number">-1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myTypeof([]); <span class="comment">// "Array"</span></span><br><span class="line">myTypeof(&#123;&#125;); <span class="comment">// "Object"</span></span><br><span class="line">myTypeof(<span class="number">123</span>); <span class="comment">// "number"</span></span><br><span class="line">myTypeof(<span class="string">'123'</span>); <span class="comment">// "string"</span></span><br><span class="line">myTypeof(<span class="literal">false</span>); <span class="comment">// "boolean"</span></span><br><span class="line">myTypeof(<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>)); <span class="comment">// "Number"</span></span><br><span class="line">myTypeof(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'123'</span>)); <span class="comment">// "String"</span></span><br><span class="line">myTypeof(<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>)); <span class="comment">// "Boolean"</span></span><br><span class="line">myTypeof(<span class="literal">null</span>); <span class="comment">// "null"</span></span><br><span class="line">myTypeof(<span class="literal">undefined</span>); <span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> item = <span class="keyword">this</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(item) === <span class="number">-1</span>) &#123;</span><br><span class="line">      newArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(test.unique());</span><br><span class="line"><span class="comment">// [1, 2, 3, 5, "a"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = <span class="keyword">this</span>[i];</span><br><span class="line">    <span class="keyword">if</span> (!obj.hasOwnProperty(item)) &#123;</span><br><span class="line">      obj[item] = <span class="literal">true</span>;</span><br><span class="line">      newArr.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="string">'a'</span>, <span class="string">'a'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(test.unique());</span><br><span class="line"><span class="comment">// [1, 2, 3, 5, "a"]</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串去重"><a href="#字符串去重" class="headerlink" title="字符串去重"></a>字符串去重</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.unique = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newStr = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="keyword">this</span>.length;</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(<span class="keyword">this</span>[i])) <span class="keyword">continue</span>;</span><br><span class="line">    obj[<span class="keyword">this</span>[i]] = <span class="literal">true</span>;</span><br><span class="line">    newStr += <span class="keyword">this</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'122132312341nfskdjfhhhrbbfjsdhfuke'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.unique());</span><br><span class="line"><span class="comment">// 1234nfskdjhrbue</span></span><br></pre></td></tr></table></figure>

<h3 id="重复字符串中找出第一个不重复字符"><a href="#重复字符串中找出第一个不重复字符" class="headerlink" title="重复字符串中找出第一个不重复字符"></a>重复字符串中找出第一个不重复字符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = str.length;</span><br><span class="line">  <span class="keyword">var</span> i;</span><br><span class="line">  <span class="keyword">var</span> j;</span><br><span class="line">  <span class="keyword">var</span> flag;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> tmp1 = str[i];</span><br><span class="line">    <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> tmp2 = str[j];</span><br><span class="line">      <span class="keyword">if</span> (tmp1 === tmp2) &#123;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag === <span class="literal">true</span>) <span class="keyword">return</span> str[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'12213a231234qqqqeuerhkrjbrkfmigrhiofjcrjef'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(find(str));</span><br><span class="line"><span class="comment">// a</span></span><br></pre></td></tr></table></figure>

<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li><p>arguments 类型为 object</p>
</li>
<li><pre><code class="js"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params"></span>) </span>{
  <span class="built_in">console</span>.log(a);
  <span class="built_in">console</span>.log(test);
  <span class="built_in">console</span>.log(test.name);
  <span class="built_in">console</span>.log(test === a);
}
a(); <span class="comment">// a is not defined</span>
test();
<span class="comment">// ƒ a() {</span>
<span class="comment">//   console.log(a);</span>
<span class="comment">//   console.log(test);</span>
<span class="comment">//   console.log(test.name);</span>
<span class="comment">//   console.log(test === a);</span>
<span class="comment">// }</span>
<span class="comment">// ƒ a() {</span>
<span class="comment">//   console.log(a);</span>
<span class="comment">//   console.log(test);</span>
<span class="comment">//   console.log(test.name);</span>
<span class="comment">//   console.log(test === a);</span>
<span class="comment">// }</span>
<span class="comment">// a</span>
<span class="comment">// true</span></code></pre>
</li>
</ul>
<h2 id="TODO-LIST"><a href="#TODO-LIST" class="headerlink" title="TODO-LIST"></a>TODO-LIST</h2><ul>
<li><input disabled type="checkbox"> 想尝试一下 <code>hugo</code> 作为博客。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>VueNote-4</title>
    <url>/2020/06/07/VueNote-4/</url>
    <content><![CDATA[<h1 id="Vue笔记-④"><a href="#Vue笔记-④" class="headerlink" title="Vue笔记 ④"></a>Vue笔记 ④</h1><h2 id="📃-正文"><a href="#📃-正文" class="headerlink" title="📃 正文"></a>📃 正文</h2><h3 id="①-Vue-单文件组件"><a href="#①-Vue-单文件组件" class="headerlink" title="① Vue 单文件组件"></a>① <code>Vue</code> 单文件组件</h3><h4 id="1-1-style-中的-scoped"><a href="#1-1-style-中的-scoped" class="headerlink" title="1.1 style 中的 scoped"></a>1.1 <code>style</code> 中的 <code>scoped</code></h4><p>在 <code>Vue</code> 的单文件组件中，有 <code>template</code> , <code>script</code>, <code>style</code> 三种标签。其中的 <code>style</code> 有一个 <code>scoped</code> 属性。在文档中的解释为</p>
<blockquote>
<p>当 <code>style</code>  标签有 <code>scoped</code> 属性时，它的 <code>CSS</code> 只作用于当前组件中的元素。这类似于 <code>Shadow DOM</code> 中的样式封装。</p>
</blockquote>
<p>实际产生的效果为，当前页面的某些元素都会生成一个独特属性，而我们写的样式都会匹配这个独特的属性来保持不被其余组件影响。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.example &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;example&quot;&gt;hi&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>转换为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">.example[data-v-f3f3eg9] &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;example&quot; data-v-f3f3eg9&gt;hi&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>但实际上，这个独特属性只会出现在当前页面的直接使用的标签上，也就是我们使用的组件的最外层父元素。那么想要根据转换规则，是无法匹配到这个组件的内部元素的。想要冲破这个规则而不取消 <code>scoped</code> 属性，就需要深度作用选择器。</p>
<p>原生中可以编写以下代码来使样式作用变深。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">.a &gt;&gt;&gt; .b &#123; /* ... */ &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>转换为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.a[data-v-f3f3eg9] .b &#123; /* ... */ &#125;</span><br></pre></td></tr></table></figure>

<p>那么就可以达到我们想要的效果，<code>css</code> 预处理器也许无法解析这种语法，可以用 <code>/deep/</code> 和 <code>::v-deep</code> 来代替。</p>
<h4 id="1-2-Node-API-服务器配置"><a href="#1-2-Node-API-服务器配置" class="headerlink" title="1.2  Node API 服务器配置"></a>1.2  <code>Node</code> <code>API</code> 服务器配置</h4><h5 id="1-2-1-想要偷懒的开始"><a href="#1-2-1-想要偷懒的开始" class="headerlink" title="1.2.1 想要偷懒的开始"></a>1.2.1 想要偷懒的开始</h5><p>写项目的时候，因为在本地跑的话，要开 <code>MySQL</code> 服务还要开后端一个服务，我觉得烦且占用资源。所以准备配置到我的小霸王机器上。</p>
<h5 id="1-2-2-面向搜索引擎的经过"><a href="#1-2-2-面向搜索引擎的经过" class="headerlink" title="1.2.2 面向搜索引擎的经过"></a>1.2.2 面向搜索引擎的经过</h5><p>因为原先在小霸王里装好了宝塔 <code>Linux</code> 面板，所以直接去搜索 <code>pm2</code> 管理器，但是我随手点击安装的其他软件都装好了， <code>pm2</code> 管理器还是跟没装似的。于是搜索了一番，打印出安装时的日志信息一看，发现无法连接到 <code>github</code> ，于是照着这个方法去搜索，又是更改 <code>github</code> 的 <code>ip</code> 地址，又是配置 <code>git</code> 的账号信息，又是设置代理。</p>
<p><strong>通通没有用</strong></p>
<p>于是又仔细查看了一下报错信息，发现显示 <code>443</code> 错误。我自己想了一下，可能是没有放行端口的原因，于是去控制台把出入的 <code>443</code> 端口都放了一下。验证出来是出行的端口的问题。</p>
<h5 id="1-2-3-安装好的结果"><a href="#1-2-3-安装好的结果" class="headerlink" title="1.2.3 安装好的结果"></a>1.2.3 安装好的结果</h5><p>安装好以后还是没有正常运行，因为新建的项目无法进行映射，也查不到什么有用的信息……</p>
<p>于是在可以连通 <code>github</code> 的情况下，我只好自己用 <code>npm</code> 下载了 <code>forever</code> 来运行，懒得下 <code>pm2</code> 再弄了。</p>
<h4 id="1-3-token-的使用"><a href="#1-3-token-的使用" class="headerlink" title="1.3  token 的使用"></a>1.3  <code>token</code> 的使用</h4><p><code>token</code> 这个东西，我也是经历了从完全弄不懂到目前大概知道作用的情况了，这一次学着写后台管理系统，也用到了 <code>token</code> 。大概写一下新了解到的东西。</p>
<h5 id="1-3-1-持久性-会话期间存储机制"><a href="#1-3-1-持久性-会话期间存储机制" class="headerlink" title="1.3.1 持久性/会话期间存储机制"></a>1.3.1 持久性/会话期间存储机制</h5><p>在获取 <code>token</code> 之后是需要临时保存住这个字符串来使用的，而我一开始想到的是存储在 <code>localstorage</code> 中，然后又想着，一直存在里头，每次打开不都直接登上了吗？</p>
<p>虽然之前写了点项目使用过 <code>token</code> ，但当时那个项目的登陆机制是乞丐版的，于是我也就没在意。</p>
<p>这次了解到 <code>token</code> 可以存储在 <code>sessionStorage</code> 中来进行会话期间的账户验证。可以保证这个 <code>token</code> 只在当前网站打开期间生效。</p>
<h4 id="1-4-非登陆状态的访问限制"><a href="#1-4-非登陆状态的访问限制" class="headerlink" title="1.4 非登陆状态的访问限制"></a>1.4 非登陆状态的访问限制</h4><p>一个非常常见的需求，即在非登陆状态下对非登陆页面的访问限制。可以使用路由导航守卫来控制访问权限。</p>
<p>在未登录的状态下，是没有 <code>token</code> 的，那么可以使用 <code>router.beforeEach</code> 来控制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// to 代表将要访问的路径</span></span><br><span class="line">  <span class="comment">// from 代表从哪个路径而来</span></span><br><span class="line">  <span class="comment">// next 为一个函数为接下来跳转</span></span><br><span class="line">  <span class="keyword">if</span> (to.path === <span class="string">'/login'</span>) <span class="keyword">return</span> next();</span><br><span class="line">  <span class="keyword">const</span> token = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'token'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!token) <span class="keyword">return</span> next(<span class="string">'/login'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="1-5-vscode-语法格式化与-eslint-冲突问题"><a href="#1-5-vscode-语法格式化与-eslint-冲突问题" class="headerlink" title="1.5 vscode 语法格式化与 eslint 冲突问题"></a>1.5 <code>vscode</code> 语法格式化与 <code>eslint</code> 冲突问题</h4><p>在写代码的时候，<code>eslint</code> 有一些规则比较苛刻，例如字符串只能用单引号表示，不能有行尾空格，每个文件最后需要起一个新行。</p>
<p>那么在 <code>vscode</code> 的自动格式化与 <code>eslint</code> 产生冲突的时候需要对其中一方进行配置， <code>eslint</code> 的配置文件一般都会在项目创建时自动生成。这里提一下 <code>vscode</code> 的配置文件。</p>
<p>可以在项目根目录新建一个文件 <code>.prettierrc</code> 来进行配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">//格式化时不会自动添加分号</span></span><br><span class="line">    <span class="string">"semi"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//格式化时生成单引号</span></span><br><span class="line">    <span class="string">"singleQuote"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//单行所允许的字符长度 若超过则会自动换行</span></span><br><span class="line">    <span class="string">"printWidth"</span>: <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-路由跳转的参数注入"><a href="#1-6-路由跳转的参数注入" class="headerlink" title="1.6 路由跳转的参数注入"></a>1.6 路由跳转的参数注入</h4><p>在使用路由跳转到某个页面的时候，有时候需要在路径中放入一个 <code>id</code> 来获取指定的数据，此时可以在路由配置时，指定 <code>props</code> 为 <code>true</code> 来表明参数的注入，然后就可以在组件中使用 <code>props</code> 来接收这个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/categories/edit/:id'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/views/CategoryEdit.vue'</span>),</span><br><span class="line">  props: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'CategoryEdit'</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    id: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后id 就可以作为一个变量直接使用</p>
<h3 id="②-项目优化"><a href="#②-项目优化" class="headerlink" title="② 项目优化"></a>② 项目优化</h3><h4 id="2-1-项目优化策略"><a href="#2-1-项目优化策略" class="headerlink" title="2.1 项目优化策略"></a>2.1 项目优化策略</h4><h5 id="2-1-1-生成打包报告"><a href="#2-1-1-生成打包报告" class="headerlink" title="2.1.1 生成打包报告"></a>2.1.1 生成打包报告</h5><p>打包时，为了直观地发现项目中存在的问题，可以在打包时生成报告。生成报告的方式有两种：</p>
<h6 id="①-通过命令行参数的形式生成报告"><a href="#①-通过命令行参数的形式生成报告" class="headerlink" title="① 通过命令行参数的形式生成报告"></a>① 通过命令行参数的形式生成报告</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 vue-cli 的命令选项可以生成打包报告</span></span><br><span class="line"><span class="comment">// --report 选项可以生成 report.html 以帮助分析包内容</span></span><br><span class="line">vue-cli-service build --report</span><br></pre></td></tr></table></figure>

<h6 id="②-通过可视化的UI面板直接查看报告"><a href="#②-通过可视化的UI面板直接查看报告" class="headerlink" title="② 通过可视化的UI面板直接查看报告"></a>② 通过可视化的UI面板直接查看报告</h6><p>在可视化的UI面板中，通过<strong>控制台</strong>和<strong>分析</strong>面板，可以方便地看到项目中存在的问题。</p>
<h5 id="2-1-2-为开发模式与发布模式指定不同的打包入口"><a href="#2-1-2-为开发模式与发布模式指定不同的打包入口" class="headerlink" title="2.1.2 为开发模式与发布模式指定不同的打包入口"></a>2.1.2 为开发模式与发布模式指定不同的打包入口</h5><p>默认情况下，Vue 项目的开发模式与发布模式，公用同一个打包的入口文件 (src/main.js)。为了将项目的开发过程与发布过程分离，我们可以为两种模式各自指定打包的入口文件，即：</p>
<p>① 开发模式的入口文件为 src/main-dev.js</p>
<p>② 发布模式的入口文件为 src/main-prod.js</p>
<p>在 <code>vue.config.js</code> 导出的配置对象中，新增 <code>configureWebpack</code> 或 <code>chainWebpack</code> 节点， 来自定义 <code>webpack</code> 的打包配置</p>
<p>在这里， <code>configureWebpack</code> 和 <code>chainWebpack</code> 的作用相同，唯一的区别就是它们修改 <code>webpack</code> 配置的方式不同：</p>
<p>① <code>chainWebpack</code> 通过链式编程的形式，来修改默认的 <code>webpack</code> 配置</p>
<p>② <code>configureWebpack</code> 通过操作对象的形式，来修改默认的 <code>webpack</code> 配置</p>
<h5 id="2-1-2-第三方库启用CDN"><a href="#2-1-2-第三方库启用CDN" class="headerlink" title="2.1.2 第三方库启用CDN"></a>2.1.2 第三方库启用CDN</h5><p>默认情况下，通过 import 语法导入的第三方依赖包，最终会被打包到同一个文件中，从而导致打包成功后，单文件体积过大的问题。</p>
<p>为了解决上述问题，可以通过 webpack 的 externals 节点，来配置并加载外部的 CDN 资源。凡是声明在 externals 中的第三方依赖包，都不会被打包。</p>
<h5 id="2-1-3-Element-UI-组件按需加载"><a href="#2-1-3-Element-UI-组件按需加载" class="headerlink" title="2.1.3 Element-UI 组件按需加载"></a>2.1.3 Element-UI 组件按需加载</h5><p>注释掉 element-UI 的按需引入插件的导入，引入cdn链接导入 js 和 css 即可。</p>
<h5 id="2-1-4-路由懒加载"><a href="#2-1-4-路由懒加载" class="headerlink" title="2.1.4 路由懒加载"></a>2.1.4 路由懒加载</h5><p>路由懒加载即为在路由指定组件的时候用函数的形式来引入组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/login'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Login.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若是想要将部分组件打包在一起可以这样指定:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/login'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span><span class="string">'@/components/Login.vue'</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'/test'</span>,</span><br><span class="line">  component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: "group-foo" */</span><span class="string">'@/components/test.vue'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-1-5-首页内容定制"><a href="#2-1-5-首页内容定制" class="headerlink" title="2.1.5 首页内容定制"></a>2.1.5 首页内容定制</h5><p>在 <code>vue.config.js</code> 中给 html 插件写入一个属性来控制 index.html 的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生产模式</span></span><br><span class="line">config.plugin(<span class="string">'html'</span>).tap(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">  args[<span class="number">0</span>].isProd = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">htmlWebpackPlugin.options.isProd</span> ? '' <span class="attr">:</span> '<span class="attr">dev</span> <span class="attr">-</span> ' %&gt;</span>电商后台管理系统 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">htmlWebpackPlugin.options.isProd</span>) &#123; %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure>



<p><code>vue-cli</code> 中配置 <code>webpack</code> 配置项<a href="https://cli.vuejs.org/zh/config/#vue-config-js" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueNote-3</title>
    <url>/2019/12/14/VueNote-3/</url>
    <content><![CDATA[<h1 id="Vue笔记-③"><a href="#Vue笔记-③" class="headerlink" title="Vue笔记 ③"></a>Vue笔记 ③</h1><h2 id="📃-正文"><a href="#📃-正文" class="headerlink" title="📃 正文"></a>📃 正文</h2><h3 id="①-Vuex-对象"><a href="#①-Vuex-对象" class="headerlink" title="① Vuex 对象"></a>① <code>Vuex</code> 对象</h3><h4 id="1-1-vuex-中的-state"><a href="#1-1-vuex-中的-state" class="headerlink" title="1.1 vuex 中的 state"></a>1.1 <code>vuex</code> 中的 <code>state</code></h4><p>创建 <code>vuex</code> 实例对象时，传入一个包含 <code>state</code> 属性的对象，表示该 <code>store</code> 对象包含的全局状态，可以理解为全局属性，即其余组件都可以访问的共享数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">state: &#123;</span><br><span class="line">  data: something</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;$store.state.data&#125;&#125;</span><br></pre></td></tr></table></figure>



<a id="more"></a>

<h4 id="1-2-vuex-中的-mutations"><a href="#1-2-vuex-中的-mutations" class="headerlink" title="1.2  vuex 中的 mutations"></a>1.2  <code>vuex</code> 中的 <code>mutations</code></h4><p>该属性的值为一个包含许多函数的对象，可以近似看作 <code>methods</code> ，但是这里更严谨一些，官方希望我们将对 <code>state</code> 中的值的修改都通过 <code>mutations</code> 来实现，这样可以通过官方的浏览器插件 <code>devtools</code> 来进行追踪。</p>
<p>所有 <code>mutations</code> 的方法都有一个固定的形参，即 <code>state</code> ，可以通过它来直接调用 <code>state</code> 中的数据。</p>
<p>在组件中对于 <code>mutations</code> 的调用需要通过 <code>this.$store.commit</code> 来实现，该方法的参数为字符串和可选的传入参数。</p>
<p>传参时存在两种提交风格。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种提交风格</span></span><br><span class="line"><span class="comment">// 调用示例</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  anotherExample(n)&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'example'</span>, n);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mutations 定义</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  example(state, extra)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(extra) <span class="comment">// n</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种提交风格</span></span><br><span class="line"><span class="comment">// 调用示例</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  anotherExample(n)&#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(&#123;</span><br><span class="line">      type: <span class="string">'example'</span>,</span><br><span class="line">      extra: n</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mutations 定义</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  example(state, payload)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(payload) <span class="comment">// &#123;type: "increment", extra: n&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-3-vuex-中的-actions"><a href="#1-3-vuex-中的-actions" class="headerlink" title="1.3 vuex 中的 actions"></a>1.3 <code>vuex</code> 中的 <code>actions</code></h4><p><code>actions</code> 可以看作一个中转，当我们需要执行一些异步方法时，直接在 <code>mutations</code> 中实现的话，会导致 <code>devtools</code> 追踪出错，数据无法实时更新。而往往页面的更改已经完成，会导致混乱。那么，我们对异步方法的执行就可以写在 <code>actions</code> 中，异步完成时再调用 <code>mutations</code> 来完成对数据的更改。</p>
<p><code>actions</code> 中的方法的形参为 <code>context</code> ， 代表该 <code>store</code> 实例。</p>
<p>在组件中对于 <code>actions</code> 的调用使用 <code>this.$store.dispatch</code> 来实现，参数与 <code>commit</code> 类似。</p>
<h4 id="1-4-一个异步方法实例"><a href="#1-4-一个异步方法实例" class="headerlink" title="1.4 一个异步方法实例"></a>1.4 一个异步方法实例</h4><p>首先在组件中的 <code>methods</code> 定义一个方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">asyncClick()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$store</span><br><span class="line">  .dispatch(<span class="string">'UpdatedInfo'</span>,<span class="string">'i am payload'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>store</code> 实例的 <code>actions</code> 中定义一个 <code>UpdatedInfo</code> 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">UpdatedInfo(context, payload)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resovle,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      context.commit(<span class="string">'changeName'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(payload);</span><br><span class="line">      resovle(<span class="string">'updated'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 <code>setTimeout</code> 模拟异步操作。该方法返回一个 <code>promise</code> ，当异步操作执行时，实现 <code>resolve</code> 并将需要的值传递出去。</p>
<p>那么在组件中就可以使用 <code>.then</code> 来实现异步操作完成的反馈。</p>
<p><img src="/2019/12/14/VueNote-3/1-1.png" alt="1-1"></p>
<p>从此图中可以看到，异步操作和完成的反馈确实是在两个不同文件中实现的。</p>
<h4 id="1-5-vuex-中的-getters"><a href="#1-5-vuex-中的-getters" class="headerlink" title="1.5 vuex 中的 getters"></a>1.5 <code>vuex</code> 中的 <code>getters</code></h4><p><code>getters</code> 类似于 <code>computed</code> ，不多描述。参数固定为 <code>state</code> ，第二个参数可以是 <code>getters</code> 来获取全部 <code>getters</code> 以此调用其余的 <code>getter</code> 。</p>
<p>想要实现在 <code>getters</code> 中传入额外参数的话可以如下所示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getters: &#123;</span><br><span class="line">  example(state)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> something;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如下调用</span></span><br><span class="line">&#123;&#123;$store.getters.example(arg)&#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-vuex-中的-modules"><a href="#1-6-vuex-中的-modules" class="headerlink" title="1.6 vuex 中的 modules"></a>1.6 <code>vuex</code> 中的 <code>modules</code></h4><p><code>vuex</code> 实例对象可以分模块管理， <code>modules</code> 的值为一个对象，每个键对应的值为一个类 <code>store</code> 对象，包含 <code>state</code> <code>mutations</code> <code>getters</code> <code>actions</code> 等属性，组件中获取模块内部的 <code>state</code> 直接在根 <code>state</code> 中根据模块名来获取值，内部原理是将模块直接挂到根 <code>state</code> 上，并且内部的 <code>mutations</code> <code>getters</code> 一类都是直接挂载 <code>store</code> 对象上，调用方法没有变化， <code>getters</code> 可以使用第三个参数即根 <code>state</code> 。</p>
<p><code>actions</code> 中的 <code>context</code> 值的作用域为自己，即在 <code>actions</code> 中调用 <code>context</code> 中的 <code>mutations</code> 只会调用自身内部的 <code>mutations</code> 。</p>
<p><img src="/2019/12/14/VueNote-3/1-2.png" alt="1-2"></p>
<p>该图为打印出的 <code>context</code> 值。</p>
<h4 id="1-7-官方推荐的-mutations-常量写法"><a href="#1-7-官方推荐的-mutations-常量写法" class="headerlink" title="1.7 官方推荐的 mutations 常量写法"></a>1.7 官方推荐的 <code>mutations</code> 常量写法</h4><p>由于在 <code>commit</code> <code>mutations</code> 时，传入的参数为字符串，没有提示，有可能出现错误。于是官方推荐了使用常量表示 <code>mutations</code> 函数名的方法。如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span>;</span><br><span class="line"><span class="comment">// 或写于外部 js 文件中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span>;</span><br><span class="line">mutations: &#123;</span><br><span class="line">  [INCREMENT](state)&#123;</span><br><span class="line">    <span class="comment">// some code...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-8-vuex-的-actions-等映射"><a href="#1-8-vuex-的-actions-等映射" class="headerlink" title="1.8 vuex 的 actions 等映射"></a>1.8 <code>vuex</code> 的 <code>actions</code> 等映射</h4><p>在 <code>vuex</code> 中， 若是因为频繁调用 <code>this.$store.getters.xxxx</code> 或是 <code>dispatch</code> 等方法，可以通过 <code>MapGetters</code> 和 <code>MapActions</code> 等将 <code>store</code> 对象上的方法映射到当前组件内部。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  ...mapActions([<span class="string">'addCart'</span>]),</span><br><span class="line">  aMethod()&#123;</span><br><span class="line">    <span class="keyword">this</span>.addCart(args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([<span class="string">'cartList'</span>]),</span><br><span class="line">  aComputed()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.cartList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="②-axios"><a href="#②-axios" class="headerlink" title="② axios"></a>② <code>axios</code></h3><h4 id="2-1-封装第三方框架的必要性"><a href="#2-1-封装第三方框架的必要性" class="headerlink" title="2.1 封装第三方框架的必要性"></a>2.1 封装第三方框架的必要性</h4><p>在一个项目中，不应该对一个第三方框架过分依赖。例如 <code>axios</code> ，不应该在每个组件中单独引入并在 <code>methods</code> 中写入调用方法。如果框架出了问题，就会引发很多麻烦。<del>话说 <code>vue</code> 出了问题会咋样 😂</del></p>
<p>因此，可以考虑自己封装一下第三方框架的使用，然后在组件中使用自己封装的文件。</p>
<h4 id="2-2-axios-封装"><a href="#2-2-axios-封装" class="headerlink" title="2.2 axios 封装"></a>2.2 <code>axios</code> 封装</h4><p>在 <code>src</code> 中新建一个 <code>network</code> 文件夹作为封装模块的目录。</p>
<p><img src="/2019/12/14/VueNote-3/2-1.png" alt="2-1"></p>
<p>在 <code>request.js</code> 中引入 <code>axios</code> 然后导出自己写的包装函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config, success, failure</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseURL: <span class="string">'...'</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  instance(config)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    success(res)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    failure(err)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义一个 <code>axios</code> 实例，除了规定请求的基本 <code>config</code> ，还要求了请求成功和失败的回调函数，来实现在组件内的相应回调操作。</p>
<p>例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">'@/network/request'</span></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">'category'</span>,</span><br><span class="line">&#125;,(res)=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;,(err)=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或是直接在 <code>config</code> 中写入回调函数。</p>
<p>理解后，改用 <code>Promise</code> 来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">      baseURL: <span class="string">'http://106.54.54.237:8000/api/v1'</span>,</span><br><span class="line">      timeout: <span class="number">5000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    instance(config)</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件内部代码为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">'@/network/request'</span></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">'category'</span>,</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>然而实际上，<code>instance</code> 的返回值就是一个 <code>Promise</code> ，直接返回 <code>instance</code> 的返回值就可以。</p>
<h4 id="2-3-axios-拦截器"><a href="#2-3-axios-拦截器" class="headerlink" title="2.3 axios 拦截器"></a>2.3 <code>axios</code> 拦截器</h4><p>拦截器分为请求拦截和响应拦截。</p>
<ul>
<li><p>请求拦截</p>
<p>请求拦截中分为配置拦截和错误拦截，分别对应该方法的第一个参数和第二个参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(config);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>instance</code> 对应于前文。<br>第一个参数函数中的参数为 <code>config</code> ，并且在拦截操作完成后必须将 <code>config</code> 返回，否则无法完成请求。</p>
<p><img src="/2019/12/14/VueNote-3/2-2.png" alt="2-2"></p>
<p>常用于修改不符合服务器要求的信息，加入请求过渡动画，检查用户是否符合要求。</p>
</li>
<li><p>响应拦截</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  <span class="keyword">return</span> res.data;</span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>类似于请求拦截，一个响应成功拦截，一个响应失败拦截。</p>
<p>响应成功拦截也需要将结果再次返回。</p>
</li>
</ul>
<h3 id="③-webpack-别名配置"><a href="#③-webpack-别名配置" class="headerlink" title="③ webpack 别名配置"></a>③ <code>webpack</code> 别名配置</h3><h4 id="3-1-alias-配置无法生效问题"><a href="#3-1-alias-配置无法生效问题" class="headerlink" title="3.1 alias 配置无法生效问题"></a>3.1 <code>alias</code> 配置无法生效问题</h4><p>在试图给项目路径配置别名时，发现无论怎样改都会报错提示找不到组件。</p>
<p>上网查了一下后发现，应该是在执行 <code>npm run dev</code> 时，<code>webpack.base.conf.js</code> 文件中的配置只会在指令执行时生效，后续修改的话需要再次执行命令来生效。</p>
<h4 id="3-2-alias-使用注意点"><a href="#3-2-alias-使用注意点" class="headerlink" title="3.2 alias 使用注意点"></a>3.2 <code>alias</code> 使用注意点</h4><p>在 <code>script</code> 标签中使用 <code>import</code> 导入时可以直接使用别名，在 <code>template</code> 标签中对 <code>img</code> 之类的 <code>src</code> 路径需要在开始处添加 <code>~</code> 符号指示 <code>html</code> 标签中的别名使用。</p>
<h3 id="④-Error-in-render-问题记录"><a href="#④-Error-in-render-问题记录" class="headerlink" title="④ Error in render 问题记录"></a>④ <code>Error in render</code> 问题记录</h3><h4 id="4-1-问题描述"><a href="#4-1-问题描述" class="headerlink" title="4.1 问题描述"></a>4.1 问题描述</h4><p>在写 <code>Python</code> 比赛题目试图混学分时，写数据可视化收尾环节出现了非常多问题。浏览器控制台不停地报错，显示为</p>
<p><img src="/2019/12/14/VueNote-3/20190209195753429.png" alt="img"></p>
<p>找不到问题出处，查了一番发现有人提到 <code>error in render</code> 表示在渲染部分出了问题，应该去找模板的问题。排查一番确实是模块处的循环部分出了问题。</p>
<h3 id="⑤-Vue-项目部署问题记录"><a href="#⑤-Vue-项目部署问题记录" class="headerlink" title="⑤ Vue 项目部署问题记录"></a>⑤ <code>Vue</code> 项目部署问题记录</h3><h4 id="5-1-打包后路径问题"><a href="#5-1-打包后路径问题" class="headerlink" title="5.1 打包后路径问题"></a>5.1 打包后路径问题</h4><p>同样是那个 <code>Python</code> 比赛，写完前端部分后打包想做一个预览，把资源都放到服务器网站根目录发现并没有问题。</p>
<p><img src="/2019/12/14/VueNote-3/image-20200508094542121.png" alt="image-20200508094542121"></p>
<p><img src="/2019/12/14/VueNote-3/image-20200508094605218.png" alt="image-20200508094605218"></p>
<p><img src="/2019/12/14/VueNote-3/image-20200508094618992.png" alt="image-20200508094618992"></p>
<p>而在 <code>github pages</code> 部署以及本地打开打包后文件都会出现静态资源访问不到的情况。</p>
<p>本地静态资源正确路径👇</p>
<p><img src="/2019/12/14/VueNote-3/image-20200508094721461.png" alt="image-20200508094721461"></p>
<p>本地静态资源错误路径👇</p>
<p><img src="/2019/12/14/VueNote-3/image-20200508094753038.png" alt="image-20200508094753038"></p>
<p><code>github pages</code> 访问问题也差不多。</p>
<p>一开始的问题是 <code>js</code> 和 <code>css</code> 文件也无法访问，因为使用的都是绝对路径。在项目访问时存在子目录就会出现问题。</p>
<p>在 <code>Vue</code> 项目内配置 <code>vue.config.js</code> 文件时</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'./'</span>:<span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当环境为生产环境时，使用相对路径。但这样操作后依然只有 <code>js</code> <code>css</code> 文件生效，我放在 <code>public</code> 文件下的 <code>data</code> 文件依然无法访问到。</p>
<p>仔细观察两处文件引用的方法，发现在引用 <code>css</code> 时使用的是相对路径，引用 <code>json</code> 文件时用的是绝对路径且是根目录起。</p>
<p>因为了解到 <code>vue</code> 项目最后打包的文件是在 <code>public</code> 目录运行的，即使是本地运行时也是，那么就尝试把绝对路径修改为相对路径。</p>
<p>修改完后观察请求路径，已经没有问题，但是依然无法请求成功。看了一下控制台报错消息，可以发现是因为跨域问题。</p>
<p>本地文件访问没有办法解决，尝试放到 <code>github pages</code> 来试验以及在服务器进行子目录的试验。</p>
<h4 id="5-2-减少打包后-chunk-js-文件的大小"><a href="#5-2-减少打包后-chunk-js-文件的大小" class="headerlink" title="5.2 减少打包后 chunk.js 文件的大小"></a>5.2 减少打包后 <code>chunk.js</code> 文件的大小</h4><p>当我尝试打开 <code>github pages</code> 上的项目时，发现速度慢的离谱。</p>
<p>除去访问 <code>github</code> 本身带来的慢速以外，我检查了一下 <code>network</code> 发现有一个 <code>js</code> 文件请求了一分钟还没有请求完，在资源管理器里查看了一下这个文件的大小，足足有 1000 多 <code>k</code> ，于是我开始尝试减少这部分的大小。</p>
<p>大概原因是打包的模块太多太大，但我的这个项目依赖的模块并不多，应当是某个模块太大。我随便翻了一下 <code>chunk</code> 这个文件，就会发现许多与 <code>echarts</code> 相关的内容。于是准备减轻这个模块引起的负担。</p>
<p>首先，在 <code>index.html</code> 中引用需要的模块 <code>cdn</code> 链接。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/echarts/4.7.0/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>vue.config.js</code> 中进行配置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;  </span><br><span class="line">  configureWebpack: &#123;    </span><br><span class="line">    externals: &#123;</span><br><span class="line">      <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">      <span class="string">'echarts'</span>: <span class="string">'echarts'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事实上这个部分应该怎么写我都不是很清楚，但这样子就可以成功了。</p>
<p>然后再 <code>push</code> 到 <code>github</code> 上，打开 <code>github pages</code> 就会发现可以大大提速。</p>
<p>且前面的路径问题也已经解决。</p>
<p>观察了一下请求列表，发现可优化的点。</p>
<ul>
<li>多次请求 <code>data.json</code> 文件，可以把请求一次化，将数据放在 <code>vuex</code> 中。</li>
<li>其余模块也可能带来影响。</li>
<li>背景图片的请求时间较长，可以考虑压缩图片。</li>
</ul>
<h4 id="5-3-单页面应用在子目录路由跳转的问题"><a href="#5-3-单页面应用在子目录路由跳转的问题" class="headerlink" title="5.3 单页面应用在子目录路由跳转的问题"></a>5.3 单页面应用在子目录路由跳转的问题</h4><p>写另一个单页面应用的时候发现了问题，通过上面的经验，已经在项目配置文件中写好了基本路径为相对路径。</p>
<p>但在我把项目放进服务器根网站的子目录 <code>/ask</code> 时出现了路由跳转的问题。</p>
<p><code>Vue</code> 提供的只是前端路由，无法直接用来获取资源，我们的项目根路径还是 <code>&#39;/&#39;</code> ，但访问 <code>ip/ask</code> 时无法正确的跳转路由。</p>
<p>原先的设定是访问 <code>&#39;/&#39;</code> 时重定向到 <code>/question</code> ，但此时我们访问的其实是 <code>/ask</code> ，查询了一下发现 <code>vue-router</code> 可以设置一个 <code>base</code> 路径，将路由跳转加上一个基础 <code>/ask</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes,</span><br><span class="line">  base: <span class="string">'/ask'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>那么再次打包部署到服务器，就可以正常访问了。</p>
<p>访问 <code>ip/ask</code> 时可以正确的重定向到 <code>ip/ask/question</code> ，并且其他部分的跳转也没有问题。</p>
<h4 id="5-4-多页面应用问题"><a href="#5-4-多页面应用问题" class="headerlink" title="5.4 多页面应用问题"></a>5.4 多页面应用问题</h4><p>接触到一个多页面应用项目，很懵逼。把配置文件捋了一遍后，发现使用了 <code>glob</code> 模块，实际上，这个项目的运行路径下就是存在多个页面，想要去哪个页面，直接打开这个 <code>html</code> 页面即可。</p>
<h4 id="5-5-父子组件传值问题"><a href="#5-5-父子组件传值问题" class="headerlink" title="5.5 父子组件传值问题"></a>5.5 父子组件传值问题</h4><p>在写项目的过程中，有两个组件内的内容高度重复，于是准备抽出来写一个组件。</p>
<p>父组件传值给子组件，而在我写的子组件中，传值是需要被修改的。而这个行为官方是不推荐的，那么就在 <code>data</code> 域中新建两个变量，但是总是出现无法正确赋值的情况。</p>
<p>后得知是因为 <code>data</code> 域只会初始化一次，那么我们需要使用 <code>watch</code> 来监听 <code>props</code> 内需要的参数，然后去赋值给 <code>data</code> 域。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueNote-2</title>
    <url>/2019/12/12/VueNote-2/</url>
    <content><![CDATA[<h1 id="Vue-笔记-②"><a href="#Vue-笔记-②" class="headerlink" title="Vue 笔记 ②"></a>Vue 笔记 ②</h1><h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="①父子组件传值"><a href="#①父子组件传值" class="headerlink" title="①父子组件传值"></a>①父子组件传值</h3><h4 id="1-1-子组件访问问题"><a href="#1-1-子组件访问问题" class="headerlink" title="1.1 子组件访问问题"></a>1.1 子组件访问问题</h4><p>在 <code>vue</code> 中，子组件访问父组件的值是需要经过特定的操作的。<br>我很好奇，为什么不能够直接访问，按理说，嵌套关系是应该可以访问到父作用域的值的。</p>
<a id="more"></a>

<p>我做了一点尝试。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cmp</span>&gt;</span><span class="tag">&lt;/<span class="name">cmp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cmp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>efg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">Vue.component(<span class="string">'cmp'</span>,&#123;</span></span><br><span class="line"><span class="actionscript">  template: <span class="string">'#cmp'</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line"><span class="actionscript">    msg: <span class="string">'abc'</span>,</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/12/12/VueNote-2/1-1.png" alt="1-1"><br>此时直接报错。错误信息显示，无法寻找到 <code>msg</code> 属性或方法，也就是说，在一个组件中使用一个 <code>data</code> 中的数据时，会默认寻找自身内部的 <code>data</code>。<br>可以理解成，使用数据时，会默认寻找 <code>this.msg</code> 。如果想要访问父组件中的数据时，需要能够找到父组件实例的引用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cmp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">"handle"</span>&gt;</span>abcd<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>efg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      msg: <span class="string">'abc'</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handle()&#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(vm.msg);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以直接指定对应的 <code>vue</code> 实例来调用 <code>msg</code>数据。但这样的话，太过于死板且没有特别大意义。</li>
<li>可以通过实例对象的 <code>$children</code> <code>$parent</code> 属性来获取父子组件。</li>
</ul>
<h4 id="1-2-props-中的-default-问题"><a href="#1-2-props-中的-default-问题" class="headerlink" title="1.2 props 中的 default 问题"></a>1.2 <code>props</code> 中的 <code>default</code> 问题</h4><p>在使用 <code>props</code> 传递数据的时候，可以设置数据的 <code>default</code> 属性，在某些版本上， <code>default</code> 为空数组或空对象时会报错，需要使用工厂函数返回空数组和对象。<br>搜了一下，找不到原理解释，其实不太理解为什么。</p>
<h4 id="1-3-父子组件相互传值案例"><a href="#1-3-父子组件相互传值案例" class="headerlink" title="1.3 父子组件相互传值案例"></a>1.3 父子组件相互传值案例</h4><p>这里有一个比较复杂的案例，看的时候觉得挺简单挺容易捋清楚的，自己手动写一下又懵了好久。</p>
<ul>
<li>实现子组件获取父组件的值，使用属性绑定加 <code>props</code> 获取。</li>
<li>实现子组件内部 <code>input</code> 元素和数据双向绑定</li>
<li>实现子组件内部数据更改影响父组件数据，使用 <code>this.$emit</code> 实现。</li>
<li>实现数据一的更改影响到数据二</li>
<li>实现数据二的更改影响到数据一<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cmp</span> <span class="attr">:cnum1</span>=<span class="string">"num1"</span> <span class="attr">:cnum2</span>=<span class="string">"num2"</span> @<span class="attr">num1change</span>=<span class="string">"num1change"</span> @<span class="attr">num2change</span>=<span class="string">"num2change"</span>&gt;</span><span class="tag">&lt;/<span class="name">cmp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"cmp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      props: &#123;&#123; cnum1 &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      data: &#123;&#123; dnum1 &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"dnum1"</span> @<span class="attr">input</span>=<span class="string">"num1input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      props: &#123;&#123; cnum2 &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      data: &#123;&#123; dnum2 &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"dnum2"</span> @<span class="attr">input</span>=<span class="string">"num2input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = &#123;<span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    num1: 1,</span><br><span class="line">    num2: 100,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    num1change(value)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.num1 = value;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    num2change(value)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.num2 = value;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    cmp: &#123;</span><br><span class="line"><span class="actionscript">      template: <span class="string">'#cmp'</span>,</span></span><br><span class="line"><span class="actionscript">      props: [<span class="string">'cnum1'</span>, <span class="string">'cnum2'</span>],</span></span><br><span class="line">      data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          dnum1: <span class="keyword">this</span>.cnum1,</span></span><br><span class="line"><span class="actionscript">          dnum2: <span class="keyword">this</span>.cnum2</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        num1input(event)&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.dnum1 = event.target.value;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.dnum2 = <span class="keyword">this</span>.dnum1 * <span class="number">100</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'num1change'</span>,<span class="keyword">this</span>.dnum1);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'num2change'</span>,<span class="keyword">this</span>.dnum2);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        num2input(event)&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.dnum2 = event.target.value;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.dnum1 = <span class="keyword">this</span>.dnum2 / <span class="number">100</span>;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'num2change'</span>,<span class="keyword">this</span>.dnum2);</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$emit(<span class="string">'num1change'</span>,<span class="keyword">this</span>.dnum1);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="②-vue-router-学习"><a href="#②-vue-router-学习" class="headerlink" title="② vue-router 学习"></a>② <code>vue-router</code> 学习</h3><h4 id="2-1-路由跳转问题"><a href="#2-1-路由跳转问题" class="headerlink" title="2.1 路由跳转问题"></a>2.1 路由跳转问题</h4><ul>
<li><p>配置 <code>vue-router</code> 的 <code>index.js</code> 文件中的 <code>vue-router</code> 实例对象时，除去 <code>routes</code> 数组外，还可以设置属性 <code>mode=history</code> 即可将浏览时 <code>url</code> 中的 <code>#</code> 去除。</p>
</li>
<li><p>在页面的组件跳转中， <code>router-link</code> 元素可以使用某些属性来配置，比如 <code>tag</code> 属性来设置最终渲染为什么元素， <code>replace</code> 属性设置该路由跳转方式为 <code>history.replaceState</code> ，代表不可通过浏览器的后退和前进来修改。</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"li"</span> <span class="attr">to</span>=<span class="string">"/home"</span> <span class="attr">replace</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">tag</span>=<span class="string">"li"</span> <span class="attr">to</span>=<span class="string">"/about"</span> <span class="attr">replace</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>可以使用代码替换 <code>router-link</code> 跳转，使用 <code>this.$router.push</code> 或是 <code>this.$router.replace</code> 来实现路由跳转。</p>
<blockquote>
<p>注意，不要跳过 <code>vue-router</code> 自己使用 <code>history</code> 一类的方法来实现路由跳转。</p>
</blockquote>
</li>
<li><p>可以在 <code>router-link</code> 标签上设置 <code>active-class</code> 属性替换 <code>active</code> 路由的类名，也可以在 <code>vue-router</code> 实例对象中设置 <code>linkActiveClass</code> 实现全局替换。</p>
</li>
</ul>
<h4 id="2-2-路由懒加载"><a href="#2-2-路由懒加载" class="headerlink" title="2.2 路由懒加载"></a>2.2 路由懒加载</h4><ul>
<li>想要使用路由懒加载，在 <code>vue-router</code> 实例对象中配置 <code>routes</code> 时，设置 <code>component</code> 时使用函数作为值，函数内部导入组件。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/Home'</span>)</span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/About'</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'@/components/User'</span>)</span><br></pre></td></tr></table></figure>

<p>​    然后使用对应的变量名为 <code>component</code> 的值。那么，打包后的 <code>js</code> 文件就会分成多份。</p>
<h4 id="2-3-router-push-等方法报错问题"><a href="#2-3-router-push-等方法报错问题" class="headerlink" title="2.3 $router.push 等方法报错问题"></a>2.3 <code>$router.push</code> 等方法报错问题</h4><p>学习的时候，尝试了路由跳转使用代码实现，结果在重复点击同一个路由指向元素的时候，控制台疯狂报错。</p>
<p><img src="/2019/12/12/VueNote-2/1-3.png" alt="1-3"></p>
<p>搜了很久很久解决方法，大致是低版本 <code>vue-router</code> 的一个 <code>bug</code> ，但我看了一下配置文件，说是我的这个版本已经修复了 <code>bug</code> 呀？我倒是没看出来哪里修复了… 删除重装 <code>node_modules</code> 也不顶用，还有个在 <code>router</code> 的 <code>index.js</code> 写一段代码的方法，我试了一把没用。(其实是有用的，只是我漏写了个方法)</p>
<p>翻了一下官方文档，写的 <code>emmmmmm</code> </p>
<p>然后又去翻 <code>github</code> 上的 <code>issues</code> ，确实有类似的问题，但是阅读能力实在捉急，只是看了个大概，有个补写捕获错误代码的我没看懂补写在哪儿，还有个在 <code>$router.push</code> 方法多写一个空的箭头函数作为参数的方法，确实解决了，但是不太懂为什么。估计我得去看看这几个函数的源码才能知道了。</p>
<p>最后又是一顿疯狂搜索，还是之前看到的旧方法，就在这个时候我突然顿悟。我的路由跳转选择的是 <code>replace</code> 方法而不是 <code>push</code>  。前文提到的那个在 <code>index.js</code> 加代码的操作对我的组件根本不生效，因为我压根没配置 <code>replace</code> 方法 😂</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> routerPush = Router.prototype.push;</span><br><span class="line"><span class="keyword">const</span> routerReplace = Router.prototype.replace;</span><br><span class="line">Router.prototype.push = <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">location</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> routerPush.call(<span class="keyword">this</span>, location).catch(<span class="function"><span class="params">error</span> =&gt;</span> error)</span><br><span class="line">&#125;</span><br><span class="line">Router.prototype.replace = <span class="function"><span class="keyword">function</span> <span class="title">replace</span>(<span class="params">location</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> routerReplace.call(<span class="keyword">this</span>, location).catch(<span class="function"><span class="params">error</span> =&gt;</span> error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概就是改写了原型链上的 <code>push</code> 方法和 <code>replace</code> 方法，一个是绑定了 <code>this</code> ，还有一个是捕获了错误。</p>
<p>问题解决。</p>
<blockquote>
<p>日后再来细致研究这个办法。</p>
</blockquote>
<h4 id="2-4-keep-alive-与一次创建"><a href="#2-4-keep-alive-与一次创建" class="headerlink" title="2.4 keep-alive 与一次创建"></a>2.4 <code>keep-alive</code> 与一次创建</h4><p>在一般情况下，一个子组件在被路由跳转进入和离开的时候，会被重复创建和销毁，可以通过 <code>created</code> 和 <code>destroyed</code> 钩子函数进行验证。</p>
<p>如果想要使一个组件被保持，可以使用 <code>keep-alive</code> 标签包裹 <code>router-view</code> 来实现仅一次创建。</p>
<p>同时，使用了 <code>keep-alive</code> 标签后，被包裹的子组件就可以调用 <code>activated</code> 和 <code>deactivated</code> 钩子函数来表示当前路由是否活跃。</p>
<p>若是想要排除某个子组件，想要其重复创建和销毁，可以设置 <code>keep-alive</code> 标签的属性 <code>exclude</code> 为该子组件的 <code>name</code> 属性。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VueNote-1</title>
    <url>/2019/12/09/VueNote-1/</url>
    <content><![CDATA[<h1 id="Vue-笔记-①"><a href="#Vue-笔记-①" class="headerlink" title="Vue 笔记 ①"></a>Vue 笔记 ①</h1><h3 id="🤪碎碎念"><a href="#🤪碎碎念" class="headerlink" title="🤪碎碎念"></a>🤪碎碎念</h3><blockquote>
<p>说好假期再看 <code>vue</code> 的，结果还是没忍住哈…</p>
</blockquote>
<a id="more"></a>
<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="①-实现点击元素变色效果"><a href="#①-实现点击元素变色效果" class="headerlink" title="① 实现点击元素变色效果"></a>① 实现点击元素变色效果</h3><p><img src="/2019/12/09/VueNote-1/20191209_220854.gif" alt="点击变色演示"></p>
<p>一开始的要求就是使用 <code>data</code> 的数组来做数据然后渲染列表并实现点击某个元素时，某个元素变色。</p>
<p>仔细思考一下，将过程拆分开。</p>
<ol>
<li>首先是使用 <code>v-for</code> 指令循环生成元素。</li>
<li>然后考虑给每个元素绑定 <code>click</code> 事件。</li>
<li>点击时给当前点击元素添加指定类名同时移除其他所有元素的类名。</li>
</ol>
<p>然后就开始蒙圈了，应该怎么给数组数据和类名动态对应呢？<br>纠结了半天，用了对象的方法<br><img src="/2019/12/09/VueNote-1/pic2.png" alt="对象数据解决"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(value,key, index) in list"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"value?'red':''"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"handle(key)"</span>&gt;</span>&#123;&#123; key &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      list:&#123;</span><br><span class="line"><span class="actionscript">        <span class="string">'aaaaaaaaaa'</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'bbbbbbbbbbbb'</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'cccccccccccccc'</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'dddddddddddddddd'</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'eeeeeeeeeeeeeeeeee'</span>:<span class="literal">false</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handle(index)&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> list = <span class="keyword">this</span>.list;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> list)&#123;</span></span><br><span class="line"><span class="actionscript">          list[i]=<span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        list[index]=<span class="literal">true</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后兜兜转转半天看到别人的解决方法，瞬间感觉自己是个 <code>**</code> 。<br><img src="/2019/12/09/VueNote-1/pic1.png" alt="数组解决方法"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">"index"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">"&#123;'red':currentIndex==index&#125;"</span> </span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">"handle(index)"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      list:[</span><br><span class="line"><span class="actionscript">        <span class="string">'aaaaaaaaaa'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'bbbbbbbbbbbb'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'cccccccccccccc'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'dddddddddddddddd'</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="string">'eeeeeeeeeeeeeeeeee'</span>,</span></span><br><span class="line">      ],</span><br><span class="line">      currentIndex: 0,</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handle(index)&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.currentIndex=index;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>只需要一个记录当前应该高亮的索引值，渲染元素时作为类名是否添加的判断条件，然后点击事件中动态修改这个索引值就可以。</p>
<h3 id="②-动态切换渲染的底层原理"><a href="#②-动态切换渲染的底层原理" class="headerlink" title="② 动态切换渲染的底层原理"></a>② 动态切换渲染的底层原理</h3><blockquote>
<p>先给出一个小例子</p>
</blockquote>
<p><img src="/2019/12/09/VueNote-1/20191210_174526.gif" alt="动态切换演示"><br>例子很简单，就是根据 <code>data</code> 的一个 <code>flag</code> 值动态切换元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"flag"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"use-phone"</span>&gt;</span>用户手机号<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"use-phone"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"use-email"</span>&gt;</span>用户邮箱<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"use-email"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"flag=!flag;"</span>&gt;</span>切换类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      flag: <span class="literal">true</span>,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是在切换的时候会注意到，输入的 <code>value</code> 值在元素切换的时候被保留了。<br>原因是 <code>vue</code> 底层的虚拟 <code>dom</code> 在更新时会比对新旧元素的改变，尽可能的减少修改的范围。<br>新旧元素除了 <code>id</code> 值以外都是相同的。因此， <code>input</code> 组件的 <code>value</code> 值被保留。<br>专业术语应该是 <code>input</code> 和 <code>label</code> 被复用。</p>
<h3 id="③-购物车实例"><a href="#③-购物车实例" class="headerlink" title="③ 购物车实例"></a>③ 购物车实例</h3><blockquote>
<p>先给出演示<br><img src="/2019/12/09/VueNote-1/20191210_192637.gif" alt="购物车实例演示"></p>
</blockquote>
<p>一个很简单的购物车例子，综合运用了 <code>v-for</code> <code>v-if</code> <code>v-else</code> <code>v-bind</code> <code>v-on</code> <code>computed</code> <code>methods</code> 等指令。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  table &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e9e9e9</span>;</span></span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">    border-spacing: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  th, td &#123;</span><br><span class="line">    padding: 8px 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e9e9e9</span>;</span></span><br><span class="line">    text-align: left;</span><br><span class="line">  &#125;</span><br><span class="line">  th &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#f7f7f7</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#5c6b77</span>;</span></span><br><span class="line">    font-weight: 600;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">v-if</span>=<span class="string">"books.length"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>书籍名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>出版日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>数量<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in books"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.date &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.price | showPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"decrement(index)"</span> <span class="attr">:disabled</span>=<span class="string">"item.count&lt;=1"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.count &#125;&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increment(index)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"remove(index)"</span>&gt;</span>移除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>购物车为空<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>总价格 &#123;&#123; totalPrice &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">  el: <span class="string">'#app'</span>,</span></span><br><span class="line">  data: &#123;  </span><br><span class="line">    books: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: 1,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'《算法导论》'</span>,</span></span><br><span class="line"><span class="actionscript">        date: <span class="string">'2006-9'</span>,</span></span><br><span class="line">        price: 85.00,</span><br><span class="line">        count: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 2,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'《UNIX编程艺术》'</span>,</span></span><br><span class="line"><span class="actionscript">        date: <span class="string">'2006-2'</span>,</span></span><br><span class="line">        price: 59.00,</span><br><span class="line">        count: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 3,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'《编程珠玑》'</span>,</span></span><br><span class="line"><span class="actionscript">        date: <span class="string">'2008-10'</span>,</span></span><br><span class="line">        price: 39.00,</span><br><span class="line">        count: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 4,</span><br><span class="line"><span class="actionscript">        name: <span class="string">'《代码大全》'</span>,</span></span><br><span class="line"><span class="actionscript">        date: <span class="string">'2006-3'</span>,</span></span><br><span class="line">        price: 125.00,</span><br><span class="line">        count: 1</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;        </span><br><span class="line">    increment(index)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.books[index].count++;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(index)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.books[index].count--;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    remove(index)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.books.splice(index,<span class="number">1</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    showPrice(price)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="string">'￥'</span>+ price.toFixed(<span class="number">2</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    totalPrice()&#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.books.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">        sum+=<span class="keyword">this</span>.books[i].price * <span class="keyword">this</span>.books[i].count;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> sum;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>通过指令来实现各种操作，最终都将改变体现到 <code>data</code> 中的 <code>books</code> 数组，页面内容也会相应改变。<br>在对价格渲染时，因为数据的原始性，我们需要对数据进行一定的修改，因为这种修改在页面中存在多处，所以写了一个 <code>filter</code> 过滤器来实现。</p>
<p>在对于总价格的累加处，有很多实现方式，列举一下。</p>
<ol>
<li>原始的 <code>for</code> 循环，遍历数组，计算每一项对应的总价格并累加。</li>
<li>使用 <code>for-in</code> 循环<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> totalPrice = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>.books)&#123;</span><br><span class="line">  <span class="keyword">const</span> book = <span class="keyword">this</span>.books[i];</span><br><span class="line">  totalPrice += book.price * books.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalPrice;</span><br></pre></td></tr></table></figure></li>
<li>使用 <code>for-of</code> 循环<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> totalPrice = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.books)&#123;</span><br><span class="line">  totalPrice += item.price * item.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> totalPrice;</span><br></pre></td></tr></table></figure></li>
<li>使用高阶函数 <code>reduce</code></li>
</ol>
<h3 id="④-vue-双向绑定原理"><a href="#④-vue-双向绑定原理" class="headerlink" title="④ vue 双向绑定原理"></a>④ <code>vue</code> 双向绑定原理</h3><p><code>vue</code> 中的 <code>v-model</code> 指令实现了数据的双向绑定。我们可以通过另外两个指令来实现双向绑定。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'a'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2019/12/09/VueNote-1/20200304_173734.gif" alt="数据双向绑定演示"></p>
<p><code>v-on</code> + <code>v-bind</code> 配合产生数据双向绑定效果。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"message"</span> @<span class="attr">input</span>=<span class="string">"valueChange"</span>&gt;</span></span><br><span class="line">  &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="actionscript">      message: <span class="string">'a'</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      valueChange(e)&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.message = e.target.value;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="⑤-vue-响应式注意点"><a href="#⑤-vue-响应式注意点" class="headerlink" title="⑤ vue 响应式注意点"></a>⑤ <code>vue</code> 响应式注意点</h3><p><code>vue</code> 实例中 <code>data</code> 中的数组响应式存在于七个方法中， <code>push</code> <code>pop</code> <code>splice</code> <code>shift</code> <code>unshift</code> <code>sort</code> <code>reverse</code> ，除此之外可以使用 <code>vue</code> 官方提供的 <code>set</code> <code>delete</code> 方法来响应式更新数组或对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.set(state.info, <span class="string">'keyOrIndex'</span>, <span class="string">'value'</span>)</span><br><span class="line">Vue.delete(state.info, <span class="string">'keyOrIndex'</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>简易计算器</title>
    <url>/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<h1 id="简易计算器制作-优化过程"><a href="#简易计算器制作-优化过程" class="headerlink" title="简易计算器制作+优化过程"></a>简易计算器制作+优化过程</h1><h3 id="🤪碎碎念"><a href="#🤪碎碎念" class="headerlink" title="🤪碎碎念"></a>🤪碎碎念</h3><blockquote>
<p>其实学了蛮久 <code>js</code> 的，但是一直没有尝试过用 <code>js</code> 去动手写一些小东西。<br>碰巧在某个学习平台看到了计算器的制作，顺手记录一下。</p>
</blockquote>
<a id="more"></a>
<h3 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h3><p>简单到令人发指的初始简陋版本👇</p>
<blockquote>
<p>忘记粘源码了，第一部分全是图片真的很搞笑。</p>
</blockquote>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A81.png" alt></p>
<p><code>js</code> 代码也是一样的粗糙随意。</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A82.png" alt></p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A83.png" alt></p>
<p>效果演示：</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A84.png" alt><br><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A85.png" alt><br><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A86.png" alt><br><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A87.png" alt></p>
<p>然后就是对 <code>js</code> 代码的优化。</p>
<ol>
<li><p>将重复代码抽出来包装成为独立的函数。</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A88.png" alt></p>
</li>
<li><p>将四个事件绑定集合到一个循环内完成。</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A810.png" alt></p>
<blockquote>
<p>顺便，我可真是个手误小能手。</p>
</blockquote>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A89.png" alt></p>
</li>
</ol>
<h3 id="💻美化版计算器-以下才是正文系列"><a href="#💻美化版计算器-以下才是正文系列" class="headerlink" title="💻美化版计算器(以下才是正文系列)"></a>💻美化版计算器<del>(以下才是正文系列)</del></h3><p>首先是 <code>html</code> 和 <code>css</code> 部分，差不多是照搬。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>./简易计算器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      *&#123;</span><br><span class="line">        border: none;</span><br><span class="line">        font-family: 'Open Sans', sans-serif;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">      &#125;</span><br><span class="line">      h1&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#495678</span>;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">        margin-top: 20px;</span><br><span class="line">        padding-top: 50px;</span><br><span class="line">        display: block;</span><br><span class="line">        text-align: center;</span><br><span class="line">        text-decoration: none;</span><br><span class="line">      &#125;</span><br><span class="line">      form&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#495678</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 4<span class="selector-tag">px</span> 4<span class="selector-tag">px</span> <span class="selector-id">#3d4a65</span>;</span></span><br><span class="line">        margin: 40px auto;</span><br><span class="line">        padding: 40px 0 30px 40px;</span><br><span class="line">        width: 280px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line">        outline: none;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">        height: 45px;</span><br><span class="line">        margin: 5px 0 5px 10px;</span><br><span class="line">        width: 45px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.btn</span><span class="selector-pseudo">:first-child</span> &#123;</span></span><br><span class="line">        margin: 5px 0 5px 10px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.btn</span>, <span class="selector-id">#display</span>, <span class="selector-tag">form</span> &#123;</span></span><br><span class="line">        border-radius: 25px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-id">#display</span> &#123;</span></span><br><span class="line">        outline: none;</span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#98d1dc</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 6<span class="selector-tag">px</span> 6<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-id">#3facc0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#dededc</span>;</span></span><br><span class="line">        font-size: 20px;</span><br><span class="line">        height: 47px;</span><br><span class="line">        text-align: right;</span><br><span class="line">        width: 115px;</span><br><span class="line">        padding-right: 10px;</span><br><span class="line">        margin-left: 5px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.number</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#72778b</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 5<span class="selector-tag">px</span> <span class="selector-id">#5f6680</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#dededc</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.number</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> <span class="selector-id">#5f6680</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.operator</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background</span>: <span class="selector-id">#dededc</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 5<span class="selector-tag">px</span> <span class="selector-id">#bebebe</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#72778b</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.operator</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> <span class="selector-id">#bebebe</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.other</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#e3844c</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 5<span class="selector-tag">px</span> <span class="selector-id">#e76a3d</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#dededc</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.other</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">box-shadow</span>: 0 2<span class="selector-tag">px</span> <span class="selector-id">#e76a3d</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML, CSS, JavaScript 计算器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"clear"</span> <span class="attr">class</span>=<span class="string">"btn other"</span> <span class="attr">value</span>=<span class="string">"C"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"delete"</span> <span class="attr">class</span>=<span class="string">"btn other"</span> <span class="attr">value</span>=<span class="string">"D"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"display"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"8"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"9"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn operator toget"</span> <span class="attr">value</span>=<span class="string">"+"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"6"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn operator toget"</span> <span class="attr">value</span>=<span class="string">"*"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn operator toget"</span> <span class="attr">value</span>=<span class="string">"-"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn number toget"</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn operator toget"</span> <span class="attr">value</span>=<span class="string">"."</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn operator toget"</span> <span class="attr">value</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"cal"</span> <span class="attr">class</span>=<span class="string">"btn other"</span> <span class="attr">value</span>=<span class="string">"="</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"time"</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/./简易计算器.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>样式图：</p>
<p><img src="/2019/11/07/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A811.png" alt></p>
<p>然后先是简单粗暴的 <code>js</code> 代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//display框显示更改。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> shownums = <span class="built_in">document</span>.getElementById(<span class="string">"display"</span>);</span><br><span class="line">  shownums.value+=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//清空显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> shownums = <span class="built_in">document</span>.getElementById(<span class="string">"display"</span>);</span><br><span class="line">  shownums.value=<span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除一个输入函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backspace</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> shownums = <span class="built_in">document</span>.getElementById(<span class="string">"display"</span>);</span><br><span class="line">  shownums.value=shownums.value.substring(<span class="number">0</span>,shownums.value.length<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为所有 num 和 operator 的 button 添加点击监听事件</span></span><br><span class="line"><span class="keyword">var</span> Btns = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"toget"</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;Btns.length;i++)&#123;</span><br><span class="line">  Btns[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">get</span>(this.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先是前面几个显示部分的函数，都很简单。不过我发现我老是忘记字符串是无法更改的，而且记不清数组和字符串各自的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到清除按钮绑定点击监听事件</span></span><br><span class="line"><span class="keyword">var</span> clearBtn = <span class="built_in">document</span>.getElementById(<span class="string">"clear"</span>);</span><br><span class="line">clearBtn.onclick=clear;</span><br><span class="line"><span class="comment">//删除一个输入的绑定监听</span></span><br><span class="line"><span class="keyword">var</span> deleteBtn = <span class="built_in">document</span>.getElementById(<span class="string">"delete"</span>);</span><br><span class="line">deleteBtn.onclick=backspace;</span><br><span class="line"><span class="comment">//计算结果的点击绑定监听</span></span><br><span class="line"><span class="keyword">var</span> re = <span class="built_in">document</span>.getElementById(<span class="string">"cal"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculates</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result=<span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">document</span>.getElementById(<span class="string">"display"</span>).value;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"display"</span>).value=<span class="built_in">eval</span>(result);</span><br><span class="line">&#125;</span><br><span class="line">re.onclick=calculates;</span><br></pre></td></tr></table></figure>

<p>然后到了这里，写着写着懵了一下。本来以为要摩拳擦掌自己写计算的函数，怎么怎么取符号，结果直接一个 <code>eval</code> 函数砸了上来。 emmmmm， 我一定是沉浸在写 <code>C</code> 的时候，很多东西都是自己动手去写。现在写别的语言，有了很多内置的函数很方便，但是我总不记得。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//时间展示</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTime</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">var</span> y = today.getFullYear();</span><br><span class="line">  <span class="keyword">var</span> M = today.getMonth()+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> d = today.getDate();</span><br><span class="line">  <span class="keyword">var</span> h = today.getHours();</span><br><span class="line">  <span class="keyword">var</span> m = today.getMinutes();</span><br><span class="line">  <span class="keyword">var</span> s = today.getSeconds();</span><br><span class="line">  m=checkTime(m);</span><br><span class="line">  s=checkTime(s);</span><br><span class="line">  <span class="keyword">var</span> week=today.getDay();</span><br><span class="line">  <span class="keyword">var</span> w = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"星期天"</span>,<span class="string">"星期一"</span>,<span class="string">"星期二"</span>,<span class="string">"星期三"</span>,<span class="string">"星期四"</span>,<span class="string">"星期五"</span>,<span class="string">"星期六"</span>);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"time"</span>).innerHTML=y+<span class="string">"年"</span>+M+<span class="string">"月"</span>+d+<span class="string">"日"</span>+<span class="string">"&lt;/br&gt;"</span>+h+<span class="string">":"</span>+m+<span class="string">":"</span>+s+<span class="string">" "</span>+w[week];</span><br><span class="line">  setTimeout(<span class="string">"showTime()"</span>,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkTime</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(i&lt;<span class="number">10</span>)&#123;</span><br><span class="line">    i=<span class="string">"0"</span>+i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  showTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后是一个时间展示，这不禁让我想起了上周遇到的坑。<br><code>input</code> 中 <code>type</code> 为 <code>date</code> 的那个元素 <code>value</code> 值的接收是有格式要求的，比如日的数字就要求是两位数。</p>
<p>我写了一个自动获取当天日期的函数，在我自己测试的时候，是在二十几号，都没有出现过问题。别人在四五号的时候一测，就遇到 <code>bug</code> 了。😂</p>
<h3 id="💡总结"><a href="#💡总结" class="headerlink" title="💡总结"></a>💡总结</h3><p>一个简单的计算器就差不多是这样了。写完一看好像也没有什么特别的东西……唯一记得的大概是这个计算器的样式很好看， <code>eval</code> 让我眼前一亮(?)</p>
<blockquote>
<p>顺便记一下，要去了解一下 <code>setTimeout</code> 和 <code>setInterval</code> 的异同。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
        <tag>js</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>CSStip</title>
    <url>/2019/10/27/css%E5%B0%8Ftip/</url>
    <content><![CDATA[<h1 id="一些关于CSS的tip"><a href="#一些关于CSS的tip" class="headerlink" title="一些关于CSS的tip"></a>一些关于CSS的tip</h1><ul>
<li><code>margin</code> 值的百分比是相对于父元素的 <code>width</code></li>
<li>三角形的制作利用 <code>width</code> <code>height</code> 为0 然后设置 <code>border</code></li>
<li>气泡的制作<br><img src="/2019/10/27/css%E5%B0%8Ftip/bubble.png" alt="bubble"></li>
</ul>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bubble"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle common"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cover common"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="comment">&lt;!-- 用来覆盖的倒三角 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.bubble</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#FFB5BF</span>; </span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.common</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; </span><br><span class="line">  <span class="attribute">position</span>: absolute;      <span class="comment">/* 使用绝对定位 */</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, 0);  <span class="comment">/* 水平居中 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">20px</span> solid <span class="number">#FFB5BF</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.cover</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">13px</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">20px</span> solid <span class="number">#94E8FF</span>;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">20px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>loading</code> 效果制作利用 <code>CSS3</code> 的动画<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.loading</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#FFB5BF</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.loading</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: loading-animation <span class="number">1.2s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> loading-animation &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>行级元素的高度取决于文体字体大小。</li>
<li>文字隐藏的方法:<ul>
<li><code>height: 0</code>+<code>padding</code>撑出背景图片，然后设置<code>overflow: hidden</code></li>
<li><code>text-indent: -10000</code></li>
<li>将文字包入<code>span</code>元素中，然后<code>display: none</code></li>
</ul>
</li>
<li><code>a</code> 标签的样式需要遵守 <code>link</code> <code>visited</code> <code>hover</code> <code>active</code> 顺序，并且在 <code>href</code> 不填入值的时候， <code>a:link</code> 不起作用。</li>
<li>浏览器将标签间的换行空白渲染为一个空格导致部分元素间出现间隙解决方法：<ul>
<li>编写页面时不换行。</li>
<li>容器的 <code>font-size</code> 设置为 <code>0</code>.</li>
<li>我们需要将li内的字符间隔设为默认。<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">ul</span>&#123;<span class="attribute">letter-spacing</span>: -<span class="number">4px</span>;&#125;</span><br></pre></td></tr></table></figure>
之后记得设置li内字符间隔<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;<span class="attribute">letter-spacing</span>: normal;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>div里嵌套了 <code>img</code> 底部会出现白边<ul>
<li>因为 <code>img</code> 默认是按基线 <code>(baseline)</code> 对齐的。</li>
<li>要去掉空格可以使用 <code>vertical-align: bottom</code> 或将 <code>img</code> 标签变为块级元素。</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>line-height</code> 仅在值为纯数字时，才会使后代继承该比值，否则继承计算后的结果。</p>
</li>
<li><p><code>p</code> 元素不能包含 <code>div</code> 元素。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>字体颜色闪现问题</title>
    <url>/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="transition属性页面加载a元素字体颜色闪现问题"><a href="#transition属性页面加载a元素字体颜色闪现问题" class="headerlink" title="transition属性页面加载a元素字体颜色闪现问题"></a>transition属性页面加载a元素字体颜色闪现问题</h3><blockquote>
<p>在写需求的时候，对 <code>index.html</code> 页面的按钮做了 <code>transition</code> 效果来使样式展示更平滑。</p>
</blockquote>
<a id="more"></a>
<p>代码如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main-area</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">54px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: background-color .<span class="number">5s</span> ease,</span><br><span class="line">  color .<span class="number">5s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-area</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#3399FF</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后发现想要的效果确实可以做到，<strong>但是</strong>每次打开页面的时候都可以看到a元素的字体颜色从 <em>各种奇怪的颜色</em> 闪现为设定的颜色。</p>
<p>研究了一会儿，看到 <code>transition</code> 的一个属性：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">transition-property : none | all | [&lt;IDENT&gt;][','&lt;IDENT&gt;]* ;</span><br></pre></td></tr></table></figure>

<p><code>transition-property</code> 是用来指定当元素其中一个属性改变时执行 <code>transition</code> 效果，其中 <code>none</code> 没有属性改变；<code>all</code> 所有属性都改变，它也是默认值；<code>indent</code> 可以填写元素属性名。</p>
<blockquote>
<p>👆以上来自某教程网站</p>
</blockquote>
<p>然后打开 F12 看了一下 对应位置的 <code>a</code> 元素的所有 <code>color</code> 属性。</p>
<p><img src="/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/transition.png" alt="transition"><br>就可以看到在重置样式表 <code>reset.css</code> 中的 <code>color</code> 设置为继承值。<br>取消这个样式，就可以看到 <code>a</code> 的 <code>color</code> 变为我们看到的闪现前的颜色。<br><img src="/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/transition1.png" alt="transition1"><br><img src="/2019/10/22/%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E9%97%AA%E7%8E%B0%E9%97%AE%E9%A2%98/transition2.png" alt="transition2"></p>
<p>按我的理解也就是，浏览器记住了这个覆盖过程，然后把它展示为动画效果，那我们应该要想办法把这个覆盖 <code>a</code> 默认颜色的过程提前到 <code>transition</code> 没有记住的时候。</p>
<p>我的做法是在 <code>head</code> 标签中写入 <code>style</code> 直接覆盖 <code>a</code> 的 <code>color</code> 属性。</p>
<p>其余解决方法待后续研究。<del>大概不会有后续</del></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS继承</title>
    <url>/2019/10/22/CSS%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h3 id="🤪碎碎念"><a href="#🤪碎碎念" class="headerlink" title="🤪碎碎念"></a>🤪碎碎念</h3><blockquote>
<p>一开始记录在 <code>Onenote</code> 中的笔记复制都是直接图片形式。所以我先复制到记事本再转到 <code>markdown</code>。</p>
</blockquote>
<a id="more"></a>
<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><p>在阅读《CSS权威指南》过程中，在继承这一模块发现了选择器权重的一些内容。</p>
<ul>
<li>继承得到的值没有特殊性，权重弱于 <code>0</code> 特殊性（通配符）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      * &#123;<span class="attribute">color</span>:gray;&#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">h1</span><span class="selector-id">#page-title</span> &#123;<span class="attribute">color</span>:black;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"page-title"</span>&gt;</span>Meerkat <span class="tag">&lt;<span class="name">em</span>&gt;</span>Central<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Welcome to the best place on the web for meerkat information!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/pic.png" alt="演示"></p>
<h2 id="👇图片形式"><a href="#👇图片形式" class="headerlink" title="👇图片形式"></a>👇图片形式</h2><p><del>糊的妈都不认识</del></p>
<p><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/1.jpg" alt><br><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/2.jpg" alt><br><img src="/2019/10/22/CSS%E7%BB%A7%E6%89%BF/3.jpg" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>for循环添加事件监听</title>
    <url>/2019/10/19/for%E5%BE%AA%E7%8E%AF%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    <content><![CDATA[<h1 id="for循环添加事件监听"><a href="#for循环添加事件监听" class="headerlink" title="for循环添加事件监听"></a>for循环添加事件监听</h1><blockquote>
<p>在写某个需求时，想要做点击按钮动态添加样式表示选中的效果，在写js代码的时候遇到了疑问点。</p>
<a id="more"></a>
</blockquote>
<p><img src="/2019/10/19/for%E5%BE%AA%E7%8E%AF%E6%B7%BB%E5%8A%A0%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC/for%E5%BE%AA%E7%8E%AF.png" alt="页面"></p>
<p>页面如上所示，头部的三个按钮在点击后永远只会对最后一个按钮进行样式添加或移除。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chooseArea = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"choose-area"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;chooseArea.children.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chooseArea.children);</span><br><span class="line">  <span class="keyword">var</span> child = chooseArea.children[i];</span><br><span class="line">  child.onclick=(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(child);</span><br><span class="line">  <span class="keyword">if</span>(child.className==<span class="string">""</span>)</span><br><span class="line">    child.className=<span class="string">"active"</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此处先拿出主要的代码(此时的已经是不完整+乱改版本)，部分打印代码为调试时编写。<br>查了一下百度，大概了解到是 <code>onclick</code> 或是添加事件监听一类都不是即时运行。而内部会调用外部的变量，在 <code>click</code> 事件的函数运行时，i早已自增至最大值，所以永远指向最后一个元素。此处的解决方法是闭包。(我终于知道闭包的作用了…)</p>
<p>修改后的代码(依然有待改进，时间未定)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> chooseArea = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"choose-area"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;chooseArea.children.length;i++)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(chooseArea.children);</span><br><span class="line">  <span class="keyword">var</span> child = chooseArea.children[i];</span><br><span class="line">	(<span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">child,i</span>)</span>&#123;</span><br><span class="line">	  child.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child.className == <span class="string">""</span>)</span><br><span class="line">          child.className = <span class="string">"active"</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          child.className=<span class="string">""</span>;</span><br><span class="line">	    &#125;</span><br><span class="line">	    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;chooseArea.children.length;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i==j)&#123;</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          chooseArea.children[j].className=<span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;;</span><br><span class="line">	  &#125;)(child,i);</span><br></pre></td></tr></table></figure>

<p>闭包都解决不了的我可真是个菜鸡…(lll￢ω￢)</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise中的setTimeOut参数问题</title>
    <url>/2019/10/18/Promise%E4%B8%AD%E7%9A%84setTimeOut%E5%8F%82%E6%95%B0%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="Promise中的setTimeOut参数问题"><a href="#Promise中的setTimeOut参数问题" class="headerlink" title="Promise中的setTimeOut参数问题"></a>Promise中的setTimeOut参数问题</h3><blockquote>
<p>在看 <a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023024413276544" target="_blank" rel="noopener">廖雪峰的 <code>javascript</code> 教程的 Promise </a> 一节看到一个疑问点。</p>
</blockquote>
<p>关于Promise的异步执行，其中一个示例代码中看到了setTimeOut的第三个参数。</p>
<a id="more"></a>
<p>代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logging = <span class="built_in">document</span>.getElementById(<span class="string">'test-promise2-log'</span>);</span><br><span class="line"><span class="keyword">while</span> (logging.children.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">  logging.removeChild(logging.children[logging.children.length - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  p.innerHTML = s;</span><br><span class="line">  logging.appendChild(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0.5秒后返回input*input的计算结果:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'calculating '</span> + input + <span class="string">' x '</span> + input + <span class="string">'...'</span>);</span><br><span class="line">    setTimeout(resolve, <span class="number">500</span>, input * input);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.5秒后返回input+input的计算结果:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'calculating '</span> + input + <span class="string">' + '</span> + input + <span class="string">'...'</span>);</span><br><span class="line">    setTimeout(resolve, <span class="number">500</span>, input + input);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'start new Promise...'</span>);</span><br><span class="line">  resolve(<span class="number">123</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'Got value: '</span> + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在讲 <code>input*input</code> 和 <code>input+input</code> 作为第三个参数传入为第一个参数函数的参数时，输出结果可以做到延时。</p>
<p>但如果我将代码修改为直接作为第一个 <code>resove</code> 的参数传入，就无法做到延时的效果。</p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logging = <span class="built_in">document</span>.getElementById(<span class="string">'test-promise2-log'</span>);</span><br><span class="line"><span class="keyword">while</span> (logging.children.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">  logging.removeChild(logging.children[logging.children.length - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  p.innerHTML = s;</span><br><span class="line">  logging.appendChild(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0.5秒后返回input*input的计算结果:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'calculating '</span> + input + <span class="string">' x '</span> + input + <span class="string">'...'</span>);</span><br><span class="line">    setTimeout(resolve(input*input), <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0.5秒后返回input+input的计算结果:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    log(<span class="string">'calculating '</span> + input + <span class="string">' + '</span> + input + <span class="string">'...'</span>);</span><br><span class="line">    setTimeout(resolve(input+input), <span class="number">500</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'start new Promise...'</span>);</span><br><span class="line">  resolve(<span class="number">123</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(multiply)</span><br><span class="line"> .then(add)</span><br><span class="line"> .then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">  log(<span class="string">'Got value: '</span> + result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>应该是因为异步一类的原因，待整理。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>一年后我来更新了，现在回看真是个白痴问题。</p>
<p>先提 <code>setTimeout</code> 函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">var timeoutID = scope.setTimeout(function[, delay, arg1, arg2, ...]);</span><br><span class="line">var timeoutID = scope.setTimeout(function[, delay]); </span><br><span class="line"><span class="keyword">var</span> timeoutID = scope.setTimeout(code[, delay]);</span><br></pre></td></tr></table></figure>

<p>这是该函数的调用实例。</p>
<ul>
<li><p>第一个参数可以是字符串代码也可以是函数。</p>
</li>
<li><p>第二个参数是该函数的调用时延，是可选参数，省略的话默认为 <code>0</code> 。</p>
</li>
<li><p>第三个及后面的参数为参数列表，代表第一个参数调用时传入的参数。</p>
</li>
</ul>
<p>那么在前面的例子中，第三个参数 <code>input * input</code> or <code>input + input</code> 都是传入第一个参数 <code>resolve</code> 回调的参数。</p>
<p>而我当时想到的是第一个参数直接写为 <code>resolve(input * input)</code> ，这样其实是错误的，因为这样的书写方法代表了直接调用 <code>resolve</code> 回调。那么 <code>setTimeou</code> 的延迟作用就无效了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS伪类选择器</title>
    <url>/2019/06/05/CSS%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="选择第一个子元素"><a href="#选择第一个子元素" class="headerlink" title="选择第一个子元素"></a>选择第一个子元素</h3><p>在阅读《CSS权威指南》的过程中，读到关于伪类选择器时的“选择第一个子元素”部分，发现对于伪类 :first-child 存在误解。</p>
<a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">p</span><span class="selector-pseudo">:first-child</span> &#123; <span class="attribute">font-weight</span>: bold; &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> &#123; <span class="attribute">text-transform</span>: uppercase; &#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>These are the necessary step:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Insert key<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Turn key <span class="tag">&lt;<span class="name">strong</span>&gt;</span>clockwise<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>Push accelerator<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span> Do <span class="tag">&lt;<span class="name">em</span>&gt;</span>not<span class="tag">&lt;/<span class="name">em</span>&gt;</span> push the brake at the same time as the accelerator.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>之前是将 p:first-child 理解为第一个p元素，阅读后发现其真实含义为某元素第一个子元素的所有p元素。</p>
<p><img src="/2019/06/05/CSS%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/pic1.png" alt="演示"></p>
<p><strong>伪类的实质为符合:后的要求的元素。</strong></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>font-face远程问题</title>
    <url>/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><p>在阅读 <code>Head First HTML与CSS</code> 第2版过程中，在增加字体和颜色样式部分学习到为页面增加Web字体。<br>其中运用了 <code>@font-face</code> 功能，照示例所写是失败的。</p>
<a id="more"></a>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Emblema One"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"https://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.woff"</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), </span><br><span class="line">       <span class="built_in">url</span>(<span class="string">"https://wickedlysmart.com/hfhtmlcss/chapter8/journal/EmblemaOne-Regular.ttf"</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</span><br><span class="line">&#125;</span><br><span class="line">//url后的format是后来加的，测试后并无效果。</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Emblema One"</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">220%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic1.png" alt="演示"></p>
<p>如图所示，会显示请求字体失败。<br>但是如果字体是存储在本地的，则成功。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Emblema One"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"EmblemaOne-Regular.woff"</span>), </span><br><span class="line">       <span class="built_in">url</span>(<span class="string">"EmblemaOne-Regular.ttf"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"Emblema One"</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">220%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic2.png" alt="演示"></p>
<p>除此之外，有实验利用在线字体库“有字库”也可以成功</p>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic3.png" alt="演示"></p>
<p>照它的要求进行设置可以成功</p>
<p><img src="/2019/06/02/font-face%E8%BF%9C%E7%A8%8B%E9%97%AE%E9%A2%98/pic4.png" alt="演示"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>邱奇编码的javascript实现</title>
    <url>/2019/05/29/%E9%82%B1%E5%A5%87%E7%BC%96%E7%A0%81%E7%9A%84javascript%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="📃正文"><a href="#📃正文" class="headerlink" title="📃正文"></a>📃正文</h2><h3 id="加减乘"><a href="#加减乘" class="headerlink" title="加减乘"></a>加减乘</h3><p>在<a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023021250770016" target="_blank" rel="noopener">廖雪峰老师的网站</a>看到了闭包内容，其中的脑洞大开部分就是关于邱奇编码的加法。</p>
<h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数字0:</span></span><br><span class="line"><span class="keyword">var</span> zero = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数字1:</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义加法:</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m(f)(n(f)(x));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算数字2 = 1 + 1:</span></span><br><span class="line"><span class="keyword">var</span> two = add(one, one);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算数字3 = 1 + 2:</span></span><br><span class="line"><span class="keyword">var</span> three = add(one, two);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算数字5 = 2 + 3:</span></span><br><span class="line"><span class="keyword">var</span> five = add(two, three);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你说它是3就是3，你说它是5就是5，你怎么证明？</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 呵呵，看这里:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给3传一个函数,会打印3次:</span></span><br><span class="line">(three(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'print 3 times'</span>);</span><br><span class="line">&#125;))();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给5传一个函数,会打印5次:</span></span><br><span class="line">(five(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'print 5 times'</span>);</span><br><span class="line">&#125;))();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继续接着玩一会...</span></span><br></pre></td></tr></table></figure>

<p>加法其实比较好理解，关于减法部分在网上搜索了很久。找到的代码比较难理解。</p>
<h4 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ZERO = <span class="function"><span class="keyword">function</span> (<span class="params">f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">z</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ADD1 = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">z</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> f(n(f)(z));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pred = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> fx = <span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> h(g(action));</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">return</span> n(fx)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> TWO = pred(THREE)=<span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> THREE(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h(g(action));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> u;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">TWO(action)(x)=<span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> THREE(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> h(g(action));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;(x)=THREE(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(g(action));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> SUB1 = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">z</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> ((n (<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> h(g(f));</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;))&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> z;</span><br><span class="line">        &#125;))(<span class="function"><span class="keyword">function</span> (<span class="params">u</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> u;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> ONE = ADD1(ZERO);</span><br><span class="line"><span class="keyword">var</span> TWO = ADD1(ONE);</span><br><span class="line"><span class="keyword">var</span> THREE = ADD1(TWO);</span><br><span class="line">(TWO(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span><br><span class="line">&#125;))();</span><br><span class="line">(THREE(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'2'</span>);</span><br><span class="line">&#125;))();</span><br><span class="line">THREE = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(f(ONE(f)(x)));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">THREE(f) = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> f(f(ONE(f)(x)));</span><br><span class="line">&#125;;</span><br><span class="line">TWO = pred(THREE) = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> THREE(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> h(g(action));</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> u;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">TWO(action) = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> THREE(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> h(g(action));</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">TWO(action)(x) = THREE(<span class="function"><span class="keyword">function</span>(<span class="params">g</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(g(action));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*function(g)&#123;</span></span><br><span class="line"><span class="comment">  return function(h)&#123;</span></span><br><span class="line"><span class="comment">    return h(g(action));</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">&#125;=f</span></span><br><span class="line"><span class="comment">f(x)=function(g)&#123;</span></span><br><span class="line"><span class="comment">  return function(h)&#123;</span></span><br><span class="line"><span class="comment">    return h(g(action));</span></span><br><span class="line"><span class="comment">  &#125;;</span></span><br><span class="line"><span class="comment">&#125;(x)=function(h)&#123;</span></span><br><span class="line"><span class="comment">  return h(x(action));</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">function(h)&#123;</span></span><br><span class="line"><span class="comment">  return h(x(action));</span></span><br><span class="line"><span class="comment">&#125;(x)=x(x(action))</span></span><br><span class="line"><span class="comment">f(f(ONE(f)(x)))(g)</span></span><br><span class="line"><span class="comment">f(f(f(x)))(g)</span></span><br><span class="line"><span class="comment">f(f(x))(g)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">TWO(action)(x) = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> f(f(ONE(f)(x)));</span><br><span class="line">&#125;(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line">= f(f(ONE(f)(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;)))(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line">= f(f(f(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;)))(<span class="function"><span class="keyword">function</span> (<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line">=f(f(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;(action));</span><br><span class="line">&#125;))(<span class="function"><span class="keyword">function</span> (<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line">=f(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x;</span><br><span class="line">    &#125;(action));</span><br><span class="line">  &#125;(action));</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span> (<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line">= <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;(action));</span><br><span class="line">    &#125;(action));</span><br><span class="line">  &#125;(action));</span><br><span class="line">&#125;(<span class="function"><span class="keyword">function</span> (<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;)</span><br><span class="line">= <span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> u;</span><br><span class="line">&#125;(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;(action));</span><br><span class="line">    &#125;(action));</span><br><span class="line">  &#125;(action))</span><br><span class="line">= <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;(action));</span><br><span class="line">    &#125;(action));</span><br><span class="line">  &#125;(action)</span><br><span class="line">= action(<span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> h(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;(action));</span><br><span class="line">    &#125;(action))</span><br><span class="line">= action(action(<span class="function"><span class="keyword">function</span>(<span class="params">u</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">      &#125;(action)))</span><br><span class="line">= action(action(x));</span><br><span class="line">TWO = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(ONE(f)(x));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ONE(f)(x)=f(ZERO(f)(x))=f(x);</span><br><span class="line">ONE = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(ZERO(f)(x));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实到最后算出结果我也没绕出弯来🙃</p>
<h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multi</span>(<span class="params">n, m</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> m(n(f))(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//test six</span></span><br><span class="line"><span class="keyword">var</span>  six = multi(three,two);</span><br><span class="line">(multi(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'print 6 times'</span>);</span><br><span class="line">&#125;))();</span><br></pre></td></tr></table></figure>

<p>大佬们果然都很喜欢挑战自己(lll￢ω￢)。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql运行现有sql文件</title>
    <url>/2018/12/31/mysql%E8%BF%90%E8%A1%8C%E7%8E%B0%E6%9C%89sql%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>2018.12.31 23:18 <strong>MySQL学习中</strong></p>
<p>PHP和MySQLWeb开发第四版</p>
<p>关于命令行运行现有的sql文件问题</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\wamp\bin\mysql\mysql5.7.23&gt;mysql -h localhost -u bookorama -D books -p &lt; bookorama.sql</span><br><span class="line">系统找不到指定的文件。</span><br><span class="line"></span><br><span class="line">D:\wamp\bin\mysql\mysql5.7.23&gt;<span class="built_in">cd</span> bin</span><br><span class="line"></span><br><span class="line">D:\wamp\bin\mysql\mysql5.7.23\bin&gt;mysql -h localhost -u bookorama -D books -p &lt; D:\zyWEB\SQLjb\bookorama.sql</span><br><span class="line">Enter password: ************</span><br><span class="line">ERROR 1050 (42S01) at line 1: Table <span class="string">'customers'</span> already exists</span><br><span class="line"></span><br><span class="line">D:\wamp\bin\mysql\mysql5.7.23\bin&gt;mysql -h localhost -u bookorama -D books -p &lt; D:\zyWEB\SQLjb\bookorama.sql</span><br><span class="line">Enter password: ************</span><br><span class="line">ERROR 1064 (42000) at line 8: You have an error <span class="keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="keyword">for</span> the right syntax to use near <span class="string">'data not null</span></span><br><span class="line"><span class="string">)'</span> at line 6</span><br><span class="line"></span><br><span class="line">D:\wamp\bin\mysql\mysql5.7.23\bin&gt;mysql -h localhost -u bookorama -D books -p &lt; D:\zyWEB\SQLjb\bookorama.sql</span><br><span class="line">Enter password: ************</span><br><span class="line">ERROR 1050 (42S01) at line 1: Table <span class="string">'customers'</span> already exists</span><br><span class="line"></span><br><span class="line">D:\wamp\bin\mysql\mysql5.7.23\bin&gt;mysql -h localhost -u bookorama -D books -p &lt; D:\zyWEB\SQLjb\bookorama.sql</span><br><span class="line">Enter password: ************</span><br><span class="line"></span><br><span class="line">D:\wamp\bin\mysql\mysql5.7.23\bin&gt;</span><br></pre></td></tr></table></figure>

<p>经过无数次尝试与纠结，一开始提示权限不够，很无语，记得上次创建 <code>bookorama</code> 这个账户时应该给了他权限的，然后又开 <code>mysql</code> 控制台重新给权限然后再来命令行继续敲命令，又发现 <code>sql</code> 文件中写错了，然后又改，最终是成功了。QAQ</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ProjectASocialNewsWebPageapp</title>
    <url>/2018/12/17/ProjectASocialNewsWebPageapp/</url>
    <content><![CDATA[<p>2018.12.17 11:07 <strong>ES6学习中</strong></p>
<blockquote>
<p>Thejsway/chapter26 <code>&lt;Project: a social news web app&gt;</code></p>
</blockquote>
<p>原题:</p>
<h2 id="Project-a-social-news-web-app"><a href="#Project-a-social-news-web-app" class="headerlink" title="Project: a social news web app"></a>Project: a social news web app</h2><p>This final project is the culmination of the book. You can check out the <a href="https://thejsway-publink.herokuapp.com" target="_blank" rel="noopener">expected result</a>. Good luck!</p>
<a id="more"></a>

<h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>This project builds upon the social news program and web pages you created previously. This time, the objective is to make a social news application based on a Node.js server.</p>
<h3 id="Functional-requirements"><a href="#Functional-requirements" class="headerlink" title="Functional requirements"></a>Functional requirements</h3><ul>
<li>A link is defined by its title, its URL and its author (submitter).</li>
<li>If a new link URL does not start with “http://“ or “https://“, “http://“ is automatically added at its beginning.</li>
<li>The web app displays a list of at least three already existing links, fetched from the server through an AJAX request.</li>
<li>A button exists for the user to submit a new link. When clicked, a form appears before the link list to input the new link properties (author, title and URL).</li>
<li>In this form, all link fields are mandatory.</li>
<li>When the new link is validated by the user, it is sent as form data to the server. If the operation is successful, the server returns the new link as JSON data. The new link is added at the top of the link list, replacing the form. A message indicates the success of the operation, then disappears after two seconds.</li>
</ul>
<h3 id="Technical-requirements"><a href="#Technical-requirements" class="headerlink" title="Technical requirements"></a>Technical requirements</h3><ul>
<li>The server must use a user-defined module exporting link-related code.</li>
<li>You should reuse any useful code from the previous projects.</li>
<li>All your code should be correctly indented.</li>
<li>Names should be wisely chosen and adhere to the camelCase convention.</li>
<li>Code duplication should be avoided.</li>
</ul>
<h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result"></a>Expected result</h3><p>Here are a few screenshots of the expected result.</p>
<p><img src="/2018/12/17/ProjectASocialNewsWebPageapp/image-20201013192921261.png" alt="image-20201013192921261"></p>
<p><img src="/2018/12/17/ProjectASocialNewsWebPageapp/image-20201013192927246.png" alt="image-20201013192927246"></p>
<p><img src="/2018/12/17/ProjectASocialNewsWebPageapp/image-20201013192932469.png" alt="image-20201013192932469"></p>
<p><img src="/2018/12/17/ProjectASocialNewsWebPageapp/image-20201013192937932.png" alt="image-20201013192937932"></p>
<p>=。=决定认真的写一下过程<br>1.将页面更改为服务端。<br>将 <code>fitst.html</code> <code>eample.js</code> <code>first.css</code> 以及部分需求的 <code>js</code> 或者 <code>css</code> 文件复制到 <code>myserver</code>  文件夹中。</p>
<p><img src="/2018/12/17/ProjectASocialNewsWebPageapp/image-20201013193413251.png" alt="image-20201013193413251"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/first'</span>, (request, response) =&gt; &#123;</span><br><span class="line">  response.sendFile(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/views/first.html`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>添加一个 <code>app.get</code> 来使 <code>localhost:3000/first</code> 展示为 <code>first.html</code> 。</p>
<p>百般尝试发现无法实现初始化三个链接，一番操作后发现自己打开了另一个路径的 <code>example.js</code>（???修改后发现传入函数 <code>createmenu(link)</code> 的 <code>link</code> 为 <code>undefined</code> 并且只出现了一个链接框(??? 控制台输出大法后发现传入的 <code>link</code> 为 <code>Array(3)</code> (??? 说好的 <code>JSON</code> 呢???)于是循环遍历后，便达成了效果。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">fetch(<span class="string">'http://localhost:3000/api/first'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> one <span class="keyword">of</span> result) &#123;</span><br><span class="line">      createmenu(one);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.message);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/api/first'</span>, jsonParser, (request, response) =&gt; &#123;</span><br><span class="line">  response.json(links);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/first'</span>, (request, response) =&gt; &#123;</span><br><span class="line">  response.sendFile(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/views/first.html`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2018/12/17/ProjectASocialNewsWebPageapp/image-20201013193423479.png" alt="image-20201013193423479"></p>
<p>爱心为啥变成了问号，我也母鸡。</p>
<p>又在 <code>JSON</code> 的类型上纠结了很久。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">linkform.addEventListener(<span class="string">'submit'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(e.target);</span><br><span class="line">  fetch(<span class="string">'http://localhost:3000/api/first'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: formData</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.text())</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      createsucceed(result);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/ai/first'</span>, upload.array(), (request, response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(request.body.input.startsWith(<span class="string">'http://'</span>) || request.body.input.startsWith(<span class="string">'https://'</span>))) &#123;</span><br><span class="line">    request.body.input = <span class="string">'http://'</span> + request.body.input;</span><br><span class="line">  &#125;</span><br><span class="line">  response.send(<span class="built_in">JSON</span>.stringify(request.body));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>题目要求为作为表单数据发送给服务器，而服务器以 <code>JSON</code> 数据的形式返回新链接。<br>经过数次尝试后发现在服务器以 <code>JSON.stringify</code> 方法的返回类型返回的话, 再转换为 <code>text</code> 即可达成效果。(但是成功时的提示消息的样式信息怎么给我搞丢了….)</p>
<p><img src="/2018/12/17/ProjectASocialNewsWebPageapp/image-20201013193431327.png" alt="image-20201013193431327"></p>
<p>新的数据怎么又成 <code>undefined</code> 的了。<br>路径的 <code>api</code> 少了一个 <code>p</code> 真好。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createlink = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> linkform = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">  linkform.className = <span class="string">'linkForm'</span>;</span><br><span class="line">  <span class="keyword">const</span> input1 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input2 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input3 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input4 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  input1.style.width = <span class="string">'250px'</span>;</span><br><span class="line">  input2.style.width = <span class="string">'450px'</span>;</span><br><span class="line">  input3.style.width = <span class="string">'300px'</span>;</span><br><span class="line">  input4.style.width = <span class="string">'100px'</span>;</span><br><span class="line">  input1.type = <span class="string">'text'</span>;</span><br><span class="line">  input1.name = <span class="string">'title'</span>;</span><br><span class="line">  input2.type = <span class="string">'text'</span>;</span><br><span class="line">  input2.name = <span class="string">'url'</span>;</span><br><span class="line">  input3.type = <span class="string">'text'</span>;</span><br><span class="line">  input3.name = <span class="string">'submitted'</span>;</span><br><span class="line">  input4.type = <span class="string">'submit'</span>;</span><br><span class="line">  input1.required = <span class="string">'required'</span>;</span><br><span class="line">  input2.required = <span class="string">'required'</span>;</span><br><span class="line">  input3.required = <span class="string">'required'</span>;</span><br><span class="line">  input4.id = <span class="string">'inputbutton'</span>;</span><br><span class="line">  input4.value = <span class="string">'Add link'</span>;</span><br><span class="line">  linkform.addEventListener(<span class="string">'submit'</span>, e =&gt; &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(e.target);</span><br><span class="line">    fetch(<span class="string">'http://localhost:3000/api/first'</span>, &#123;</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      body: formData</span><br><span class="line">    &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">      .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">        createsucceed(result);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err.message);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  linkform.appendChild(input1);</span><br><span class="line">  linkform.appendChild(input2);</span><br><span class="line">  linkform.appendChild(input3);</span><br><span class="line">  linkform.appendChild(input4);</span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .getElementById(<span class="string">'content'</span>)</span><br><span class="line">    .insertBefore(linkform, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).childNodes[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line">app.post(<span class="string">'/api/first'</span>, upload.array(), (request, response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!(request.body.url.startsWith(<span class="string">'http://'</span>) || request.body.url.startsWith(<span class="string">'https://'</span>))) &#123;</span><br><span class="line">    request.body.url = <span class="string">'http://'</span> + request.body.url;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res1 = request.body.title;</span><br><span class="line">  <span class="keyword">const</span> res2 = request.body.url;</span><br><span class="line">  <span class="keyword">const</span> res3 = request.body.submitted;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;</span><br><span class="line">    title: res1,</span><br><span class="line">    url: res2,</span><br><span class="line">    author: res3</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">  response.send(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>疯狂的控制台输出大法后发现, 传到客户端的应该是 <code>JSON</code> 对象而不是字符串 所以改为 <code>response.json()</code> 然后就基本达成效果。<br>大致完工。绿色的样式信息懒得写了=。=</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs 记一次被自己蠢哭的经历</title>
    <url>/2018/12/16/nodejs-%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A2%AB%E8%87%AA%E5%B7%B1%E8%A0%A2%E5%93%AD%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<p>2018.12.16 22:46 <strong>ES6学习中</strong></p>
<blockquote>
<p>Thejsway/chapter25</p>
</blockquote>
<p>被自己蠢哭了TT</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> jsonParser = bodyParser.json();</span><br><span class="line"><span class="keyword">const</span> upload = multer();</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> articles = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">'First article'</span>,</span><br><span class="line">    content: <span class="string">'Hello World!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    title: <span class="string">'Lorem ipsum'</span>,</span><br><span class="line">    content:</span><br><span class="line">      <span class="string">'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut hendrerit mauris ac porttitor accumsan. Nunc vitae pulvinar odio, auctor interdum dolor. Aenean sodales dui quis metus iaculis, hendrerit vulputate lorem vestibulum.'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    title: <span class="string">'Lorem ipsum in French'</span>,</span><br><span class="line">    content:</span><br><span class="line">      <span class="string">'J’en dis autant de ceux qui, par mollesse d’esprit, c’est-à-dire par la crainte de la peine et de la douleur, manquent aux devoirs de la vie. Et il est très facile de rendre raison de ce que j’avance.'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.header(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Origin, X-Requested-With, Content-Type, Accept'</span>);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/api/cars'</span>, jsonParser, (request, response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cars = request.body;</span><br><span class="line">  response.send(<span class="string">`You sent me a list of cars: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(cars)&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/animals'</span>, upload.array(), (request, response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> name = request.body.name;</span><br><span class="line">  <span class="keyword">const</span> vote = request.body.strongest;</span><br><span class="line">  response.send(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, you voted: <span class="subst">$&#123;vote&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.post(<span class="string">'/tshirt'</span>);</span><br><span class="line">app.get(<span class="string">'/hello'</span>, (request, response) =&gt; &#123;</span><br><span class="line">  response.sendFile(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/views/hello.html`</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.get(<span class="string">'/api/articles'</span>, (request, response) =&gt; &#123;</span><br><span class="line">  response.json(articles);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listener = app.listen(process.env.PORT || <span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Your app is listening on port <span class="subst">$&#123;listener.address().port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>一直无法达成 <strong>自己发送请求给自建的服务器</strong> 的代码效果。然而，控制台一直在提示缺少东西…… 只要调换顺序就可以了…… 呵=。=<br>还不清楚use的意义是啥…… 被自己蠢到没心情记录了…… 就这样把……</p>
<p>又写了tshirt部分，然而，还是一头雾水了好久。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> travel = &#123;</span><br><span class="line">  name: <span class="string">'Sam'</span>,</span><br><span class="line">  countries: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'a'</span>, <span class="attr">year</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'b'</span>, <span class="attr">year</span>: <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'c'</span>, <span class="attr">year</span>: <span class="number">3</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Send data to the server</span></span><br><span class="line">fetch(<span class="string">'http://localhost:3000/api/countries'</span>, &#123;</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    Accept: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(travel)</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> response.text())</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.message);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/api/countries'</span>, jsonParser, (request, response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> travel = request.body;</span><br><span class="line">  <span class="built_in">console</span>.log(travel);</span><br><span class="line">  <span class="comment">// const travel = JSON.stringify(request.body);</span></span><br><span class="line">  <span class="comment">// const name = JSON.stringify(request.body).name;</span></span><br><span class="line">  <span class="comment">// let a = JSON.stringify(request.body);</span></span><br><span class="line">  <span class="comment">// let travel = JSON.parse(a);</span></span><br><span class="line">  <span class="comment">// console.log(travel);</span></span><br><span class="line">  <span class="comment">// const name = travel.name;</span></span><br><span class="line">  <span class="comment">// console.log(name);</span></span><br><span class="line">  <span class="comment">// const length = travel.countries.length;</span></span><br><span class="line">  response.send(</span><br><span class="line">    <span class="string">`Your name is <span class="subst">$&#123;travel.name&#125;</span> and you visited <span class="subst">$&#123;travel.countries.length&#125;</span> countries. Keep traveling!`</span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>一开始直接定义 <code>name</code> 与 <code>countries</code> 但是会未定义。不知道为啥，在JSON的类型上纠结了很久。原先的写法( <code>key</code> 不加双引号 并且 <code>travel</code> 被我写成了 <code>Array</code> )似乎是有问题的。疯狂的修改之后最终谜之通过…… =。=改日再说</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>New article</title>
    <url>/2018/12/16/New-article/</url>
    <content><![CDATA[<p>2018.12.16 16:04 <strong>ES6学习中</strong></p>
<blockquote>
<p>Thejsway/chapter23 Coding time <code>&lt;New article&gt;</code></p>
</blockquote>
<p>原题：</p>
<h2 id="New-article"><a href="#New-article" class="headerlink" title="New article"></a>New article</h2><p>Write the HTML code that shows input fields for creating a new blog article by entering its title and content.<br>Then, write the associated JavaScript code to send the article fields as form data to the URL <a href="https://thejsway-server.herokuapp.com/articles" target="_blank" rel="noopener">https://thejsway-server.herokuapp.com/articles</a>. You should receive a confirmation message from the server and display it on the page.</p>
<p><img src="/2018/12/16/New-article/image-20201013192424143.png" alt="image-20201013192424143"></p>
<p>W&gt; The server only accepts POST requests at this URL.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'form'</span>).addEventListener(<span class="string">'submit'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="built_in">console</span>.log(e.target);</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(e.target);</span><br><span class="line">  fetch(<span class="string">'https://thejsway-server.herokuapp.com/articles'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: formData</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.text())</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).textContent = result;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>发现 <strong>1</strong> 个问题, <code>submit</code> 事件是绑定在 <code>form</code> 上而不是 <code>type</code> 为 <code>submit</code> 的按钮上。<br>=。=呵</p>
<h3 id="2018-12-17-0-50-更新"><a href="#2018-12-17-0-50-更新" class="headerlink" title="2018.12.17 0:50 更新"></a>2018.12.17 0:50 更新</h3><p>加上服务器部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'form'</span>).addEventListener(<span class="string">'submit'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  <span class="built_in">console</span>.log(e.target);</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData(e.target);</span><br><span class="line">  fetch(<span class="string">'https://thejsway-server.herokuapp.com/articles'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    body: formData</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.text())</span><br><span class="line">    .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).textContent = result;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> articles = [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">'First article'</span>,</span><br><span class="line">    content: <span class="string">'Hello World!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    title: <span class="string">'Lorem ipsum'</span>,</span><br><span class="line">    content:</span><br><span class="line">      <span class="string">'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut hendrerit mauris ac porttitor accumsan. Nunc vitae pulvinar odio, auctor interdum dolor. Aenean sodales dui quis metus iaculis, hendrerit vulputate lorem vestibulum.'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="number">3</span>,</span><br><span class="line">    title: <span class="string">'Lorem ipsum in French'</span>,</span><br><span class="line">    content:</span><br><span class="line">      <span class="string">'J’en dis autant de ceux qui, par mollesse d’esprit, c’est-à-dire par la crainte de la peine et de la douleur, manquent aux devoirs de la vie. Et il est très facile de rendre raison de ce que j’avance.'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/articles'</span>, upload.array(), (request, response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newid = articles.length + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(request.body);</span><br><span class="line">  <span class="keyword">const</span> newtitle = request.body.title;</span><br><span class="line">  <span class="keyword">const</span> newcontent = request.body.content;</span><br><span class="line">  articles.push(&#123;</span><br><span class="line">    id: newid,</span><br><span class="line">    title: newtitle,</span><br><span class="line">    content: newcontent</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`New article added successfully with ID <span class="subst">$&#123;newid&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// response.send(`New article added successfully with ID $&#123;newid&#125;`);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>突然成功 d=====(￣▽￣*)b 开熏</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Github profile</title>
    <url>/2018/12/16/Github-profile/</url>
    <content><![CDATA[<p>2018.12.16 13:22 <strong>ES6学习中</strong><del>(似乎出现了爬虫(并不 )</del></p>
<blockquote>
<p>Thejsway/chapter22 Coding time <code>&lt;GitHub profile&gt;</code></p>
</blockquote>
<p>原题：</p>
<h2 id="GitHub-profile"><a href="#GitHub-profile" class="headerlink" title="GitHub profile"></a>GitHub profile</h2><p>The ubiquitous code sharing platform <a href="https://github.com" target="_blank" rel="noopener">GitHub</a>has a public API. The goal of this exercise is to display some information about a GitHub user, identified by his login. The API documentation is available <a href="https://developer.github.com/v3/users/" target="_blank" rel="noopener">here</a>.<br>Use this API to show the profile picture, name and website address of a GitHub user whose login is entered in a text box.</p>
<p><img src="/2018/12/16/Github-profile/image-20201013191407437.png" alt="image-20201013191407437"></p>
<p>You can test your code by using the GitHub logins of prominent JS community members like <code>brendaneich</code>  (JavaScript’s father),  <code>douglascrockford</code> or  <code>vjeux</code>  .<br>=。=好像有点难度。没有给什么提示，只给了官方教程(<del>然而并看不懂</del>)<br>于是百度<br>相关文章：<br><a href="https://www.jianshu.com/p/628a0747c492" target="_blank" rel="noopener">python爬取</a><br><a href="https://blog.csdn.net/qq_25537177/article/details/80528834" target="_blank" rel="noopener">貌似是js?</a><br>=。=费尽心思的我似乎写了出来</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> grabgithub = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  fetch(<span class="string">'https://api.github.com/users/'</span> + name)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// for(const auser of users)&#123;</span></span><br><span class="line">      <span class="comment">// name = name.replace(/\s+/g,"").toLowerCase();</span></span><br><span class="line">      <span class="comment">// const username = auser.login.replace(/\s+/g,"").toLowerCase();</span></span><br><span class="line">      <span class="comment">// console.log(username);</span></span><br><span class="line">      <span class="comment">// if(name === username)&#123;</span></span><br><span class="line">      <span class="comment">// createinfo(auser);</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      createinfo(users);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createinfo</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> incon = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  incon.src = user.avatar_url;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="built_in">document</span>.createElement(<span class="string">'h1'</span>);</span><br><span class="line">  name.textContent = user.name;</span><br><span class="line">  <span class="keyword">const</span> address = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  address.href = user.html_url;</span><br><span class="line">  address.textContent = user.html_url;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).appendChild(incon);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).appendChild(name);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).appendChild(address);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'grabButton'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).childNodes;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> a <span class="keyword">of</span> div) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).removeChild(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).value;</span><br><span class="line">  grabgithub(input);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注释部分为原代码，原先理解为在 <a href="https://api.github.com/users" target="_blank" rel="noopener">https://api.github.com/users</a> 查找信息，后来发现这个页面只有46个用户信息，仔细观察了一会儿 官方文档。发现应该是在 <a href="https://api.github.com/users/username" target="_blank" rel="noopener">https://api.github.com/users/username</a> 查找 于是修改代码。在特定页面读取信息。效果达成。获取地址部分应该是获取博客。未修改(=。=太懒)</p>
<p><img src="/2018/12/16/Github-profile/image-20201013191701861.png" alt="image-20201013191701861"></p>
<p><img src="/2018/12/16/Github-profile/image-20201013191709344.png" alt="image-20201013191709344"></p>
<p>想结束的我又发现了新问题=。=呵，为什么h1没有被删掉。。。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'grabButton'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> divs = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).children);</span><br><span class="line">  <span class="keyword">if</span> (divs.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.length; i++) &#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).removeChild(divs[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).value;</span><br><span class="line">  grabgithub(input);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> grabgithub = <span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">  fetch(<span class="string">'https://api.github.com/users/'</span> + name)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json())</span><br><span class="line">    .then(<span class="function"><span class="params">users</span> =&gt;</span> &#123;</span><br><span class="line">      createinfo(users);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(err.message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createinfo</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> incon = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">  incon.src = user.avatar_url;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="built_in">document</span>.createElement(<span class="string">'h1'</span>);</span><br><span class="line">  name.textContent = user.name;</span><br><span class="line">  <span class="keyword">const</span> address = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  address.href = user.blog;</span><br><span class="line">  address.textContent = user.blog;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).appendChild(incon);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).appendChild(name);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).appendChild(address);</span><br><span class="line">  divs = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.getElementById(<span class="string">'information'</span>).children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后死马当做活马医的我 将divs 转化为Array 然后就成功了=。=呵</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>ProjectASocialNewsWebPage</title>
    <url>/2018/12/15/ProjectASocialNewsWebPage/</url>
    <content><![CDATA[<p>2018.12.15 20:42 <strong>ES6学习中</strong></p>
<blockquote>
<p>Thejsway/chapter19 &lt;Project: a social news web page&gt;</p>
</blockquote>
<p>原题：</p>
<h2 id="Project-a-social-news-web-page"><a href="#Project-a-social-news-web-page" class="headerlink" title="Project: a social news web page"></a>Project: a social news web page</h2><p>You know now enough JavaScript and DOM to go ahead and create interactive web pages for real!</p>
<h3 id="Objective"><a href="#Objective" class="headerlink" title="Objective"></a>Objective</h3><p>This project builds upon the social news program you created previously. This time, the objective is to make a social news web page.<br>The general idea and page layout for this project are inspired by the <a href="https://www.discovermeteor.com/" target="_blank" rel="noopener">Discover Meteor book</a>‘s example application.</p>
<h3 id="Functional-requirements"><a href="#Functional-requirements" class="headerlink" title="Functional requirements"></a>Functional requirements</h3><ul>
<li>A link is defined by its title, its URL and its author (submitter).</li>
<li>If a new link URL does not start with “http://“ or “https://“, “http://“ is automatically added at its beginning.</li>
<li>The web page displays a list of at least three already existing links.</li>
<li>A button exists for the user to submit a new link. When clicked, a form appears before the link list to input the new link properties (author, title and URL).</li>
<li>In this form, all link fields are mandatory.</li>
<li>When the new link is validated by the user, it is displayed at the top of the link list, replacing the form. A message indicates the success of the operation, then disappears after two seconds.</li>
</ul>
<h3 id="Technical-requirements"><a href="#Technical-requirements" class="headerlink" title="Technical requirements"></a>Technical requirements</h3><ul>
<li><p>You should reuse any useful code from the previous project.</p>
</li>
<li><p>All your code should be correctly indented.</p>
</li>
<li><p>Names should be wisely chosen and adhere to the camelCase convention.</p>
</li>
<li><p>Code duplication should be avoided.</p>
</li>
</ul>
<h3 id="Starter-code"><a href="#Starter-code" class="headerlink" title="Starter code"></a>Starter code</h3><p>Because this is first and foremost a JavaScript project, here is the complete HTML/CSS code of the web page. It is also online as a <a href="https://codepen.io/bpesquet/pen/pPyxLG/" target="_blank" rel="noopener">CodePen</a>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>My web page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 最新编译和缩小CSS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./css/first.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>A social news web page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-toggle collapsed"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">data-target</span>=<span class="string">"#bs-example-navbar-collapse-1"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Toggle navigation<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-link"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> PubLink<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"bs-example-navbar-collapse-1"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"submitButton"</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"navbar-text navbar-right"</span>&gt;</span>A social news web page built with ❤ and JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 存放动态内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/example.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jQuery（Bootstrap的JavaScript插件所必需的）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 包含所有已编译的插件(如下)，或者根据需要包含单个文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0.5px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#afaeae</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#inputbutton</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(208, 62%, 40%);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Main link element (&lt;div&gt; tag) */</span></span><br><span class="line"><span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Link title (&lt;a&gt; tag) */</span></span><br><span class="line"><span class="selector-class">.linkTitle</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#428bca</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.linkTitle</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Link URL (&lt;span&gt; tag) */</span></span><br><span class="line"><span class="selector-class">.linkUrl</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Link headline containing title &amp; URL (&lt;h4&gt; tag) */</span></span><br><span class="line"><span class="selector-class">.linkHeadline</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Link author (&lt;span&gt; tag) */</span></span><br><span class="line"><span class="selector-class">.linkAuthor</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.linkForm</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码做了适当更改。</p>
<h3 id="Expected-result"><a href="#Expected-result" class="headerlink" title="Expected result"></a>Expected result</h3><p><img src="/2018/12/15/ProjectASocialNewsWebPage/image-20201013190336868.png" alt="image-20201013190336868"></p>
<p><img src="/2018/12/15/ProjectASocialNewsWebPage/image-20201013190344372.png" alt="image-20201013190344372"></p>
<p><img src="/2018/12/15/ProjectASocialNewsWebPage/image-20201013190352014.png" alt="image-20201013190352014"></p>
<p><img src="/2018/12/15/ProjectASocialNewsWebPage/image-20201013190356227.png" alt="image-20201013190356227"></p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="1-编写函数-createlink-用于创建链接"><a href="#1-编写函数-createlink-用于创建链接" class="headerlink" title="1.编写函数  createlink()  用于创建链接"></a>1.编写函数  <code>createlink()</code>  用于创建链接</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> createlink = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> linkform = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">  linkform.className = <span class="string">'linkForm'</span>;</span><br><span class="line">  <span class="keyword">const</span> input1 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input2 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input3 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input4 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  input1.style.width = <span class="string">'250px'</span>;</span><br><span class="line">  input2.style.width = <span class="string">'450px'</span>;</span><br><span class="line">  input3.style.width = <span class="string">'300px'</span>;</span><br><span class="line">  input4.style.width = <span class="string">'100px'</span>;</span><br><span class="line">  input1.type = <span class="string">'text'</span>;</span><br><span class="line">  input2.type = <span class="string">'text'</span>;</span><br><span class="line">  input3.type = <span class="string">'text'</span>;</span><br><span class="line">  input4.type = <span class="string">'submit'</span>;</span><br><span class="line">  input4.id = <span class="string">'inputbutton'</span>;</span><br><span class="line">  input4.value = <span class="string">'Add link'</span>;</span><br><span class="line">  linkform.appendChild(input1);</span><br><span class="line">  linkform.appendChild(input2);</span><br><span class="line">  linkform.appendChild(input3);</span><br><span class="line">  linkform.appendChild(input4);</span><br><span class="line">  <span class="comment">// const count = document.getElementsByClassName("link");</span></span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .getElementById(<span class="string">'content'</span>)</span><br><span class="line">    .insertBefore(linkform, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).childNodes[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'submitButton'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'form'</span>);</span><br><span class="line">  <span class="keyword">if</span> (form.length === <span class="number">0</span>) &#123;</span><br><span class="line">    createlink();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>addEventListener()</code> 中的函数部分若加上括号，则直接调用该函数。体现在该网页上则是不用点击 <code>submit</code> 按钮就出现了创建链接的列表。部分初始化过程过于繁琐。有因未验证是否存在表单而导致多次点击按钮的情况下会出现多个表单。</p>
<h4 id="2-文档加载过程中创建三个现有链接"><a href="#2-文档加载过程中创建三个现有链接" class="headerlink" title="2.文档加载过程中创建三个现有链接"></a>2.文档加载过程中创建三个现有链接</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> links = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Hacker News'</span>,</span><br><span class="line">    url: <span class="string">'http://news.ycombinator.com'</span>,</span><br><span class="line">    author: <span class="string">'Baptiste'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Reddit'</span>,</span><br><span class="line">    url: <span class="string">'http://reddit.com'</span>,</span><br><span class="line">    author: <span class="string">'Thomas'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Boing Boing'</span>,</span><br><span class="line">    url: <span class="string">'http://bolingboling.net'</span>,</span><br><span class="line">    author: <span class="string">'Daniel'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> link <span class="keyword">of</span> links) &#123;</span><br><span class="line">    <span class="keyword">const</span> linkb = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    <span class="keyword">const</span> linkheadling = <span class="built_in">document</span>.createElement(<span class="string">'h4'</span>);</span><br><span class="line">    <span class="keyword">const</span> linktitle = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">const</span> linkurl = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">    <span class="keyword">const</span> linkauthor = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">    linkb.className = <span class="string">'link'</span>;</span><br><span class="line">    linkheadling.className = <span class="string">'linkHeadline'</span>;</span><br><span class="line">    linktitle.className = <span class="string">'linkTitle'</span>;</span><br><span class="line">    linkurl.className = <span class="string">'linkUrl'</span>;</span><br><span class="line">    linkauthor.className = <span class="string">'linkAuthor'</span>;</span><br><span class="line">    linktitle.textContent = link.title;</span><br><span class="line">    linktitle.href = link.url;</span><br><span class="line">    linkurl.textContent = link.url;</span><br><span class="line">    linkauthor.textContent = <span class="string">'Submitted by '</span> + link.author;</span><br><span class="line">    linkheadling.appendChild(linktitle);</span><br><span class="line">    linkheadling.appendChild(linkurl);</span><br><span class="line">    linkb.appendChild(linkheadling);</span><br><span class="line">    linkb.appendChild(linkauthor);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).appendChild(linkb);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>有粗心忘了加外包的 <code>div</code> 盒子</p>
<h4 id="3-编写成功创建链接部分"><a href="#3-编写成功创建链接部分" class="headerlink" title="3.编写成功创建链接部分"></a>3.编写成功创建链接部分</h4><blockquote>
<p>对上面代码进行部分改写</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> links = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Hacker News'</span>,</span><br><span class="line">    url: <span class="string">'http://news.ycombinator.com'</span>,</span><br><span class="line">    author: <span class="string">'Baptiste'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Reddit'</span>,</span><br><span class="line">    url: <span class="string">'http://reddit.com'</span>,</span><br><span class="line">    author: <span class="string">'Thomas'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Boing Boing'</span>,</span><br><span class="line">    url: <span class="string">'http://bolingboling.net'</span>,</span><br><span class="line">    author: <span class="string">'Daniel'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createmenu</span>(<span class="params">link</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> linkb = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">const</span> linkheadling = <span class="built_in">document</span>.createElement(<span class="string">'h4'</span>);</span><br><span class="line">  <span class="keyword">const</span> linktitle = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">const</span> linkurl = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">  <span class="keyword">const</span> linkauthor = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">  linkb.className = <span class="string">'link'</span>;</span><br><span class="line">  linkheadling.className = <span class="string">'linkHeadline'</span>;</span><br><span class="line">  linktitle.className = <span class="string">'linkTitle'</span>;</span><br><span class="line">  linkurl.className = <span class="string">'linkUrl'</span>;</span><br><span class="line">  linkauthor.className = <span class="string">'linkAuthor'</span>;</span><br><span class="line">  linktitle.textContent = link.title;</span><br><span class="line">  linktitle.href = link.url;</span><br><span class="line">  linkurl.textContent = link.url;</span><br><span class="line">  linkauthor.textContent = <span class="string">'Submitted by '</span> + link.author;</span><br><span class="line">  linkheadling.appendChild(linktitle);</span><br><span class="line">  linkheadling.appendChild(linkurl);</span><br><span class="line">  linkb.appendChild(linkheadling);</span><br><span class="line">  linkb.appendChild(linkauthor);</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).appendChild(linkb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> link <span class="keyword">of</span> links) &#123;</span><br><span class="line">    createmenu(link);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createsucceed</span>(<span class="params">link</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> box = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  box.classname = <span class="string">'succeed'</span>;</span><br><span class="line">  box.textContent = <span class="string">`The link <span class="subst">$&#123;link.title&#125;</span> has been succesfully added!`</span>;</span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .getElementById(<span class="string">'content'</span>)</span><br><span class="line">    .insertBefore(box, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).childNodes[<span class="number">0</span>]);</span><br><span class="line">  createmenu(link);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> createlink = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> linkform = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">  linkform.className = <span class="string">'linkForm'</span>;</span><br><span class="line">  <span class="keyword">const</span> input1 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input2 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input3 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input4 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  input1.style.width = <span class="string">'250px'</span>;</span><br><span class="line">  input2.style.width = <span class="string">'450px'</span>;</span><br><span class="line">  input3.style.width = <span class="string">'300px'</span>;</span><br><span class="line">  input4.style.width = <span class="string">'100px'</span>;</span><br><span class="line">  input1.type = <span class="string">'text'</span>;</span><br><span class="line">  input2.type = <span class="string">'text'</span>;</span><br><span class="line">  input3.type = <span class="string">'text'</span>;</span><br><span class="line">  input4.type = <span class="string">'submit'</span>;</span><br><span class="line">  input4.id = <span class="string">'inputbutton'</span>;</span><br><span class="line">  input4.value = <span class="string">'Add link'</span>;</span><br><span class="line">  input4.addEventListener(<span class="string">'submit'</span>, e =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!(inputs[<span class="number">1</span>].value.startsWith(<span class="string">'http://'</span>) || inputs[<span class="number">1</span>].value.startsWith(<span class="string">'https://'</span>))) &#123;</span><br><span class="line">      inputs[i].value = <span class="string">'http://'</span> + inputs[i].value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> link = &#123;</span><br><span class="line">      title: input[<span class="number">0</span>].value,</span><br><span class="line">      url: inputs[<span class="number">1</span>].value,</span><br><span class="line">      author: inputs[<span class="number">2</span>].value</span><br><span class="line">    &#125;;</span><br><span class="line">    links.push(link);</span><br><span class="line">    createsucceed(link);</span><br><span class="line">  &#125;);</span><br><span class="line">  linkform.appendChild(input1);</span><br><span class="line">  linkform.appendChild(input2);</span><br><span class="line">  linkform.appendChild(input3);</span><br><span class="line">  linkform.appendChild(input4);</span><br><span class="line">  <span class="comment">// const count = document.getElementsByClassName("link");</span></span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .getElementById(<span class="string">'content'</span>)</span><br><span class="line">    .insertBefore(linkform, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).childNodes[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'submitButton'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'form'</span>);</span><br><span class="line">  <span class="keyword">if</span> (form.length === <span class="number">0</span>) &#123;</span><br><span class="line">    createlink();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>问题：无法出现成功提交的界面。并且新建的链接也不会显示。<br>将 <code>input4</code> 的 <code>addEventListener()</code> 事件更改为click 并阻止 <code>submit</code> 的默认行为 即可出现提示并创建新链接。新问题：提示的效果未达成，表单如何消失。</p>
<p>部分代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formdata</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!(inputs[<span class="number">1</span>].value.startsWith(<span class="string">'http://'</span>) || inputs[<span class="number">1</span>].value.startsWith(<span class="string">'https://'</span>))) &#123;</span><br><span class="line">    inputs[<span class="number">1</span>].value = <span class="string">'http://'</span> + inputs[<span class="number">1</span>].value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> alink = &#123;</span><br><span class="line">    title: inputs[<span class="number">0</span>].value,</span><br><span class="line">    url: inputs[<span class="number">1</span>].value,</span><br><span class="line">    author: inputs[<span class="number">2</span>].value</span><br><span class="line">  &#125;;</span><br><span class="line">  links.push(alink);</span><br><span class="line">  createsucceed(alink);</span><br><span class="line">&#125;</span><br><span class="line">input4.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  formdata();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="4-编写两秒钟后提示的消失部分"><a href="#4-编写两秒钟后提示的消失部分" class="headerlink" title="4.编写两秒钟后提示的消失部分"></a>4.编写两秒钟后提示的消失部分</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> links = [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Boing Boing'</span>,</span><br><span class="line">    url: <span class="string">'http://bolingboling.net'</span>,</span><br><span class="line">    author: <span class="string">'Daniel'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Reddit'</span>,</span><br><span class="line">    url: <span class="string">'http://reddit.com'</span>,</span><br><span class="line">    author: <span class="string">'Thomas'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'Hacker News'</span>,</span><br><span class="line">    url: <span class="string">'http://news.ycombinator.com'</span>,</span><br><span class="line">    author: <span class="string">'Baptiste'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createmenu</span>(<span class="params">link</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> linkb = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">const</span> linkheadling = <span class="built_in">document</span>.createElement(<span class="string">'h4'</span>);</span><br><span class="line">  <span class="keyword">const</span> linktitle = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">const</span> linkurl = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">  <span class="keyword">const</span> linkauthor = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">  linkb.className = <span class="string">'link'</span>;</span><br><span class="line">  linkheadling.className = <span class="string">'linkHeadline'</span>;</span><br><span class="line">  linktitle.className = <span class="string">'linkTitle'</span>;</span><br><span class="line">  linkurl.className = <span class="string">'linkUrl'</span>;</span><br><span class="line">  linkauthor.className = <span class="string">'linkAuthor'</span>;</span><br><span class="line">  linktitle.textContent = link.title;</span><br><span class="line">  linktitle.href = link.url;</span><br><span class="line">  linkurl.textContent = link.url;</span><br><span class="line">  linkauthor.textContent = <span class="string">'Submitted by '</span> + link.author;</span><br><span class="line">  linkheadling.appendChild(linktitle);</span><br><span class="line">  linkheadling.appendChild(linkurl);</span><br><span class="line">  linkb.appendChild(linkheadling);</span><br><span class="line">  linkb.appendChild(linkauthor);</span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .getElementById(<span class="string">'content'</span>)</span><br><span class="line">    .insertBefore(linkb, <span class="built_in">document</span>.getElementsByClassName(<span class="string">'link'</span>)[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> link <span class="keyword">of</span> links) &#123;</span><br><span class="line">    createmenu(link);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createsucceed</span>(<span class="params">link</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> box = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  <span class="keyword">const</span> pa = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span><br><span class="line">  box.id = <span class="string">'succeed'</span>;</span><br><span class="line">  pa.textContent = <span class="string">`The link <span class="subst">$&#123;link.title&#125;</span> has been succesfully added!`</span>;</span><br><span class="line">  box.appendChild(pa);</span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .getElementById(<span class="string">'content'</span>)</span><br><span class="line">    .insertBefore(box, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).childNodes[<span class="number">0</span>]);</span><br><span class="line">  createmenu(link);</span><br><span class="line">  <span class="keyword">const</span> linkform = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'linkForm'</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).removeChild(linkform);</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> it = <span class="built_in">document</span>.getElementById(<span class="string">'succeed'</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).removeChild(it);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formdata</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!(inputs[<span class="number">1</span>].value.startsWith(<span class="string">'http://'</span>) || inputs[<span class="number">1</span>].value.startsWith(<span class="string">'https://'</span>))) &#123;</span><br><span class="line">    inputs[<span class="number">1</span>].value = <span class="string">'http://'</span> + inputs[<span class="number">1</span>].value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> alink = &#123;</span><br><span class="line">    title: inputs[<span class="number">0</span>].value,</span><br><span class="line">    url: inputs[<span class="number">1</span>].value,</span><br><span class="line">    author: inputs[<span class="number">2</span>].value</span><br><span class="line">  &#125;;</span><br><span class="line">  links.push(alink);</span><br><span class="line">  createsucceed(alink);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> createlink = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> linkform = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span><br><span class="line">  linkform.className = <span class="string">'linkForm'</span>;</span><br><span class="line">  <span class="keyword">const</span> input1 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input2 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input3 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  <span class="keyword">const</span> input4 = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">  input1.style.width = <span class="string">'250px'</span>;</span><br><span class="line">  input2.style.width = <span class="string">'450px'</span>;</span><br><span class="line">  input3.style.width = <span class="string">'300px'</span>;</span><br><span class="line">  input4.style.width = <span class="string">'100px'</span>;</span><br><span class="line">  input1.type = <span class="string">'text'</span>;</span><br><span class="line">  input2.type = <span class="string">'text'</span>;</span><br><span class="line">  input3.type = <span class="string">'text'</span>;</span><br><span class="line">  input4.type = <span class="string">'submit'</span>;</span><br><span class="line">  input4.id = <span class="string">'inputbutton'</span>;</span><br><span class="line">  input4.value = <span class="string">'Add link'</span>;</span><br><span class="line">  input4.addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    formdata();</span><br><span class="line">  &#125;);</span><br><span class="line">  linkform.appendChild(input1);</span><br><span class="line">  linkform.appendChild(input2);</span><br><span class="line">  linkform.appendChild(input3);</span><br><span class="line">  linkform.appendChild(input4);</span><br><span class="line">  <span class="built_in">document</span></span><br><span class="line">    .getElementById(<span class="string">'content'</span>)</span><br><span class="line">    .insertBefore(linkform, <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>).childNodes[<span class="number">0</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'submitButton'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'form'</span>);</span><br><span class="line">  <span class="keyword">if</span> (form.length === <span class="number">0</span>) &#123;</span><br><span class="line">    createlink();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>效果基本实现。遗留问题：部分代码重复且繁琐，但不知如何抽象出来。初始化页面所需时间太久，不知如何优化 =。=<br>勉强算完成 =。= (主要是累了)</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>start and stop</title>
    <url>/2018/12/15/start-and-stop/</url>
    <content><![CDATA[<p>2018.12.15 18:04 <strong>ES6学习中</strong></p>
<blockquote>
<p>Thejsway/chapter18 Coding time <code>&lt;Bouncing ball&gt;``(&lt;Chronometer&gt;)</code></p>
</blockquote>
<p>原题：</p>
<ul>
<li><h2 id="Bouncing-ball"><a href="#Bouncing-ball" class="headerlink" title="Bouncing ball"></a>Bouncing ball</h2></li>
</ul>
<p>The goal of this exercise is to make a basketball bounce across the screen. You can download the ball image <a href="https://raw.githubusercontent.com/bpesquet/thejsway/master/resources/basketball.jpg" target="_blank" rel="noopener">here</a>.<br>Start with the following HTML and CSS content.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span>Start<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stop"</span> <span class="attr">disabled</span>&gt;</span>Stop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"frame"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Update the "src" attribute if you downloaded the image locally --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"ball"</span> <span class="attr">src</span>=<span class="string">"https://raw.githubusercontent.com/bpesquet/thejsway/master/resources/basketball.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#ball</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">111px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Write the JavaScript code that makes the ball bounce horizontally.</p>
<p><img src="/2018/12/15/start-and-stop/image-20201013185155126.png" alt="image-20201013184742806"></p>
<p>With your solution, create a variable with values 1 or -1 that dictates the direction in which the ball should move.</p>
<p>与开始和停止计时类似。<br>出现问题：<br>1.无法停止动画。<br>(似乎是因为 <code>balljump()</code> 内部带有 <code>requestAnimationFrame()</code> 而重复启用。<br>改进代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> balljump = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> weizhi = <span class="built_in">parseFloat</span>(getComputedStyle(ball).top);</span><br><span class="line">  <span class="keyword">if</span> (weizhi + ballheight &gt;= <span class="number">300</span> || weizhi &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    movement = -movement;</span><br><span class="line">  &#125;</span><br><span class="line">  ball.style.top = weizhi + movement + <span class="string">'px'</span>;</span><br><span class="line">  <span class="keyword">let</span> a = requestAnimationFrame(balljump);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>尝试在 <code>balljump()</code> 调用时显示函数编号 结果为</p>
<p><img src="/2018/12/15/start-and-stop/image-20201013184956322.png" alt="image-20201013184742806"></p>
<p>故 <code>balljump()</code> 内部多次调用该函数 无法停止<br>2.多次点击开始会多次累加  <code>requestAnimationFrame()</code>  而导致动画速度加快。<br>3.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> balljump = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> weizhi = <span class="built_in">parseFloat</span>(getComputedStyle(ball).top);</span><br><span class="line">  <span class="keyword">if</span> (weizhi + ballheight &gt;= <span class="number">300</span> || weizhi &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    movement = -movement;</span><br><span class="line">  &#125;</span><br><span class="line">  ball.style.top = weizhi + movement + <span class="string">'px'</span>;</span><br><span class="line">  requestAnimationFrame(balljump);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> animationId = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> movement = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">'ball'</span>);</span><br><span class="line"><span class="keyword">const</span> ballheight = <span class="built_in">parseFloat</span>(getComputedStyle(ball).height);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (animationId === <span class="number">0</span>) &#123;</span><br><span class="line">    animationId = requestAnimationFrame(balljump);</span><br><span class="line">  &#125;</span><br><span class="line">  e.target.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'stop'</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'stop'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  cancelAnimationFrame(animationId);</span><br><span class="line">  animationId = <span class="number">0</span>;</span><br><span class="line">  e.target.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>出现了打开即两个按钮都启用的状态。原因未知。<br>(似乎文件出了问题。注释掉所有的js代码依然两个按钮都启用，重开文件后解决)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> balljump = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> weizhi = <span class="built_in">parseFloat</span>(getComputedStyle(ball).top);</span><br><span class="line">  <span class="keyword">if</span> (weizhi + ballheight &gt;= <span class="number">300</span> || weizhi &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    movement = -movement;</span><br><span class="line">  &#125;</span><br><span class="line">  ball.style.top = weizhi + movement + <span class="string">'px'</span>;</span><br><span class="line">  <span class="keyword">if</span> (tostart != <span class="number">0</span> || tostop != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tostart === <span class="number">1</span>) &#123;</span><br><span class="line">      tostart = <span class="number">0</span>;</span><br><span class="line">      animationId = requestAnimationFrame(balljump);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tostop === <span class="number">1</span>) &#123;</span><br><span class="line">      tostop = <span class="number">0</span>;</span><br><span class="line">      cancelAnimationFrame(balljump);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    requestAnimationFrame(balljump);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> tostart = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> tostop = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> animationId = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> movement = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">'ball'</span>);</span><br><span class="line"><span class="keyword">const</span> ballheight = <span class="built_in">parseFloat</span>(getComputedStyle(ball).height);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  tostart = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (animationId === <span class="number">0</span>) &#123;</span><br><span class="line">    animationId = requestAnimationFrame(balljump);</span><br><span class="line">  &#125;</span><br><span class="line">  e.target.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'stop'</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'stop'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  tostop = <span class="number">1</span>;</span><br><span class="line">  e.target.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>尝试改写，添加  tostop、tostart  变量来判断，将继续动画与停止动画判断放在了 <code>balljump()</code> 函数中。<br>结果：可以停止动画，但无法二次启动动画。原因未知。<br>在 <code>cancelAnimationFrame()</code> 函数之后重置 <code>animationId</code> 为 <code>0</code> 即可解决。</p>
<p>最终代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> balljump = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> weizhi = <span class="built_in">parseFloat</span>(getComputedStyle(ball).top);</span><br><span class="line">  <span class="keyword">if</span> (weizhi + ballheight &gt;= <span class="number">300</span> || weizhi &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    movement = -movement;</span><br><span class="line">  &#125;</span><br><span class="line">  ball.style.top = weizhi + movement + <span class="string">'px'</span>;</span><br><span class="line">  <span class="keyword">if</span> (tostart != <span class="number">0</span> || tostop != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (tostart === <span class="number">1</span>) &#123;</span><br><span class="line">      tostart = <span class="number">0</span>;</span><br><span class="line">      animationId = requestAnimationFrame(balljump);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tostop === <span class="number">1</span>) &#123;</span><br><span class="line">      tostop = <span class="number">0</span>;</span><br><span class="line">      cancelAnimationFrame(balljump);</span><br><span class="line">      animationId = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    requestAnimationFrame(balljump);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> tostart = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> tostop = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> animationId = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> movement = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">'ball'</span>);</span><br><span class="line"><span class="keyword">const</span> ballheight = <span class="built_in">parseFloat</span>(getComputedStyle(ball).height);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  tostart = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (animationId === <span class="number">0</span>) &#123;</span><br><span class="line">    animationId = requestAnimationFrame(balljump);</span><br><span class="line">  &#125;</span><br><span class="line">  e.target.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'stop'</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'stop'</span>).addEventListener(<span class="string">'click'</span>, e =&gt; &#123;</span><br><span class="line">  tostop = <span class="number">1</span>;</span><br><span class="line">  e.target.disabled = <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>效果基本实现。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>click blur 执行顺序问题</title>
    <url>/2018/12/15/click-blur-%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>2018.12.15 15:27 <strong>ES6学习中</strong></p>
<blockquote>
<p>Thejsway/chapter17 Coding time <code>&lt;Autocomplete&gt;</code></p>
</blockquote>
<p>原题：</p>
<ul>
<li><h2 id="Autocomplete"><a href="#Autocomplete" class="headerlink" title="Autocomplete"></a>Autocomplete</h2></li>
</ul>
<p>In this exercise, you’ll have to assist the user in selecting a country. As he enters the country name in an input box, the page shows a list of corresponding countries. Clicking on a suggested country replaces the value in the input box.</p>
<blockquote>
<p>To keep things simple, only countries starting with a “A” letter are taken into account.</p>
</blockquote>
<p>Here is the HTML code that creates the input box.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"country"</span>&gt;</span>Enter a country name<span class="tag">&lt;/<span class="name">label</span>&gt;</span>:</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"country"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"suggestions"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The following CSS code improves the page presentation.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Add spacing between each country suggestion */</span></span><br><span class="line"><span class="selector-class">.suggestion</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Change suggestion color when hovering it with the mouse */</span></span><br><span class="line"><span class="selector-class">.suggestion</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#adf</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Position the suggestion list just below the input box */</span></span><br><span class="line"><span class="selector-id">#suggestions</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">180px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">145px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Complete this code to implement country autocompletion.</p>
<p><a href="https://github.com/bpesquet/thejsway/blob/master/manuscript/images/chapter17-12.png" target="_blank" rel="noopener"><img src="/2018/12/15/click-blur-%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%E9%97%AE%E9%A2%98/wps2.jpg" alt="img"></a></p>
<p>我的js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countryList = [</span><br><span class="line">  <span class="string">"Afghanistan"</span>,</span><br><span class="line">  <span class="string">"Albania"</span>,</span><br><span class="line">  <span class="string">"Algeria"</span>,</span><br><span class="line">  <span class="string">"Andorra"</span>,</span><br><span class="line">  <span class="string">"Angola"</span>,</span><br><span class="line">  <span class="string">"Anguilla"</span>,</span><br><span class="line">  <span class="string">"Antarctica"</span>,</span><br><span class="line">  <span class="string">"Antigua-and-Barbuda"</span>,</span><br><span class="line">  <span class="string">"Argentina"</span>,</span><br><span class="line">  <span class="string">"Armenia"</span>,</span><br><span class="line">  <span class="string">"Aruba"</span>,</span><br><span class="line">  <span class="string">"Australia"</span>,</span><br><span class="line">  <span class="string">"Autria"</span>,</span><br><span class="line">  <span class="string">"Azerbaïjan"</span></span><br><span class="line">];</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"suggestions"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> some <span class="keyword">of</span> countryList)&#123;</span><br><span class="line">    <span class="keyword">const</span> newli = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">    newli.textContent = some;</span><br><span class="line">    newli.style.listStyle = <span class="string">"none"</span>;</span><br><span class="line">    newli.style.display = <span class="string">"none"</span>;</span><br><span class="line">    newli.className = <span class="string">"suggestion"</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"suggestions"</span>).appendChild(newli);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"suggestions"</span>).addEventListener(<span class="string">"click"</span>, e =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> neirong = e.target.textContent;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"country"</span>).value = neirong;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"suggestions"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"country"</span>).addEventListener(<span class="string">"input"</span>, e =&gt; &#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"suggestions"</span>).style.display = <span class="string">"block"</span>;</span><br><span class="line">  <span class="keyword">const</span> input = e.target.value;</span><br><span class="line">  <span class="keyword">const</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> one <span class="keyword">of</span> lists)&#123;</span><br><span class="line">    <span class="keyword">if</span>(one.textContent.startsWith(input))&#123;</span><br><span class="line">      one.style.display = <span class="string">"block"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      one.style.display = <span class="string">"none"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"country"</span>).addEventListener(<span class="string">"blur"</span>, e =&gt; &#123;</span><br><span class="line">  setTimeout(nonefun, <span class="string">"100"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nonefun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"suggestions"</span>).style.display = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果基本实现，发现click 与blur存在顺序问题，若不设置延时，则click效果无法实现。<br>Click后执行而无法实现效果的原因暂时不知。<br>看到一篇相关文章: <a href="https://www.jb51.net/article/112086.htm" target="_blank" rel="noopener">传送门</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>notes</tag>
        <tag>js</tag>
      </tags>
  </entry>
</search>
